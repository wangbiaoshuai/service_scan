#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Base64.h"
#include "zlib.h"

#include "m_zlib.h"

std::string MCompression(std::string szSrc, unsigned long  & len)
{
	unsigned long usize = compressBound(szSrc.length());
	unsigned char * pbuffer = new unsigned char[usize];
 
	len = usize;

	std::string szResult;
	if(compress((Bytef*)pbuffer, &len, (Bytef*)szSrc.c_str(), szSrc.length()) == Z_OK)
	{
	        CBase64::Encode(pbuffer, len, szResult);
	}

	delete []pbuffer;

	return szResult;
}

/*压缩前原始长度 slen*/
std::string MUncompression(std::string szCompressed, unsigned long & slen)
{
	 unsigned long ulen;
         unsigned long len = szCompressed.length();

         unsigned char *pin = new unsigned char[len];
         bzero(pin, len);

         CBase64::Decode(szCompressed, pin, &ulen);

	 unsigned char * pbuffer = new unsigned char[slen + 1];
	 bzero(pbuffer, slen + 1);

	 std::string szResult;
	 if(uncompress((Bytef*)pbuffer, &slen, (Bytef*)pin, ulen) == Z_OK)
	 {
		szResult.append((char*)pbuffer, slen);
	 }
	 
	 delete []pin;
	 delete []pbuffer;

	 return szResult;
}

int gzcompress(Bytef *data, uLong ndata, Bytef *zdata, uLong *nzdata)
{
	z_stream c_stream;
	int err = 0;

	if(data && ndata > 0) {
		c_stream.zalloc = NULL;
		c_stream.zfree = NULL;
		c_stream.opaque = NULL;
		/*只有设置为MAX_WBITS + 16才能在在压缩文本中带header和trailer*/
		if(deflateInit2(&c_stream, Z_DEFAULT_COMPRESSION, Z_DEFLATED,
			MAX_WBITS + 16, 8, Z_DEFAULT_STRATEGY) != Z_OK) return -1;
		c_stream.next_in  = data;
		c_stream.avail_in  = ndata;
		c_stream.next_out = zdata;
		c_stream.avail_out  = *nzdata;
		while(c_stream.avail_in != 0 && c_stream.total_out < *nzdata) {
			if(deflate(&c_stream, Z_NO_FLUSH) != Z_OK) return -1;
		}
		if(c_stream.avail_in != 0) return c_stream.avail_in;
		for(;;) {
			if((err = deflate(&c_stream, Z_FINISH)) == Z_STREAM_END) break;
			if(err != Z_OK) return -1;
		}
		if(deflateEnd(&c_stream) != Z_OK) return -1;
		*nzdata = c_stream.total_out;
		return 0;
	}
	return -1;
}

int gzdecompress(Byte *zdata, uLong nzdata, Byte *data, uLong *ndata)
{
	int err = 0;
	z_stream d_stream = {0}; /* decompression stream */
	static char dummy_head[2] = {
		0x8 + 0x7 * 0x10,
		(((0x8 + 0x7 * 0x10) * 0x100 + 30) / 31 * 31) & 0xFF,
	};
	d_stream.zalloc = NULL;
	d_stream.zfree = NULL;
	d_stream.opaque = NULL;
	d_stream.next_in  = zdata;
	d_stream.avail_in = 0;
	d_stream.next_out = data;
	/*只有设置为MAX_WBITS + 16才能在解压带header和trailer的文本*/
	if(inflateInit2(&d_stream, MAX_WBITS + 16) != Z_OK) return -1;
	/*if(inflateInit2(&d_stream, 47) != Z_OK) return -1;*/
	while(d_stream.total_out < *ndata && d_stream.total_in < nzdata) {
		d_stream.avail_in = d_stream.avail_out = 1; /* force small buffers */
		if((err = inflate(&d_stream, Z_NO_FLUSH)) == Z_STREAM_END) break;
		if(err != Z_OK) {
			if(err == Z_DATA_ERROR) {
				d_stream.next_in = (Bytef*) dummy_head;
				d_stream.avail_in = sizeof(dummy_head);
				if((err = inflate(&d_stream, Z_NO_FLUSH)) != Z_OK) {
					return -1;
				}
			} else return -1;
		}
	}
	if(inflateEnd(&d_stream) != Z_OK) return -1;
	*ndata = d_stream.total_out;
	return 0;
}

void TestDeflate()
{
	printf("deflate:\n");
	char* p = (char*)"zlex@zlex.org,snowolf@zlex.org,zlex.snowolf@zlex.org";

        unsigned long len;
        std::string szBase;

        szBase = MCompression(p, len);
        printf("compressed len = %lu\nbase64 = %s\n", len, szBase.c_str());

        unsigned long slen = strlen(p);
        std::string szSrc = MUncompression(szBase, slen);

        printf("uncompress len = %lu\nsrc = %s\n",  slen, szSrc.c_str());

}

void TestGzip()
{
	printf("gzip:\n");
	
	int result;
	char bufin[] = "zlex@zlex.org,snowolf@zlex.org,zlex.snowolf@zlex.org";
	char bufout[1024] = {0};
	char bufout2[BUFSIZ] = {0};
	unsigned long lenout;
	int lensrc;
	unsigned long uSlen;

	printf("压缩前长度: %d\n", strlen(bufin));

	int ret = gzcompress((Bytef*)bufin, strlen(bufin), (Bytef*)bufout, &uSlen);
	lenout = uSlen;

	 std::string szBaseGzip;
	 CBase64::Encode((unsigned char*)bufout, (long)lenout, szBaseGzip);

	 printf("压缩后长度: %d\n", lenout);
	 printf("压缩后: base64 ： %s\n", szBaseGzip.c_str());
	
	 bzero(bufout, 1024);
	 CBase64::Decode(szBaseGzip, (unsigned char*)bufout, &lenout);

	unsigned long  uOut = sizeof(bufout2);
	ret = gzdecompress((Byte*)bufout, uSlen, (Byte*)bufout2, &uOut);
	
	printf("bufout2: %s\n", bufout2);

}

int main()
{
	TestGzip();
	return 0;
}
