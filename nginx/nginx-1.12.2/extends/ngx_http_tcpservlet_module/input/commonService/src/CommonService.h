/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CommonService_H
#define CommonService_H

#include <thrift/TDispatchProcessor.h>
#include "commonService_types.h"

namespace com { namespace vrv { namespace cems { namespace common { namespace thrift { namespace service {

class CommonServiceIf {
 public:
  virtual ~CommonServiceIf() {}
  virtual void getDataTS(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& checkCode, const bool isZip, const std::string& data, const bool isEncrypt, const std::string& key, const int32_t flag) = 0;
  virtual void getDataTC(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& checkCode, const bool isZip, const std::string& data, const std::string& sessionId, const int32_t msgCode) = 0;
};

class CommonServiceIfFactory {
 public:
  typedef CommonServiceIf Handler;

  virtual ~CommonServiceIfFactory() {}

  virtual CommonServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CommonServiceIf* /* handler */) = 0;
};

class CommonServiceIfSingletonFactory : virtual public CommonServiceIfFactory {
 public:
  CommonServiceIfSingletonFactory(const boost::shared_ptr<CommonServiceIf>& iface) : iface_(iface) {}
  virtual ~CommonServiceIfSingletonFactory() {}

  virtual CommonServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CommonServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CommonServiceIf> iface_;
};

class CommonServiceNull : virtual public CommonServiceIf {
 public:
  virtual ~CommonServiceNull() {}
  void getDataTS(std::string& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* checkCode */, const bool /* isZip */, const std::string& /* data */, const bool /* isEncrypt */, const std::string& /* key */, const int32_t /* flag */) {
    return;
  }
  void getDataTC(std::string& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* checkCode */, const bool /* isZip */, const std::string& /* data */, const std::string& /* sessionId */, const int32_t /* msgCode */) {
    return;
  }
};

typedef struct _CommonService_getDataTS_args__isset {
  _CommonService_getDataTS_args__isset() : maxCode(false), minCode(false), checkCode(false), isZip(false), data(false), isEncrypt(false), key(false), flag(false) {}
  bool maxCode;
  bool minCode;
  bool checkCode;
  bool isZip;
  bool data;
  bool isEncrypt;
  bool key;
  bool flag;
} _CommonService_getDataTS_args__isset;

class CommonService_getDataTS_args {
 public:

  CommonService_getDataTS_args() : maxCode(), minCode(), checkCode(), isZip(0), data(), isEncrypt(0), key(), flag(0) {
  }

  virtual ~CommonService_getDataTS_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string checkCode;
  bool isZip;
  std::string data;
  bool isEncrypt;
  std::string key;
  int32_t flag;

  _CommonService_getDataTS_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_checkCode(const std::string& val) {
    checkCode = val;
  }

  void __set_isZip(const bool val) {
    isZip = val;
  }

  void __set_data(const std::string& val) {
    data = val;
  }

  void __set_isEncrypt(const bool val) {
    isEncrypt = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_flag(const int32_t val) {
    flag = val;
  }

  bool operator == (const CommonService_getDataTS_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(checkCode == rhs.checkCode))
      return false;
    if (!(isZip == rhs.isZip))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(isEncrypt == rhs.isEncrypt))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(flag == rhs.flag))
      return false;
    return true;
  }
  bool operator != (const CommonService_getDataTS_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonService_getDataTS_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonService_getDataTS_pargs {
 public:


  virtual ~CommonService_getDataTS_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* checkCode;
  const bool* isZip;
  const std::string* data;
  const bool* isEncrypt;
  const std::string* key;
  const int32_t* flag;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonService_getDataTS_result__isset {
  _CommonService_getDataTS_result__isset() : success(false) {}
  bool success;
} _CommonService_getDataTS_result__isset;

class CommonService_getDataTS_result {
 public:

  CommonService_getDataTS_result() : success() {
  }

  virtual ~CommonService_getDataTS_result() throw() {}

  std::string success;

  _CommonService_getDataTS_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const CommonService_getDataTS_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonService_getDataTS_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonService_getDataTS_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonService_getDataTS_presult__isset {
  _CommonService_getDataTS_presult__isset() : success(false) {}
  bool success;
} _CommonService_getDataTS_presult__isset;

class CommonService_getDataTS_presult {
 public:


  virtual ~CommonService_getDataTS_presult() throw() {}

  std::string* success;

  _CommonService_getDataTS_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CommonService_getDataTC_args__isset {
  _CommonService_getDataTC_args__isset() : maxCode(false), minCode(false), checkCode(false), isZip(false), data(false), sessionId(false), msgCode(false) {}
  bool maxCode;
  bool minCode;
  bool checkCode;
  bool isZip;
  bool data;
  bool sessionId;
  bool msgCode;
} _CommonService_getDataTC_args__isset;

class CommonService_getDataTC_args {
 public:

  CommonService_getDataTC_args() : maxCode(), minCode(), checkCode(), isZip(0), data(), sessionId(), msgCode(0) {
  }

  virtual ~CommonService_getDataTC_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string checkCode;
  bool isZip;
  std::string data;
  std::string sessionId;
  int32_t msgCode;

  _CommonService_getDataTC_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_checkCode(const std::string& val) {
    checkCode = val;
  }

  void __set_isZip(const bool val) {
    isZip = val;
  }

  void __set_data(const std::string& val) {
    data = val;
  }

  void __set_sessionId(const std::string& val) {
    sessionId = val;
  }

  void __set_msgCode(const int32_t val) {
    msgCode = val;
  }

  bool operator == (const CommonService_getDataTC_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(checkCode == rhs.checkCode))
      return false;
    if (!(isZip == rhs.isZip))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(msgCode == rhs.msgCode))
      return false;
    return true;
  }
  bool operator != (const CommonService_getDataTC_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonService_getDataTC_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CommonService_getDataTC_pargs {
 public:


  virtual ~CommonService_getDataTC_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* checkCode;
  const bool* isZip;
  const std::string* data;
  const std::string* sessionId;
  const int32_t* msgCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonService_getDataTC_result__isset {
  _CommonService_getDataTC_result__isset() : success(false) {}
  bool success;
} _CommonService_getDataTC_result__isset;

class CommonService_getDataTC_result {
 public:

  CommonService_getDataTC_result() : success() {
  }

  virtual ~CommonService_getDataTC_result() throw() {}

  std::string success;

  _CommonService_getDataTC_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const CommonService_getDataTC_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CommonService_getDataTC_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommonService_getDataTC_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CommonService_getDataTC_presult__isset {
  _CommonService_getDataTC_presult__isset() : success(false) {}
  bool success;
} _CommonService_getDataTC_presult__isset;

class CommonService_getDataTC_presult {
 public:


  virtual ~CommonService_getDataTC_presult() throw() {}

  std::string* success;

  _CommonService_getDataTC_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CommonServiceClient : virtual public CommonServiceIf {
 public:
  CommonServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CommonServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getDataTS(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& checkCode, const bool isZip, const std::string& data, const bool isEncrypt, const std::string& key, const int32_t flag);
  void send_getDataTS(const std::string& maxCode, const std::string& minCode, const std::string& checkCode, const bool isZip, const std::string& data, const bool isEncrypt, const std::string& key, const int32_t flag);
  void recv_getDataTS(std::string& _return);
  void getDataTC(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& checkCode, const bool isZip, const std::string& data, const std::string& sessionId, const int32_t msgCode);
  void send_getDataTC(const std::string& maxCode, const std::string& minCode, const std::string& checkCode, const bool isZip, const std::string& data, const std::string& sessionId, const int32_t msgCode);
  void recv_getDataTC(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CommonServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CommonServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CommonServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getDataTS(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getDataTC(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CommonServiceProcessor(boost::shared_ptr<CommonServiceIf> iface) :
    iface_(iface) {
    processMap_["getDataTS"] = &CommonServiceProcessor::process_getDataTS;
    processMap_["getDataTC"] = &CommonServiceProcessor::process_getDataTC;
  }

  virtual ~CommonServiceProcessor() {}
};

class CommonServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CommonServiceProcessorFactory(const ::boost::shared_ptr< CommonServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CommonServiceIfFactory > handlerFactory_;
};

class CommonServiceMultiface : virtual public CommonServiceIf {
 public:
  CommonServiceMultiface(std::vector<boost::shared_ptr<CommonServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CommonServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CommonServiceIf> > ifaces_;
  CommonServiceMultiface() {}
  void add(boost::shared_ptr<CommonServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getDataTS(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& checkCode, const bool isZip, const std::string& data, const bool isEncrypt, const std::string& key, const int32_t flag) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDataTS(_return, maxCode, minCode, checkCode, isZip, data, isEncrypt, key, flag);
    }
    ifaces_[i]->getDataTS(_return, maxCode, minCode, checkCode, isZip, data, isEncrypt, key, flag);
    return;
  }

  void getDataTC(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& checkCode, const bool isZip, const std::string& data, const std::string& sessionId, const int32_t msgCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDataTC(_return, maxCode, minCode, checkCode, isZip, data, sessionId, msgCode);
    }
    ifaces_[i]->getDataTC(_return, maxCode, minCode, checkCode, isZip, data, sessionId, msgCode);
    return;
  }

};

}}}}}} // namespace

#endif
