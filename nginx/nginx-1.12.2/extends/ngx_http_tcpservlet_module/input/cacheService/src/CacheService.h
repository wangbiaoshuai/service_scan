/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CacheService_H
#define CacheService_H

#include <thrift/TDispatchProcessor.h>
#include "cacheService_types.h"

namespace com { namespace vrv { namespace cems { namespace service { namespace base { namespace interfaces {

class CacheServiceIf {
 public:
  virtual ~CacheServiceIf() {}
  virtual void getDataTS(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& checkCode, const bool isZip, const std::string& data, const bool isEncrypt, const std::string& key, const int32_t flag) = 0;
  virtual void isExist( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& prefix, const std::string& key) = 0;
  virtual void setExpireTimeByString( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const int32_t expireTime) = 0;
  virtual void setExpireTimeByBinary( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const int32_t expireTime) = 0;
  virtual void batchDel( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & keyList) = 0;
  virtual void saveDevice( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& deviceCache) = 0;
  virtual void updateDevice( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& deviceCache) = 0;
  virtual void updateDeviceByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::map<std::string, std::string> & fieldValueMap) = 0;
  virtual void queryDevice( ::com::vrv::cems::service::base::bean::cache::DeviceCache& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& deviceCache) = 0;
  virtual void queryDeviceByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DeviceCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) = 0;
  virtual void queryDeviceByIp( ::com::vrv::cems::service::base::bean::cache::DeviceCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip) = 0;
  virtual void deleteDevice( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& deviceCache) = 0;
  virtual void deleteDeviceByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) = 0;
  virtual void deleteDeviceByIp( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip) = 0;
  virtual void batchSaveDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & _return, const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & deviceCacheList) = 0;
  virtual void batchUpdateDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & _return, const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & deviceCacheList) = 0;
  virtual void batchQueryDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & _return, const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & deviceCacheList) = 0;
  virtual void batchQueryDeviceByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & devOnlyIdList) = 0;
  virtual void batchDeleteDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & _return, const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & deviceCacheList) = 0;
  virtual void batchDeleteDeviceByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & devOnlyIdList) = 0;
  virtual void saveDeviceOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& deviceOnlineCache) = 0;
  virtual void updateDeviceOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& deviceOnlineCache) = 0;
  virtual void updateDeviceOnlineByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::map<std::string, std::string> & fieldValueMap) = 0;
  virtual void queryDeviceOnline( ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& deviceOnlineCache) = 0;
  virtual void queryDeviceOnlineByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) = 0;
  virtual void queryDeviceOnlineByIp( ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip) = 0;
  virtual void deleteDeviceOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& deviceOnlineCache) = 0;
  virtual void deleteDeviceOnlineByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) = 0;
  virtual void deleteDeviceOnlineByIp( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip) = 0;
  virtual void queryAllDeviceOnlineCache(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache> & _return, const std::string& maxCode, const std::string& minCode) = 0;
  virtual void queryOnlineDevOnlyIdsByUserOnlyId(std::vector<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId) = 0;
  virtual void batchQueryDeviceOnlinesByDevOnlyIdList(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache> & _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & devOnlyIdList) = 0;
  virtual void saveDeviceKey( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& deviceKeyCache) = 0;
  virtual void updateDeviceKey( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& deviceKeyCache) = 0;
  virtual void updateDeviceKeyByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sessionId, const std::map<std::string, std::string> & fieldValueMap) = 0;
  virtual void queryDeviceKey( ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& deviceKeyCache) = 0;
  virtual void queryDeviceKeyBySessionId( ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& sessionId) = 0;
  virtual void queryDeviceKeyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) = 0;
  virtual void deleteDeviceKey( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& deviceKeyCache) = 0;
  virtual void deleteDeviceKeyBySessionId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sessionId) = 0;
  virtual void deleteDeviceKeyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) = 0;
  virtual void isExistSessionIdInDeviceKeyCache( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sessionId) = 0;
  virtual void batchQueryDeviceKeysBySessionIdList(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache> & _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & sessionIdList) = 0;
  virtual void saveDeviceInsProOld( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & deviceProductList) = 0;
  virtual void updateDeviceInsProOld( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & deviceProductList) = 0;
  virtual void queryDeviceInsProOldByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) = 0;
  virtual void deleteDeviceInsProOldByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) = 0;
  virtual void saveDeviceInsProNew( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & deviceProductList) = 0;
  virtual void updateDeviceInsProNew( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & deviceProductList) = 0;
  virtual void queryDeviceInsProNewByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) = 0;
  virtual void deleteDeviceInsProNewByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) = 0;
  virtual void saveDevicePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& devicePolicyCache) = 0;
  virtual void updateDevicePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& devicePolicyCache) = 0;
  virtual void queryDevicePolicyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) = 0;
  virtual void queryDevicePolicyByIp( ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip) = 0;
  virtual void deleteDevicePolicyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) = 0;
  virtual void deleteDevicePolicyByIp( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip) = 0;
  virtual void batchSaveDevicePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::map<std::string, std::string> > & devicePolicyList) = 0;
  virtual void saveUser( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserCache& userCache) = 0;
  virtual void updateUser( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserCache& userCache) = 0;
  virtual void updateUserByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::map<std::string, std::string> & fieldValueMap) = 0;
  virtual void queryUserByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::UserCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId) = 0;
  virtual void deleteUserByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId) = 0;
  virtual void batchSaveUser( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::UserCache> & userCacheList) = 0;
  virtual void saveUserOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserOnlineCache& userOnlineCache) = 0;
  virtual void updateUserOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserOnlineCache& userOnlineCache) = 0;
  virtual void updateUserOnlineByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userDevId, const std::map<std::string, std::string> & fieldValueMap) = 0;
  virtual void queryUserOnlineByUserDevId( ::com::vrv::cems::service::base::bean::cache::UserOnlineCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& userDevId) = 0;
  virtual void deleteUserOnlineByUserDevId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userDevId) = 0;
  virtual void queryAllUserOnlineDevice(std::map<std::string, std::set<std::string> > & _return, const std::string& maxCode, const std::string& minCode) = 0;
  virtual void saveUserPolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserPolicyCache& userPolicyCache) = 0;
  virtual void updateUserPolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserPolicyCache& userPolicyCache) = 0;
  virtual void queryUserPolicyByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::UserPolicyCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId) = 0;
  virtual void deleteUserPolicyByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId) = 0;
  virtual void batchSaveUserPolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::map<std::string, std::string> > & userPolicyist) = 0;
  virtual void saveProductCInstallPack( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::CInstallPackCache& cInstallPackCache) = 0;
  virtual void updateProductCInstallPack( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::CInstallPackCache& cInstallPackCache) = 0;
  virtual void updateProductCInstallPackByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& cInstallPackId, const std::map<std::string, std::string> & fieldValueMap) = 0;
  virtual void queryProductCInstallPackById( ::com::vrv::cems::service::base::bean::cache::CInstallPackCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& cInstallPackId) = 0;
  virtual void deleteProductCInstallPackById( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& cInstallPackId) = 0;
  virtual void savePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::PolicyCache& policyCache) = 0;
  virtual void updatePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::PolicyCache& policyCache) = 0;
  virtual void updatePolicyByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& policyId, const std::map<std::string, std::string> & fieldValueMap) = 0;
  virtual void queryPolicyByPolicyId( ::com::vrv::cems::service::base::bean::cache::PolicyCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& policyId) = 0;
  virtual void deletePolicyByPolicyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& policyId) = 0;
  virtual void saveIPMAC2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& mac, const std::string& devOnlyId) = 0;
  virtual void updateIPMAC2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& mac, const std::string& devOnlyId) = 0;
  virtual void queryIPMAC2DevOnlyId(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& mac) = 0;
  virtual void deleteIPMAC2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& mac) = 0;
  virtual void saveIP2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& devOnlyId) = 0;
  virtual void updateIP2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& devOnlyId) = 0;
  virtual void queryIP2DevOnlyId(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip) = 0;
  virtual void deleteIP2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip) = 0;
  virtual void saveProductCUpgradePack( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache& cUpgradePackCache) = 0;
  virtual void updateProductCUpgradePack( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache& cUpgradePackCache) = 0;
  virtual void updateProductCUpgradePackByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& cUpgradePackId, const std::map<std::string, std::string> & fieldValueMap) = 0;
  virtual void queryProductCUpgradePackById( ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& cUpgradePackId) = 0;
  virtual void deleteProductCUpgradePackById( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& cUpgradePackId) = 0;
  virtual void saveAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& account, const std::string& userOnlyId) = 0;
  virtual void updateAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& account, const std::string& userOnlyId) = 0;
  virtual void queryAccount2UserOnlyId(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& account) = 0;
  virtual void deleteAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& account) = 0;
  virtual void batchSaveAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::UserCache> & userCacheList) = 0;
  virtual void savePtp( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& uuid, const std::string& ptpResult) = 0;
  virtual void updatePtp( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& uuid, const std::string& ptpResult) = 0;
  virtual void queryPtp(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& uuid) = 0;
  virtual void deletePtp( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& uuid) = 0;
  virtual void saveSensitive( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::SensitiveCache& sensitiveCache) = 0;
  virtual void updateSensitive( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::SensitiveCache& sensitiveCache) = 0;
  virtual void querySensitive( ::com::vrv::cems::service::base::bean::cache::SensitiveCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& name) = 0;
  virtual void querySensitiveByField(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& name, const std::string& fieldKey) = 0;
  virtual void deleteSensitive( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& name) = 0;
  virtual void saveDeviceMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::map<std::string, std::vector<std::string> > & fieldValueMap) = 0;
  virtual void saveDeviceMsgDigestWithDevOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType, const std::vector<std::string> & msgIdList) = 0;
  virtual void saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType, const std::string& msgId) = 0;
  virtual void deleteDeviceMsgDigestByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) = 0;
  virtual void deleteDeviceMsgDigestByDevOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType) = 0;
  virtual void deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType, const std::string& msgId) = 0;
  virtual void updateDeviceMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType, const std::string& msgId) = 0;
  virtual void queryDeviceMsgDigestByDevOnlyId(std::map<std::string, std::vector<std::string> > & _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) = 0;
  virtual void queryDeviceMsgDigestByDevIdAndMsgType(std::vector<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType) = 0;
  virtual void saveUserMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::map<std::string, std::vector<std::string> > & fieldValueMap) = 0;
  virtual void saveUserMsgDigestWithUserOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType, const std::vector<std::string> & msgIdList) = 0;
  virtual void saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType, const std::string& msgId) = 0;
  virtual void deleteUserMsgDigestByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId) = 0;
  virtual void deleteUserMsgDigestByUserOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType) = 0;
  virtual void deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType, const std::string& msgId) = 0;
  virtual void updateUserMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType, const std::string& msgId) = 0;
  virtual void queryUserMsgDigestByUserOnlyId(std::map<std::string, std::vector<std::string> > & _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId) = 0;
  virtual void queryDeviceMsgDigestByUserOnlyIdAndMsgType(std::vector<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType) = 0;
  virtual void saveMsg( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::MsgCache& msgCache) = 0;
  virtual void deleteMsg( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& msgId) = 0;
  virtual void queryMsg( ::com::vrv::cems::service::base::bean::cache::MsgCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& msgId) = 0;
  virtual void saveToken( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::TokenCache& tokenCache) = 0;
  virtual void deleteTokenByAppId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& appId) = 0;
  virtual void updateTokenByAppId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::TokenCache& tokenCache) = 0;
  virtual void queryTokenByAppId( ::com::vrv::cems::service::base::bean::cache::TokenCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& appId) = 0;
  virtual void saveSession( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::map<std::string, std::string> & hashMap) = 0;
  virtual void saveSessionByDetail( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::string& key, const std::string& value) = 0;
  virtual void deleteSession( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId) = 0;
  virtual void deleteSessionByDetail( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::string& key) = 0;
  virtual void updataSessionByDetail( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::string& key, const std::string& value) = 0;
  virtual void updateSession( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::map<std::string, std::string> & hashMap) = 0;
  virtual void querySessionByDetail(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::string& key) = 0;
  virtual void querySession(std::map<std::string, std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& sId) = 0;
  virtual void commonHset( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& field, const std::string& value) = 0;
  virtual void commonHmset( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::map<std::string, std::string> & hashMap) = 0;
  virtual void commonHsetnx( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& field, const std::string& value) = 0;
  virtual void commonHdel( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::vector<std::string> & fields) = 0;
  virtual void commonBatchHget(std::map<std::string, std::map<std::string, std::string> > & _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & keys) = 0;
  virtual void commonHgetAll(std::map<std::string, std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key) = 0;
  virtual void commonHget(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& field) = 0;
  virtual void commonHmget(std::vector<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::vector<std::string> & fields) = 0;
  virtual void commonHscan(std::map<std::string, std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& cursor, const std::string& match, const std::string& count) = 0;
  virtual void commonHvals(std::vector<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key) = 0;
  virtual bool commonHexists(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& field) = 0;
  virtual int64_t commonHlen(const std::string& maxCode, const std::string& minCode, const std::string& key) = 0;
  virtual void commonZadd( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::map<std::string, double> & hashMap, const std::string& options) = 0;
  virtual void commonZrem( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::vector<std::string> & members) = 0;
  virtual void commonZremrangeByScore( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max) = 0;
  virtual void commonZremrangeByRank( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const int64_t min, const int64_t max) = 0;
  virtual void commonZremrangeByLex( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& min, const std::string& max) = 0;
  virtual int64_t commonZcard(const std::string& maxCode, const std::string& minCode, const std::string& key) = 0;
  virtual double commonZscore(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& member) = 0;
  virtual int64_t commonZrank(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& member, const std::string& sortType) = 0;
  virtual void commonPageZrangeByScore(std::set<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max, const std::string& sortType, const int32_t offset, const int32_t count) = 0;
  virtual void commonPageZrangeByScoreWithScores(std::map<std::string, std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max, const std::string& sortType, const int32_t offset, const int32_t count) = 0;
  virtual void commonZrangeByScore(std::map<std::string, std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max, const std::string& sortType) = 0;
  virtual void commonZrangeByScoreWithScores(std::set<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max, const std::string& sortType) = 0;
  virtual void commonZrange(std::set<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const int64_t min, const int64_t max, const std::string& sortType) = 0;
  virtual double commonZincrby(const std::string& maxCode, const std::string& minCode, const std::string& key, const double sorce, const std::string& member) = 0;
  virtual int64_t commonZcount(const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max) = 0;
};

class CacheServiceIfFactory {
 public:
  typedef CacheServiceIf Handler;

  virtual ~CacheServiceIfFactory() {}

  virtual CacheServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CacheServiceIf* /* handler */) = 0;
};

class CacheServiceIfSingletonFactory : virtual public CacheServiceIfFactory {
 public:
  CacheServiceIfSingletonFactory(const boost::shared_ptr<CacheServiceIf>& iface) : iface_(iface) {}
  virtual ~CacheServiceIfSingletonFactory() {}

  virtual CacheServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CacheServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CacheServiceIf> iface_;
};

class CacheServiceNull : virtual public CacheServiceIf {
 public:
  virtual ~CacheServiceNull() {}
  void getDataTS(std::string& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* checkCode */, const bool /* isZip */, const std::string& /* data */, const bool /* isEncrypt */, const std::string& /* key */, const int32_t /* flag */) {
    return;
  }
  void isExist( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* prefix */, const std::string& /* key */) {
    return;
  }
  void setExpireTimeByString( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const int32_t /* expireTime */) {
    return;
  }
  void setExpireTimeByBinary( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const int32_t /* expireTime */) {
    return;
  }
  void batchDel( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::vector<std::string> & /* keyList */) {
    return;
  }
  void saveDevice( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& /* deviceCache */) {
    return;
  }
  void updateDevice( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& /* deviceCache */) {
    return;
  }
  void updateDeviceByField( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */, const std::map<std::string, std::string> & /* fieldValueMap */) {
    return;
  }
  void queryDevice( ::com::vrv::cems::service::base::bean::cache::DeviceCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& /* deviceCache */) {
    return;
  }
  void queryDeviceByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DeviceCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */) {
    return;
  }
  void queryDeviceByIp( ::com::vrv::cems::service::base::bean::cache::DeviceCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* ip */) {
    return;
  }
  void deleteDevice( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& /* deviceCache */) {
    return;
  }
  void deleteDeviceByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */) {
    return;
  }
  void deleteDeviceByIp( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* ip */) {
    return;
  }
  void batchSaveDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & /* deviceCacheList */) {
    return;
  }
  void batchUpdateDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & /* deviceCacheList */) {
    return;
  }
  void batchQueryDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & /* deviceCacheList */) {
    return;
  }
  void batchQueryDeviceByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::vector<std::string> & /* devOnlyIdList */) {
    return;
  }
  void batchDeleteDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & /* deviceCacheList */) {
    return;
  }
  void batchDeleteDeviceByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::vector<std::string> & /* devOnlyIdList */) {
    return;
  }
  void saveDeviceOnline( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& /* deviceOnlineCache */) {
    return;
  }
  void updateDeviceOnline( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& /* deviceOnlineCache */) {
    return;
  }
  void updateDeviceOnlineByField( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */, const std::map<std::string, std::string> & /* fieldValueMap */) {
    return;
  }
  void queryDeviceOnline( ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& /* deviceOnlineCache */) {
    return;
  }
  void queryDeviceOnlineByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */) {
    return;
  }
  void queryDeviceOnlineByIp( ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* ip */) {
    return;
  }
  void deleteDeviceOnline( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& /* deviceOnlineCache */) {
    return;
  }
  void deleteDeviceOnlineByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */) {
    return;
  }
  void deleteDeviceOnlineByIp( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* ip */) {
    return;
  }
  void queryAllDeviceOnlineCache(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */) {
    return;
  }
  void queryOnlineDevOnlyIdsByUserOnlyId(std::vector<std::string> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* userOnlyId */) {
    return;
  }
  void batchQueryDeviceOnlinesByDevOnlyIdList(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::vector<std::string> & /* devOnlyIdList */) {
    return;
  }
  void saveDeviceKey( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& /* deviceKeyCache */) {
    return;
  }
  void updateDeviceKey( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& /* deviceKeyCache */) {
    return;
  }
  void updateDeviceKeyByField( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* sessionId */, const std::map<std::string, std::string> & /* fieldValueMap */) {
    return;
  }
  void queryDeviceKey( ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& /* deviceKeyCache */) {
    return;
  }
  void queryDeviceKeyBySessionId( ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* sessionId */) {
    return;
  }
  void queryDeviceKeyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */) {
    return;
  }
  void deleteDeviceKey( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& /* deviceKeyCache */) {
    return;
  }
  void deleteDeviceKeyBySessionId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* sessionId */) {
    return;
  }
  void deleteDeviceKeyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */) {
    return;
  }
  void isExistSessionIdInDeviceKeyCache( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* sessionId */) {
    return;
  }
  void batchQueryDeviceKeysBySessionIdList(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::vector<std::string> & /* sessionIdList */) {
    return;
  }
  void saveDeviceInsProOld( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & /* deviceProductList */) {
    return;
  }
  void updateDeviceInsProOld( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & /* deviceProductList */) {
    return;
  }
  void queryDeviceInsProOldByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */) {
    return;
  }
  void deleteDeviceInsProOldByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */) {
    return;
  }
  void saveDeviceInsProNew( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & /* deviceProductList */) {
    return;
  }
  void updateDeviceInsProNew( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & /* deviceProductList */) {
    return;
  }
  void queryDeviceInsProNewByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */) {
    return;
  }
  void deleteDeviceInsProNewByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */) {
    return;
  }
  void saveDevicePolicy( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& /* devicePolicyCache */) {
    return;
  }
  void updateDevicePolicy( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& /* devicePolicyCache */) {
    return;
  }
  void queryDevicePolicyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */) {
    return;
  }
  void queryDevicePolicyByIp( ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* ip */) {
    return;
  }
  void deleteDevicePolicyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */) {
    return;
  }
  void deleteDevicePolicyByIp( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* ip */) {
    return;
  }
  void batchSaveDevicePolicy( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::vector<std::map<std::string, std::string> > & /* devicePolicyList */) {
    return;
  }
  void saveUser( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::UserCache& /* userCache */) {
    return;
  }
  void updateUser( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::UserCache& /* userCache */) {
    return;
  }
  void updateUserByField( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* userOnlyId */, const std::map<std::string, std::string> & /* fieldValueMap */) {
    return;
  }
  void queryUserByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::UserCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* userOnlyId */) {
    return;
  }
  void deleteUserByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* userOnlyId */) {
    return;
  }
  void batchSaveUser( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::vector< ::com::vrv::cems::service::base::bean::cache::UserCache> & /* userCacheList */) {
    return;
  }
  void saveUserOnline( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::UserOnlineCache& /* userOnlineCache */) {
    return;
  }
  void updateUserOnline( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::UserOnlineCache& /* userOnlineCache */) {
    return;
  }
  void updateUserOnlineByField( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* userDevId */, const std::map<std::string, std::string> & /* fieldValueMap */) {
    return;
  }
  void queryUserOnlineByUserDevId( ::com::vrv::cems::service::base::bean::cache::UserOnlineCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* userDevId */) {
    return;
  }
  void deleteUserOnlineByUserDevId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* userDevId */) {
    return;
  }
  void queryAllUserOnlineDevice(std::map<std::string, std::set<std::string> > & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */) {
    return;
  }
  void saveUserPolicy( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::UserPolicyCache& /* userPolicyCache */) {
    return;
  }
  void updateUserPolicy( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::UserPolicyCache& /* userPolicyCache */) {
    return;
  }
  void queryUserPolicyByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::UserPolicyCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* userOnlyId */) {
    return;
  }
  void deleteUserPolicyByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* userOnlyId */) {
    return;
  }
  void batchSaveUserPolicy( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::vector<std::map<std::string, std::string> > & /* userPolicyist */) {
    return;
  }
  void saveProductCInstallPack( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::CInstallPackCache& /* cInstallPackCache */) {
    return;
  }
  void updateProductCInstallPack( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::CInstallPackCache& /* cInstallPackCache */) {
    return;
  }
  void updateProductCInstallPackByField( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* cInstallPackId */, const std::map<std::string, std::string> & /* fieldValueMap */) {
    return;
  }
  void queryProductCInstallPackById( ::com::vrv::cems::service::base::bean::cache::CInstallPackCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* cInstallPackId */) {
    return;
  }
  void deleteProductCInstallPackById( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* cInstallPackId */) {
    return;
  }
  void savePolicy( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::PolicyCache& /* policyCache */) {
    return;
  }
  void updatePolicy( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::PolicyCache& /* policyCache */) {
    return;
  }
  void updatePolicyByField( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* policyId */, const std::map<std::string, std::string> & /* fieldValueMap */) {
    return;
  }
  void queryPolicyByPolicyId( ::com::vrv::cems::service::base::bean::cache::PolicyCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* policyId */) {
    return;
  }
  void deletePolicyByPolicyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* policyId */) {
    return;
  }
  void saveIPMAC2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* ip */, const std::string& /* mac */, const std::string& /* devOnlyId */) {
    return;
  }
  void updateIPMAC2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* ip */, const std::string& /* mac */, const std::string& /* devOnlyId */) {
    return;
  }
  void queryIPMAC2DevOnlyId(std::string& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* ip */, const std::string& /* mac */) {
    return;
  }
  void deleteIPMAC2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* ip */, const std::string& /* mac */) {
    return;
  }
  void saveIP2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* ip */, const std::string& /* devOnlyId */) {
    return;
  }
  void updateIP2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* ip */, const std::string& /* devOnlyId */) {
    return;
  }
  void queryIP2DevOnlyId(std::string& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* ip */) {
    return;
  }
  void deleteIP2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* ip */) {
    return;
  }
  void saveProductCUpgradePack( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache& /* cUpgradePackCache */) {
    return;
  }
  void updateProductCUpgradePack( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache& /* cUpgradePackCache */) {
    return;
  }
  void updateProductCUpgradePackByField( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* cUpgradePackId */, const std::map<std::string, std::string> & /* fieldValueMap */) {
    return;
  }
  void queryProductCUpgradePackById( ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* cUpgradePackId */) {
    return;
  }
  void deleteProductCUpgradePackById( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* cUpgradePackId */) {
    return;
  }
  void saveAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* account */, const std::string& /* userOnlyId */) {
    return;
  }
  void updateAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* account */, const std::string& /* userOnlyId */) {
    return;
  }
  void queryAccount2UserOnlyId(std::string& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* account */) {
    return;
  }
  void deleteAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* account */) {
    return;
  }
  void batchSaveAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::vector< ::com::vrv::cems::service::base::bean::cache::UserCache> & /* userCacheList */) {
    return;
  }
  void savePtp( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* uuid */, const std::string& /* ptpResult */) {
    return;
  }
  void updatePtp( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* uuid */, const std::string& /* ptpResult */) {
    return;
  }
  void queryPtp(std::string& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* uuid */) {
    return;
  }
  void deletePtp( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* uuid */) {
    return;
  }
  void saveSensitive( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::SensitiveCache& /* sensitiveCache */) {
    return;
  }
  void updateSensitive( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::SensitiveCache& /* sensitiveCache */) {
    return;
  }
  void querySensitive( ::com::vrv::cems::service::base::bean::cache::SensitiveCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* name */) {
    return;
  }
  void querySensitiveByField(std::string& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* name */, const std::string& /* fieldKey */) {
    return;
  }
  void deleteSensitive( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* name */) {
    return;
  }
  void saveDeviceMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */, const std::map<std::string, std::vector<std::string> > & /* fieldValueMap */) {
    return;
  }
  void saveDeviceMsgDigestWithDevOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */, const std::string& /* msgType */, const std::vector<std::string> & /* msgIdList */) {
    return;
  }
  void saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */, const std::string& /* msgType */, const std::string& /* msgId */) {
    return;
  }
  void deleteDeviceMsgDigestByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */) {
    return;
  }
  void deleteDeviceMsgDigestByDevOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */, const std::string& /* msgType */) {
    return;
  }
  void deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */, const std::string& /* msgType */, const std::string& /* msgId */) {
    return;
  }
  void updateDeviceMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */, const std::string& /* msgType */, const std::string& /* msgId */) {
    return;
  }
  void queryDeviceMsgDigestByDevOnlyId(std::map<std::string, std::vector<std::string> > & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */) {
    return;
  }
  void queryDeviceMsgDigestByDevIdAndMsgType(std::vector<std::string> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* devOnlyId */, const std::string& /* msgType */) {
    return;
  }
  void saveUserMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* userOnlyId */, const std::map<std::string, std::vector<std::string> > & /* fieldValueMap */) {
    return;
  }
  void saveUserMsgDigestWithUserOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* userOnlyId */, const std::string& /* msgType */, const std::vector<std::string> & /* msgIdList */) {
    return;
  }
  void saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* userOnlyId */, const std::string& /* msgType */, const std::string& /* msgId */) {
    return;
  }
  void deleteUserMsgDigestByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* userOnlyId */) {
    return;
  }
  void deleteUserMsgDigestByUserOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* userOnlyId */, const std::string& /* msgType */) {
    return;
  }
  void deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* userOnlyId */, const std::string& /* msgType */, const std::string& /* msgId */) {
    return;
  }
  void updateUserMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* userOnlyId */, const std::string& /* msgType */, const std::string& /* msgId */) {
    return;
  }
  void queryUserMsgDigestByUserOnlyId(std::map<std::string, std::vector<std::string> > & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* userOnlyId */) {
    return;
  }
  void queryDeviceMsgDigestByUserOnlyIdAndMsgType(std::vector<std::string> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* userOnlyId */, const std::string& /* msgType */) {
    return;
  }
  void saveMsg( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::MsgCache& /* msgCache */) {
    return;
  }
  void deleteMsg( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* msgId */) {
    return;
  }
  void queryMsg( ::com::vrv::cems::service::base::bean::cache::MsgCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* msgId */) {
    return;
  }
  void saveToken( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::TokenCache& /* tokenCache */) {
    return;
  }
  void deleteTokenByAppId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* appId */) {
    return;
  }
  void updateTokenByAppId( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const  ::com::vrv::cems::service::base::bean::cache::TokenCache& /* tokenCache */) {
    return;
  }
  void queryTokenByAppId( ::com::vrv::cems::service::base::bean::cache::TokenCache& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* appId */) {
    return;
  }
  void saveSession( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* sId */, const std::map<std::string, std::string> & /* hashMap */) {
    return;
  }
  void saveSessionByDetail( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* sId */, const std::string& /* key */, const std::string& /* value */) {
    return;
  }
  void deleteSession( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* sId */) {
    return;
  }
  void deleteSessionByDetail( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* sId */, const std::string& /* key */) {
    return;
  }
  void updataSessionByDetail( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* sId */, const std::string& /* key */, const std::string& /* value */) {
    return;
  }
  void updateSession( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* sId */, const std::map<std::string, std::string> & /* hashMap */) {
    return;
  }
  void querySessionByDetail(std::string& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* sId */, const std::string& /* key */) {
    return;
  }
  void querySession(std::map<std::string, std::string> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* sId */) {
    return;
  }
  void commonHset( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void commonHmset( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const std::map<std::string, std::string> & /* hashMap */) {
    return;
  }
  void commonHsetnx( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const std::string& /* field */, const std::string& /* value */) {
    return;
  }
  void commonHdel( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const std::vector<std::string> & /* fields */) {
    return;
  }
  void commonBatchHget(std::map<std::string, std::map<std::string, std::string> > & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::vector<std::string> & /* keys */) {
    return;
  }
  void commonHgetAll(std::map<std::string, std::string> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */) {
    return;
  }
  void commonHget(std::string& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const std::string& /* field */) {
    return;
  }
  void commonHmget(std::vector<std::string> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const std::vector<std::string> & /* fields */) {
    return;
  }
  void commonHscan(std::map<std::string, std::string> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const std::string& /* cursor */, const std::string& /* match */, const std::string& /* count */) {
    return;
  }
  void commonHvals(std::vector<std::string> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */) {
    return;
  }
  bool commonHexists(const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const std::string& /* field */) {
    bool _return = false;
    return _return;
  }
  int64_t commonHlen(const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */) {
    int64_t _return = 0;
    return _return;
  }
  void commonZadd( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const std::map<std::string, double> & /* hashMap */, const std::string& /* options */) {
    return;
  }
  void commonZrem( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const std::vector<std::string> & /* members */) {
    return;
  }
  void commonZremrangeByScore( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const double /* min */, const double /* max */) {
    return;
  }
  void commonZremrangeByRank( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const int64_t /* min */, const int64_t /* max */) {
    return;
  }
  void commonZremrangeByLex( ::com::vrv::cems::service::base::bean::cache::Result& /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const std::string& /* min */, const std::string& /* max */) {
    return;
  }
  int64_t commonZcard(const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */) {
    int64_t _return = 0;
    return _return;
  }
  double commonZscore(const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const std::string& /* member */) {
    double _return = (double)0;
    return _return;
  }
  int64_t commonZrank(const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const std::string& /* member */, const std::string& /* sortType */) {
    int64_t _return = 0;
    return _return;
  }
  void commonPageZrangeByScore(std::set<std::string> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const double /* min */, const double /* max */, const std::string& /* sortType */, const int32_t /* offset */, const int32_t /* count */) {
    return;
  }
  void commonPageZrangeByScoreWithScores(std::map<std::string, std::string> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const double /* min */, const double /* max */, const std::string& /* sortType */, const int32_t /* offset */, const int32_t /* count */) {
    return;
  }
  void commonZrangeByScore(std::map<std::string, std::string> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const double /* min */, const double /* max */, const std::string& /* sortType */) {
    return;
  }
  void commonZrangeByScoreWithScores(std::set<std::string> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const double /* min */, const double /* max */, const std::string& /* sortType */) {
    return;
  }
  void commonZrange(std::set<std::string> & /* _return */, const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const int64_t /* min */, const int64_t /* max */, const std::string& /* sortType */) {
    return;
  }
  double commonZincrby(const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const double /* sorce */, const std::string& /* member */) {
    double _return = (double)0;
    return _return;
  }
  int64_t commonZcount(const std::string& /* maxCode */, const std::string& /* minCode */, const std::string& /* key */, const double /* min */, const double /* max */) {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _CacheService_getDataTS_args__isset {
  _CacheService_getDataTS_args__isset() : maxCode(false), minCode(false), checkCode(false), isZip(false), data(false), isEncrypt(false), key(false), flag(false) {}
  bool maxCode;
  bool minCode;
  bool checkCode;
  bool isZip;
  bool data;
  bool isEncrypt;
  bool key;
  bool flag;
} _CacheService_getDataTS_args__isset;

class CacheService_getDataTS_args {
 public:

  CacheService_getDataTS_args() : maxCode(), minCode(), checkCode(), isZip(0), data(), isEncrypt(0), key(), flag(0) {
  }

  virtual ~CacheService_getDataTS_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string checkCode;
  bool isZip;
  std::string data;
  bool isEncrypt;
  std::string key;
  int32_t flag;

  _CacheService_getDataTS_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_checkCode(const std::string& val) {
    checkCode = val;
  }

  void __set_isZip(const bool val) {
    isZip = val;
  }

  void __set_data(const std::string& val) {
    data = val;
  }

  void __set_isEncrypt(const bool val) {
    isEncrypt = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_flag(const int32_t val) {
    flag = val;
  }

  bool operator == (const CacheService_getDataTS_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(checkCode == rhs.checkCode))
      return false;
    if (!(isZip == rhs.isZip))
      return false;
    if (!(data == rhs.data))
      return false;
    if (!(isEncrypt == rhs.isEncrypt))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(flag == rhs.flag))
      return false;
    return true;
  }
  bool operator != (const CacheService_getDataTS_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_getDataTS_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_getDataTS_pargs {
 public:


  virtual ~CacheService_getDataTS_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* checkCode;
  const bool* isZip;
  const std::string* data;
  const bool* isEncrypt;
  const std::string* key;
  const int32_t* flag;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_getDataTS_result__isset {
  _CacheService_getDataTS_result__isset() : success(false) {}
  bool success;
} _CacheService_getDataTS_result__isset;

class CacheService_getDataTS_result {
 public:

  CacheService_getDataTS_result() : success() {
  }

  virtual ~CacheService_getDataTS_result() throw() {}

  std::string success;

  _CacheService_getDataTS_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const CacheService_getDataTS_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_getDataTS_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_getDataTS_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_getDataTS_presult__isset {
  _CacheService_getDataTS_presult__isset() : success(false) {}
  bool success;
} _CacheService_getDataTS_presult__isset;

class CacheService_getDataTS_presult {
 public:


  virtual ~CacheService_getDataTS_presult() throw() {}

  std::string* success;

  _CacheService_getDataTS_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_isExist_args__isset {
  _CacheService_isExist_args__isset() : maxCode(false), minCode(false), prefix(false), key(false) {}
  bool maxCode;
  bool minCode;
  bool prefix;
  bool key;
} _CacheService_isExist_args__isset;

class CacheService_isExist_args {
 public:

  CacheService_isExist_args() : maxCode(), minCode(), prefix(), key() {
  }

  virtual ~CacheService_isExist_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string prefix;
  std::string key;

  _CacheService_isExist_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_prefix(const std::string& val) {
    prefix = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const CacheService_isExist_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(prefix == rhs.prefix))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const CacheService_isExist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_isExist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_isExist_pargs {
 public:


  virtual ~CacheService_isExist_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* prefix;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_isExist_result__isset {
  _CacheService_isExist_result__isset() : success(false) {}
  bool success;
} _CacheService_isExist_result__isset;

class CacheService_isExist_result {
 public:

  CacheService_isExist_result() {
  }

  virtual ~CacheService_isExist_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_isExist_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_isExist_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_isExist_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_isExist_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_isExist_presult__isset {
  _CacheService_isExist_presult__isset() : success(false) {}
  bool success;
} _CacheService_isExist_presult__isset;

class CacheService_isExist_presult {
 public:


  virtual ~CacheService_isExist_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_isExist_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_setExpireTimeByString_args__isset {
  _CacheService_setExpireTimeByString_args__isset() : maxCode(false), minCode(false), key(false), expireTime(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool expireTime;
} _CacheService_setExpireTimeByString_args__isset;

class CacheService_setExpireTimeByString_args {
 public:

  CacheService_setExpireTimeByString_args() : maxCode(), minCode(), key(), expireTime(0) {
  }

  virtual ~CacheService_setExpireTimeByString_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  int32_t expireTime;

  _CacheService_setExpireTimeByString_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_expireTime(const int32_t val) {
    expireTime = val;
  }

  bool operator == (const CacheService_setExpireTimeByString_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(expireTime == rhs.expireTime))
      return false;
    return true;
  }
  bool operator != (const CacheService_setExpireTimeByString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_setExpireTimeByString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_setExpireTimeByString_pargs {
 public:


  virtual ~CacheService_setExpireTimeByString_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const int32_t* expireTime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_setExpireTimeByString_result__isset {
  _CacheService_setExpireTimeByString_result__isset() : success(false) {}
  bool success;
} _CacheService_setExpireTimeByString_result__isset;

class CacheService_setExpireTimeByString_result {
 public:

  CacheService_setExpireTimeByString_result() {
  }

  virtual ~CacheService_setExpireTimeByString_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_setExpireTimeByString_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_setExpireTimeByString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_setExpireTimeByString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_setExpireTimeByString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_setExpireTimeByString_presult__isset {
  _CacheService_setExpireTimeByString_presult__isset() : success(false) {}
  bool success;
} _CacheService_setExpireTimeByString_presult__isset;

class CacheService_setExpireTimeByString_presult {
 public:


  virtual ~CacheService_setExpireTimeByString_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_setExpireTimeByString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_setExpireTimeByBinary_args__isset {
  _CacheService_setExpireTimeByBinary_args__isset() : maxCode(false), minCode(false), key(false), expireTime(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool expireTime;
} _CacheService_setExpireTimeByBinary_args__isset;

class CacheService_setExpireTimeByBinary_args {
 public:

  CacheService_setExpireTimeByBinary_args() : maxCode(), minCode(), key(), expireTime(0) {
  }

  virtual ~CacheService_setExpireTimeByBinary_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  int32_t expireTime;

  _CacheService_setExpireTimeByBinary_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_expireTime(const int32_t val) {
    expireTime = val;
  }

  bool operator == (const CacheService_setExpireTimeByBinary_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(expireTime == rhs.expireTime))
      return false;
    return true;
  }
  bool operator != (const CacheService_setExpireTimeByBinary_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_setExpireTimeByBinary_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_setExpireTimeByBinary_pargs {
 public:


  virtual ~CacheService_setExpireTimeByBinary_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const int32_t* expireTime;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_setExpireTimeByBinary_result__isset {
  _CacheService_setExpireTimeByBinary_result__isset() : success(false) {}
  bool success;
} _CacheService_setExpireTimeByBinary_result__isset;

class CacheService_setExpireTimeByBinary_result {
 public:

  CacheService_setExpireTimeByBinary_result() {
  }

  virtual ~CacheService_setExpireTimeByBinary_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_setExpireTimeByBinary_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_setExpireTimeByBinary_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_setExpireTimeByBinary_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_setExpireTimeByBinary_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_setExpireTimeByBinary_presult__isset {
  _CacheService_setExpireTimeByBinary_presult__isset() : success(false) {}
  bool success;
} _CacheService_setExpireTimeByBinary_presult__isset;

class CacheService_setExpireTimeByBinary_presult {
 public:


  virtual ~CacheService_setExpireTimeByBinary_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_setExpireTimeByBinary_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_batchDel_args__isset {
  _CacheService_batchDel_args__isset() : maxCode(false), minCode(false), keyList(false) {}
  bool maxCode;
  bool minCode;
  bool keyList;
} _CacheService_batchDel_args__isset;

class CacheService_batchDel_args {
 public:

  CacheService_batchDel_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_batchDel_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::vector<std::string>  keyList;

  _CacheService_batchDel_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_keyList(const std::vector<std::string> & val) {
    keyList = val;
  }

  bool operator == (const CacheService_batchDel_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(keyList == rhs.keyList))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchDel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchDel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_batchDel_pargs {
 public:


  virtual ~CacheService_batchDel_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::vector<std::string> * keyList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchDel_result__isset {
  _CacheService_batchDel_result__isset() : success(false) {}
  bool success;
} _CacheService_batchDel_result__isset;

class CacheService_batchDel_result {
 public:

  CacheService_batchDel_result() {
  }

  virtual ~CacheService_batchDel_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_batchDel_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_batchDel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchDel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchDel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchDel_presult__isset {
  _CacheService_batchDel_presult__isset() : success(false) {}
  bool success;
} _CacheService_batchDel_presult__isset;

class CacheService_batchDel_presult {
 public:


  virtual ~CacheService_batchDel_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_batchDel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveDevice_args__isset {
  _CacheService_saveDevice_args__isset() : maxCode(false), minCode(false), deviceCache(false) {}
  bool maxCode;
  bool minCode;
  bool deviceCache;
} _CacheService_saveDevice_args__isset;

class CacheService_saveDevice_args {
 public:

  CacheService_saveDevice_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_saveDevice_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::DeviceCache deviceCache;

  _CacheService_saveDevice_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_deviceCache(const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& val) {
    deviceCache = val;
  }

  bool operator == (const CacheService_saveDevice_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(deviceCache == rhs.deviceCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveDevice_pargs {
 public:


  virtual ~CacheService_saveDevice_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::DeviceCache* deviceCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveDevice_result__isset {
  _CacheService_saveDevice_result__isset() : success(false) {}
  bool success;
} _CacheService_saveDevice_result__isset;

class CacheService_saveDevice_result {
 public:

  CacheService_saveDevice_result() {
  }

  virtual ~CacheService_saveDevice_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveDevice_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveDevice_presult__isset {
  _CacheService_saveDevice_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveDevice_presult__isset;

class CacheService_saveDevice_presult {
 public:


  virtual ~CacheService_saveDevice_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateDevice_args__isset {
  _CacheService_updateDevice_args__isset() : maxCode(false), minCode(false), deviceCache(false) {}
  bool maxCode;
  bool minCode;
  bool deviceCache;
} _CacheService_updateDevice_args__isset;

class CacheService_updateDevice_args {
 public:

  CacheService_updateDevice_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_updateDevice_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::DeviceCache deviceCache;

  _CacheService_updateDevice_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_deviceCache(const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& val) {
    deviceCache = val;
  }

  bool operator == (const CacheService_updateDevice_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(deviceCache == rhs.deviceCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateDevice_pargs {
 public:


  virtual ~CacheService_updateDevice_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::DeviceCache* deviceCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDevice_result__isset {
  _CacheService_updateDevice_result__isset() : success(false) {}
  bool success;
} _CacheService_updateDevice_result__isset;

class CacheService_updateDevice_result {
 public:

  CacheService_updateDevice_result() {
  }

  virtual ~CacheService_updateDevice_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateDevice_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDevice_presult__isset {
  _CacheService_updateDevice_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateDevice_presult__isset;

class CacheService_updateDevice_presult {
 public:


  virtual ~CacheService_updateDevice_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateDeviceByField_args__isset {
  _CacheService_updateDeviceByField_args__isset() : maxCode(false), minCode(false), devOnlyId(false), fieldValueMap(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
  bool fieldValueMap;
} _CacheService_updateDeviceByField_args__isset;

class CacheService_updateDeviceByField_args {
 public:

  CacheService_updateDeviceByField_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_updateDeviceByField_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;
  std::map<std::string, std::string>  fieldValueMap;

  _CacheService_updateDeviceByField_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  void __set_fieldValueMap(const std::map<std::string, std::string> & val) {
    fieldValueMap = val;
  }

  bool operator == (const CacheService_updateDeviceByField_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    if (!(fieldValueMap == rhs.fieldValueMap))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDeviceByField_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDeviceByField_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateDeviceByField_pargs {
 public:


  virtual ~CacheService_updateDeviceByField_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;
  const std::map<std::string, std::string> * fieldValueMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDeviceByField_result__isset {
  _CacheService_updateDeviceByField_result__isset() : success(false) {}
  bool success;
} _CacheService_updateDeviceByField_result__isset;

class CacheService_updateDeviceByField_result {
 public:

  CacheService_updateDeviceByField_result() {
  }

  virtual ~CacheService_updateDeviceByField_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateDeviceByField_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateDeviceByField_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDeviceByField_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDeviceByField_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDeviceByField_presult__isset {
  _CacheService_updateDeviceByField_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateDeviceByField_presult__isset;

class CacheService_updateDeviceByField_presult {
 public:


  virtual ~CacheService_updateDeviceByField_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateDeviceByField_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryDevice_args__isset {
  _CacheService_queryDevice_args__isset() : maxCode(false), minCode(false), deviceCache(false) {}
  bool maxCode;
  bool minCode;
  bool deviceCache;
} _CacheService_queryDevice_args__isset;

class CacheService_queryDevice_args {
 public:

  CacheService_queryDevice_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_queryDevice_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::DeviceCache deviceCache;

  _CacheService_queryDevice_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_deviceCache(const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& val) {
    deviceCache = val;
  }

  bool operator == (const CacheService_queryDevice_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(deviceCache == rhs.deviceCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryDevice_pargs {
 public:


  virtual ~CacheService_queryDevice_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::DeviceCache* deviceCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDevice_result__isset {
  _CacheService_queryDevice_result__isset() : success(false) {}
  bool success;
} _CacheService_queryDevice_result__isset;

class CacheService_queryDevice_result {
 public:

  CacheService_queryDevice_result() {
  }

  virtual ~CacheService_queryDevice_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DeviceCache success;

  _CacheService_queryDevice_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& val) {
    success = val;
  }

  bool operator == (const CacheService_queryDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDevice_presult__isset {
  _CacheService_queryDevice_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryDevice_presult__isset;

class CacheService_queryDevice_presult {
 public:


  virtual ~CacheService_queryDevice_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DeviceCache* success;

  _CacheService_queryDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryDeviceByDevOnlyId_args__isset {
  _CacheService_queryDeviceByDevOnlyId_args__isset() : maxCode(false), minCode(false), devOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
} _CacheService_queryDeviceByDevOnlyId_args__isset;

class CacheService_queryDeviceByDevOnlyId_args {
 public:

  CacheService_queryDeviceByDevOnlyId_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_queryDeviceByDevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;

  _CacheService_queryDeviceByDevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  bool operator == (const CacheService_queryDeviceByDevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceByDevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceByDevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryDeviceByDevOnlyId_pargs {
 public:


  virtual ~CacheService_queryDeviceByDevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceByDevOnlyId_result__isset {
  _CacheService_queryDeviceByDevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceByDevOnlyId_result__isset;

class CacheService_queryDeviceByDevOnlyId_result {
 public:

  CacheService_queryDeviceByDevOnlyId_result() {
  }

  virtual ~CacheService_queryDeviceByDevOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DeviceCache success;

  _CacheService_queryDeviceByDevOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& val) {
    success = val;
  }

  bool operator == (const CacheService_queryDeviceByDevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceByDevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceByDevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceByDevOnlyId_presult__isset {
  _CacheService_queryDeviceByDevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceByDevOnlyId_presult__isset;

class CacheService_queryDeviceByDevOnlyId_presult {
 public:


  virtual ~CacheService_queryDeviceByDevOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DeviceCache* success;

  _CacheService_queryDeviceByDevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryDeviceByIp_args__isset {
  _CacheService_queryDeviceByIp_args__isset() : maxCode(false), minCode(false), ip(false) {}
  bool maxCode;
  bool minCode;
  bool ip;
} _CacheService_queryDeviceByIp_args__isset;

class CacheService_queryDeviceByIp_args {
 public:

  CacheService_queryDeviceByIp_args() : maxCode(), minCode(), ip() {
  }

  virtual ~CacheService_queryDeviceByIp_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string ip;

  _CacheService_queryDeviceByIp_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  bool operator == (const CacheService_queryDeviceByIp_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceByIp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceByIp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryDeviceByIp_pargs {
 public:


  virtual ~CacheService_queryDeviceByIp_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceByIp_result__isset {
  _CacheService_queryDeviceByIp_result__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceByIp_result__isset;

class CacheService_queryDeviceByIp_result {
 public:

  CacheService_queryDeviceByIp_result() {
  }

  virtual ~CacheService_queryDeviceByIp_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DeviceCache success;

  _CacheService_queryDeviceByIp_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& val) {
    success = val;
  }

  bool operator == (const CacheService_queryDeviceByIp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceByIp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceByIp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceByIp_presult__isset {
  _CacheService_queryDeviceByIp_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceByIp_presult__isset;

class CacheService_queryDeviceByIp_presult {
 public:


  virtual ~CacheService_queryDeviceByIp_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DeviceCache* success;

  _CacheService_queryDeviceByIp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteDevice_args__isset {
  _CacheService_deleteDevice_args__isset() : maxCode(false), minCode(false), deviceCache(false) {}
  bool maxCode;
  bool minCode;
  bool deviceCache;
} _CacheService_deleteDevice_args__isset;

class CacheService_deleteDevice_args {
 public:

  CacheService_deleteDevice_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_deleteDevice_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::DeviceCache deviceCache;

  _CacheService_deleteDevice_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_deviceCache(const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& val) {
    deviceCache = val;
  }

  bool operator == (const CacheService_deleteDevice_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(deviceCache == rhs.deviceCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteDevice_pargs {
 public:


  virtual ~CacheService_deleteDevice_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::DeviceCache* deviceCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDevice_result__isset {
  _CacheService_deleteDevice_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteDevice_result__isset;

class CacheService_deleteDevice_result {
 public:

  CacheService_deleteDevice_result() {
  }

  virtual ~CacheService_deleteDevice_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteDevice_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDevice_presult__isset {
  _CacheService_deleteDevice_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteDevice_presult__isset;

class CacheService_deleteDevice_presult {
 public:


  virtual ~CacheService_deleteDevice_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteDeviceByDevOnlyId_args__isset {
  _CacheService_deleteDeviceByDevOnlyId_args__isset() : maxCode(false), minCode(false), devOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
} _CacheService_deleteDeviceByDevOnlyId_args__isset;

class CacheService_deleteDeviceByDevOnlyId_args {
 public:

  CacheService_deleteDeviceByDevOnlyId_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_deleteDeviceByDevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;

  _CacheService_deleteDeviceByDevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  bool operator == (const CacheService_deleteDeviceByDevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceByDevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceByDevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteDeviceByDevOnlyId_pargs {
 public:


  virtual ~CacheService_deleteDeviceByDevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceByDevOnlyId_result__isset {
  _CacheService_deleteDeviceByDevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceByDevOnlyId_result__isset;

class CacheService_deleteDeviceByDevOnlyId_result {
 public:

  CacheService_deleteDeviceByDevOnlyId_result() {
  }

  virtual ~CacheService_deleteDeviceByDevOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteDeviceByDevOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteDeviceByDevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceByDevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceByDevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceByDevOnlyId_presult__isset {
  _CacheService_deleteDeviceByDevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceByDevOnlyId_presult__isset;

class CacheService_deleteDeviceByDevOnlyId_presult {
 public:


  virtual ~CacheService_deleteDeviceByDevOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteDeviceByDevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteDeviceByIp_args__isset {
  _CacheService_deleteDeviceByIp_args__isset() : maxCode(false), minCode(false), ip(false) {}
  bool maxCode;
  bool minCode;
  bool ip;
} _CacheService_deleteDeviceByIp_args__isset;

class CacheService_deleteDeviceByIp_args {
 public:

  CacheService_deleteDeviceByIp_args() : maxCode(), minCode(), ip() {
  }

  virtual ~CacheService_deleteDeviceByIp_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string ip;

  _CacheService_deleteDeviceByIp_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  bool operator == (const CacheService_deleteDeviceByIp_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceByIp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceByIp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteDeviceByIp_pargs {
 public:


  virtual ~CacheService_deleteDeviceByIp_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceByIp_result__isset {
  _CacheService_deleteDeviceByIp_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceByIp_result__isset;

class CacheService_deleteDeviceByIp_result {
 public:

  CacheService_deleteDeviceByIp_result() {
  }

  virtual ~CacheService_deleteDeviceByIp_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteDeviceByIp_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteDeviceByIp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceByIp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceByIp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceByIp_presult__isset {
  _CacheService_deleteDeviceByIp_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceByIp_presult__isset;

class CacheService_deleteDeviceByIp_presult {
 public:


  virtual ~CacheService_deleteDeviceByIp_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteDeviceByIp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_batchSaveDevice_args__isset {
  _CacheService_batchSaveDevice_args__isset() : maxCode(false), minCode(false), deviceCacheList(false) {}
  bool maxCode;
  bool minCode;
  bool deviceCacheList;
} _CacheService_batchSaveDevice_args__isset;

class CacheService_batchSaveDevice_args {
 public:

  CacheService_batchSaveDevice_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_batchSaveDevice_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache>  deviceCacheList;

  _CacheService_batchSaveDevice_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_deviceCacheList(const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & val) {
    deviceCacheList = val;
  }

  bool operator == (const CacheService_batchSaveDevice_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(deviceCacheList == rhs.deviceCacheList))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchSaveDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchSaveDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_batchSaveDevice_pargs {
 public:


  virtual ~CacheService_batchSaveDevice_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> * deviceCacheList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchSaveDevice_result__isset {
  _CacheService_batchSaveDevice_result__isset() : success(false) {}
  bool success;
} _CacheService_batchSaveDevice_result__isset;

class CacheService_batchSaveDevice_result {
 public:

  CacheService_batchSaveDevice_result() {
  }

  virtual ~CacheService_batchSaveDevice_result() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::Result>  success;

  _CacheService_batchSaveDevice_result__isset __isset;

  void __set_success(const std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & val) {
    success = val;
  }

  bool operator == (const CacheService_batchSaveDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchSaveDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchSaveDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchSaveDevice_presult__isset {
  _CacheService_batchSaveDevice_presult__isset() : success(false) {}
  bool success;
} _CacheService_batchSaveDevice_presult__isset;

class CacheService_batchSaveDevice_presult {
 public:


  virtual ~CacheService_batchSaveDevice_presult() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::Result> * success;

  _CacheService_batchSaveDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_batchUpdateDevice_args__isset {
  _CacheService_batchUpdateDevice_args__isset() : maxCode(false), minCode(false), deviceCacheList(false) {}
  bool maxCode;
  bool minCode;
  bool deviceCacheList;
} _CacheService_batchUpdateDevice_args__isset;

class CacheService_batchUpdateDevice_args {
 public:

  CacheService_batchUpdateDevice_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_batchUpdateDevice_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache>  deviceCacheList;

  _CacheService_batchUpdateDevice_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_deviceCacheList(const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & val) {
    deviceCacheList = val;
  }

  bool operator == (const CacheService_batchUpdateDevice_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(deviceCacheList == rhs.deviceCacheList))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchUpdateDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchUpdateDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_batchUpdateDevice_pargs {
 public:


  virtual ~CacheService_batchUpdateDevice_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> * deviceCacheList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchUpdateDevice_result__isset {
  _CacheService_batchUpdateDevice_result__isset() : success(false) {}
  bool success;
} _CacheService_batchUpdateDevice_result__isset;

class CacheService_batchUpdateDevice_result {
 public:

  CacheService_batchUpdateDevice_result() {
  }

  virtual ~CacheService_batchUpdateDevice_result() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::Result>  success;

  _CacheService_batchUpdateDevice_result__isset __isset;

  void __set_success(const std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & val) {
    success = val;
  }

  bool operator == (const CacheService_batchUpdateDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchUpdateDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchUpdateDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchUpdateDevice_presult__isset {
  _CacheService_batchUpdateDevice_presult__isset() : success(false) {}
  bool success;
} _CacheService_batchUpdateDevice_presult__isset;

class CacheService_batchUpdateDevice_presult {
 public:


  virtual ~CacheService_batchUpdateDevice_presult() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::Result> * success;

  _CacheService_batchUpdateDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_batchQueryDevice_args__isset {
  _CacheService_batchQueryDevice_args__isset() : maxCode(false), minCode(false), deviceCacheList(false) {}
  bool maxCode;
  bool minCode;
  bool deviceCacheList;
} _CacheService_batchQueryDevice_args__isset;

class CacheService_batchQueryDevice_args {
 public:

  CacheService_batchQueryDevice_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_batchQueryDevice_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache>  deviceCacheList;

  _CacheService_batchQueryDevice_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_deviceCacheList(const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & val) {
    deviceCacheList = val;
  }

  bool operator == (const CacheService_batchQueryDevice_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(deviceCacheList == rhs.deviceCacheList))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchQueryDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchQueryDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_batchQueryDevice_pargs {
 public:


  virtual ~CacheService_batchQueryDevice_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> * deviceCacheList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchQueryDevice_result__isset {
  _CacheService_batchQueryDevice_result__isset() : success(false) {}
  bool success;
} _CacheService_batchQueryDevice_result__isset;

class CacheService_batchQueryDevice_result {
 public:

  CacheService_batchQueryDevice_result() {
  }

  virtual ~CacheService_batchQueryDevice_result() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache>  success;

  _CacheService_batchQueryDevice_result__isset __isset;

  void __set_success(const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & val) {
    success = val;
  }

  bool operator == (const CacheService_batchQueryDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchQueryDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchQueryDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchQueryDevice_presult__isset {
  _CacheService_batchQueryDevice_presult__isset() : success(false) {}
  bool success;
} _CacheService_batchQueryDevice_presult__isset;

class CacheService_batchQueryDevice_presult {
 public:


  virtual ~CacheService_batchQueryDevice_presult() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> * success;

  _CacheService_batchQueryDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_batchQueryDeviceByDevOnlyId_args__isset {
  _CacheService_batchQueryDeviceByDevOnlyId_args__isset() : maxCode(false), minCode(false), devOnlyIdList(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyIdList;
} _CacheService_batchQueryDeviceByDevOnlyId_args__isset;

class CacheService_batchQueryDeviceByDevOnlyId_args {
 public:

  CacheService_batchQueryDeviceByDevOnlyId_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_batchQueryDeviceByDevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::vector<std::string>  devOnlyIdList;

  _CacheService_batchQueryDeviceByDevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyIdList(const std::vector<std::string> & val) {
    devOnlyIdList = val;
  }

  bool operator == (const CacheService_batchQueryDeviceByDevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyIdList == rhs.devOnlyIdList))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchQueryDeviceByDevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchQueryDeviceByDevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_batchQueryDeviceByDevOnlyId_pargs {
 public:


  virtual ~CacheService_batchQueryDeviceByDevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::vector<std::string> * devOnlyIdList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchQueryDeviceByDevOnlyId_result__isset {
  _CacheService_batchQueryDeviceByDevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_batchQueryDeviceByDevOnlyId_result__isset;

class CacheService_batchQueryDeviceByDevOnlyId_result {
 public:

  CacheService_batchQueryDeviceByDevOnlyId_result() {
  }

  virtual ~CacheService_batchQueryDeviceByDevOnlyId_result() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache>  success;

  _CacheService_batchQueryDeviceByDevOnlyId_result__isset __isset;

  void __set_success(const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & val) {
    success = val;
  }

  bool operator == (const CacheService_batchQueryDeviceByDevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchQueryDeviceByDevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchQueryDeviceByDevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchQueryDeviceByDevOnlyId_presult__isset {
  _CacheService_batchQueryDeviceByDevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_batchQueryDeviceByDevOnlyId_presult__isset;

class CacheService_batchQueryDeviceByDevOnlyId_presult {
 public:


  virtual ~CacheService_batchQueryDeviceByDevOnlyId_presult() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> * success;

  _CacheService_batchQueryDeviceByDevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_batchDeleteDevice_args__isset {
  _CacheService_batchDeleteDevice_args__isset() : maxCode(false), minCode(false), deviceCacheList(false) {}
  bool maxCode;
  bool minCode;
  bool deviceCacheList;
} _CacheService_batchDeleteDevice_args__isset;

class CacheService_batchDeleteDevice_args {
 public:

  CacheService_batchDeleteDevice_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_batchDeleteDevice_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache>  deviceCacheList;

  _CacheService_batchDeleteDevice_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_deviceCacheList(const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & val) {
    deviceCacheList = val;
  }

  bool operator == (const CacheService_batchDeleteDevice_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(deviceCacheList == rhs.deviceCacheList))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchDeleteDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchDeleteDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_batchDeleteDevice_pargs {
 public:


  virtual ~CacheService_batchDeleteDevice_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> * deviceCacheList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchDeleteDevice_result__isset {
  _CacheService_batchDeleteDevice_result__isset() : success(false) {}
  bool success;
} _CacheService_batchDeleteDevice_result__isset;

class CacheService_batchDeleteDevice_result {
 public:

  CacheService_batchDeleteDevice_result() {
  }

  virtual ~CacheService_batchDeleteDevice_result() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::Result>  success;

  _CacheService_batchDeleteDevice_result__isset __isset;

  void __set_success(const std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & val) {
    success = val;
  }

  bool operator == (const CacheService_batchDeleteDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchDeleteDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchDeleteDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchDeleteDevice_presult__isset {
  _CacheService_batchDeleteDevice_presult__isset() : success(false) {}
  bool success;
} _CacheService_batchDeleteDevice_presult__isset;

class CacheService_batchDeleteDevice_presult {
 public:


  virtual ~CacheService_batchDeleteDevice_presult() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::Result> * success;

  _CacheService_batchDeleteDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_batchDeleteDeviceByDevOnlyId_args__isset {
  _CacheService_batchDeleteDeviceByDevOnlyId_args__isset() : maxCode(false), minCode(false), devOnlyIdList(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyIdList;
} _CacheService_batchDeleteDeviceByDevOnlyId_args__isset;

class CacheService_batchDeleteDeviceByDevOnlyId_args {
 public:

  CacheService_batchDeleteDeviceByDevOnlyId_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_batchDeleteDeviceByDevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::vector<std::string>  devOnlyIdList;

  _CacheService_batchDeleteDeviceByDevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyIdList(const std::vector<std::string> & val) {
    devOnlyIdList = val;
  }

  bool operator == (const CacheService_batchDeleteDeviceByDevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyIdList == rhs.devOnlyIdList))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchDeleteDeviceByDevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchDeleteDeviceByDevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_batchDeleteDeviceByDevOnlyId_pargs {
 public:


  virtual ~CacheService_batchDeleteDeviceByDevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::vector<std::string> * devOnlyIdList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchDeleteDeviceByDevOnlyId_result__isset {
  _CacheService_batchDeleteDeviceByDevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_batchDeleteDeviceByDevOnlyId_result__isset;

class CacheService_batchDeleteDeviceByDevOnlyId_result {
 public:

  CacheService_batchDeleteDeviceByDevOnlyId_result() {
  }

  virtual ~CacheService_batchDeleteDeviceByDevOnlyId_result() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::Result>  success;

  _CacheService_batchDeleteDeviceByDevOnlyId_result__isset __isset;

  void __set_success(const std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & val) {
    success = val;
  }

  bool operator == (const CacheService_batchDeleteDeviceByDevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchDeleteDeviceByDevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchDeleteDeviceByDevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchDeleteDeviceByDevOnlyId_presult__isset {
  _CacheService_batchDeleteDeviceByDevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_batchDeleteDeviceByDevOnlyId_presult__isset;

class CacheService_batchDeleteDeviceByDevOnlyId_presult {
 public:


  virtual ~CacheService_batchDeleteDeviceByDevOnlyId_presult() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::Result> * success;

  _CacheService_batchDeleteDeviceByDevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveDeviceOnline_args__isset {
  _CacheService_saveDeviceOnline_args__isset() : maxCode(false), minCode(false), deviceOnlineCache(false) {}
  bool maxCode;
  bool minCode;
  bool deviceOnlineCache;
} _CacheService_saveDeviceOnline_args__isset;

class CacheService_saveDeviceOnline_args {
 public:

  CacheService_saveDeviceOnline_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_saveDeviceOnline_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache deviceOnlineCache;

  _CacheService_saveDeviceOnline_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_deviceOnlineCache(const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& val) {
    deviceOnlineCache = val;
  }

  bool operator == (const CacheService_saveDeviceOnline_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(deviceOnlineCache == rhs.deviceOnlineCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveDeviceOnline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveDeviceOnline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveDeviceOnline_pargs {
 public:


  virtual ~CacheService_saveDeviceOnline_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache* deviceOnlineCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveDeviceOnline_result__isset {
  _CacheService_saveDeviceOnline_result__isset() : success(false) {}
  bool success;
} _CacheService_saveDeviceOnline_result__isset;

class CacheService_saveDeviceOnline_result {
 public:

  CacheService_saveDeviceOnline_result() {
  }

  virtual ~CacheService_saveDeviceOnline_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveDeviceOnline_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveDeviceOnline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveDeviceOnline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveDeviceOnline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveDeviceOnline_presult__isset {
  _CacheService_saveDeviceOnline_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveDeviceOnline_presult__isset;

class CacheService_saveDeviceOnline_presult {
 public:


  virtual ~CacheService_saveDeviceOnline_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveDeviceOnline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateDeviceOnline_args__isset {
  _CacheService_updateDeviceOnline_args__isset() : maxCode(false), minCode(false), deviceOnlineCache(false) {}
  bool maxCode;
  bool minCode;
  bool deviceOnlineCache;
} _CacheService_updateDeviceOnline_args__isset;

class CacheService_updateDeviceOnline_args {
 public:

  CacheService_updateDeviceOnline_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_updateDeviceOnline_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache deviceOnlineCache;

  _CacheService_updateDeviceOnline_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_deviceOnlineCache(const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& val) {
    deviceOnlineCache = val;
  }

  bool operator == (const CacheService_updateDeviceOnline_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(deviceOnlineCache == rhs.deviceOnlineCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDeviceOnline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDeviceOnline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateDeviceOnline_pargs {
 public:


  virtual ~CacheService_updateDeviceOnline_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache* deviceOnlineCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDeviceOnline_result__isset {
  _CacheService_updateDeviceOnline_result__isset() : success(false) {}
  bool success;
} _CacheService_updateDeviceOnline_result__isset;

class CacheService_updateDeviceOnline_result {
 public:

  CacheService_updateDeviceOnline_result() {
  }

  virtual ~CacheService_updateDeviceOnline_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateDeviceOnline_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateDeviceOnline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDeviceOnline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDeviceOnline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDeviceOnline_presult__isset {
  _CacheService_updateDeviceOnline_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateDeviceOnline_presult__isset;

class CacheService_updateDeviceOnline_presult {
 public:


  virtual ~CacheService_updateDeviceOnline_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateDeviceOnline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateDeviceOnlineByField_args__isset {
  _CacheService_updateDeviceOnlineByField_args__isset() : maxCode(false), minCode(false), devOnlyId(false), fieldValueMap(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
  bool fieldValueMap;
} _CacheService_updateDeviceOnlineByField_args__isset;

class CacheService_updateDeviceOnlineByField_args {
 public:

  CacheService_updateDeviceOnlineByField_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_updateDeviceOnlineByField_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;
  std::map<std::string, std::string>  fieldValueMap;

  _CacheService_updateDeviceOnlineByField_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  void __set_fieldValueMap(const std::map<std::string, std::string> & val) {
    fieldValueMap = val;
  }

  bool operator == (const CacheService_updateDeviceOnlineByField_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    if (!(fieldValueMap == rhs.fieldValueMap))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDeviceOnlineByField_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDeviceOnlineByField_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateDeviceOnlineByField_pargs {
 public:


  virtual ~CacheService_updateDeviceOnlineByField_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;
  const std::map<std::string, std::string> * fieldValueMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDeviceOnlineByField_result__isset {
  _CacheService_updateDeviceOnlineByField_result__isset() : success(false) {}
  bool success;
} _CacheService_updateDeviceOnlineByField_result__isset;

class CacheService_updateDeviceOnlineByField_result {
 public:

  CacheService_updateDeviceOnlineByField_result() {
  }

  virtual ~CacheService_updateDeviceOnlineByField_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateDeviceOnlineByField_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateDeviceOnlineByField_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDeviceOnlineByField_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDeviceOnlineByField_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDeviceOnlineByField_presult__isset {
  _CacheService_updateDeviceOnlineByField_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateDeviceOnlineByField_presult__isset;

class CacheService_updateDeviceOnlineByField_presult {
 public:


  virtual ~CacheService_updateDeviceOnlineByField_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateDeviceOnlineByField_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryDeviceOnline_args__isset {
  _CacheService_queryDeviceOnline_args__isset() : maxCode(false), minCode(false), deviceOnlineCache(false) {}
  bool maxCode;
  bool minCode;
  bool deviceOnlineCache;
} _CacheService_queryDeviceOnline_args__isset;

class CacheService_queryDeviceOnline_args {
 public:

  CacheService_queryDeviceOnline_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_queryDeviceOnline_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache deviceOnlineCache;

  _CacheService_queryDeviceOnline_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_deviceOnlineCache(const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& val) {
    deviceOnlineCache = val;
  }

  bool operator == (const CacheService_queryDeviceOnline_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(deviceOnlineCache == rhs.deviceOnlineCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceOnline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceOnline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryDeviceOnline_pargs {
 public:


  virtual ~CacheService_queryDeviceOnline_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache* deviceOnlineCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceOnline_result__isset {
  _CacheService_queryDeviceOnline_result__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceOnline_result__isset;

class CacheService_queryDeviceOnline_result {
 public:

  CacheService_queryDeviceOnline_result() {
  }

  virtual ~CacheService_queryDeviceOnline_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache success;

  _CacheService_queryDeviceOnline_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& val) {
    success = val;
  }

  bool operator == (const CacheService_queryDeviceOnline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceOnline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceOnline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceOnline_presult__isset {
  _CacheService_queryDeviceOnline_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceOnline_presult__isset;

class CacheService_queryDeviceOnline_presult {
 public:


  virtual ~CacheService_queryDeviceOnline_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache* success;

  _CacheService_queryDeviceOnline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryDeviceOnlineByDevOnlyId_args__isset {
  _CacheService_queryDeviceOnlineByDevOnlyId_args__isset() : maxCode(false), minCode(false), devOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
} _CacheService_queryDeviceOnlineByDevOnlyId_args__isset;

class CacheService_queryDeviceOnlineByDevOnlyId_args {
 public:

  CacheService_queryDeviceOnlineByDevOnlyId_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_queryDeviceOnlineByDevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;

  _CacheService_queryDeviceOnlineByDevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  bool operator == (const CacheService_queryDeviceOnlineByDevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceOnlineByDevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceOnlineByDevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryDeviceOnlineByDevOnlyId_pargs {
 public:


  virtual ~CacheService_queryDeviceOnlineByDevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceOnlineByDevOnlyId_result__isset {
  _CacheService_queryDeviceOnlineByDevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceOnlineByDevOnlyId_result__isset;

class CacheService_queryDeviceOnlineByDevOnlyId_result {
 public:

  CacheService_queryDeviceOnlineByDevOnlyId_result() {
  }

  virtual ~CacheService_queryDeviceOnlineByDevOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache success;

  _CacheService_queryDeviceOnlineByDevOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& val) {
    success = val;
  }

  bool operator == (const CacheService_queryDeviceOnlineByDevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceOnlineByDevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceOnlineByDevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceOnlineByDevOnlyId_presult__isset {
  _CacheService_queryDeviceOnlineByDevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceOnlineByDevOnlyId_presult__isset;

class CacheService_queryDeviceOnlineByDevOnlyId_presult {
 public:


  virtual ~CacheService_queryDeviceOnlineByDevOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache* success;

  _CacheService_queryDeviceOnlineByDevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryDeviceOnlineByIp_args__isset {
  _CacheService_queryDeviceOnlineByIp_args__isset() : maxCode(false), minCode(false), ip(false) {}
  bool maxCode;
  bool minCode;
  bool ip;
} _CacheService_queryDeviceOnlineByIp_args__isset;

class CacheService_queryDeviceOnlineByIp_args {
 public:

  CacheService_queryDeviceOnlineByIp_args() : maxCode(), minCode(), ip() {
  }

  virtual ~CacheService_queryDeviceOnlineByIp_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string ip;

  _CacheService_queryDeviceOnlineByIp_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  bool operator == (const CacheService_queryDeviceOnlineByIp_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceOnlineByIp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceOnlineByIp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryDeviceOnlineByIp_pargs {
 public:


  virtual ~CacheService_queryDeviceOnlineByIp_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceOnlineByIp_result__isset {
  _CacheService_queryDeviceOnlineByIp_result__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceOnlineByIp_result__isset;

class CacheService_queryDeviceOnlineByIp_result {
 public:

  CacheService_queryDeviceOnlineByIp_result() {
  }

  virtual ~CacheService_queryDeviceOnlineByIp_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache success;

  _CacheService_queryDeviceOnlineByIp_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& val) {
    success = val;
  }

  bool operator == (const CacheService_queryDeviceOnlineByIp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceOnlineByIp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceOnlineByIp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceOnlineByIp_presult__isset {
  _CacheService_queryDeviceOnlineByIp_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceOnlineByIp_presult__isset;

class CacheService_queryDeviceOnlineByIp_presult {
 public:


  virtual ~CacheService_queryDeviceOnlineByIp_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache* success;

  _CacheService_queryDeviceOnlineByIp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteDeviceOnline_args__isset {
  _CacheService_deleteDeviceOnline_args__isset() : maxCode(false), minCode(false), deviceOnlineCache(false) {}
  bool maxCode;
  bool minCode;
  bool deviceOnlineCache;
} _CacheService_deleteDeviceOnline_args__isset;

class CacheService_deleteDeviceOnline_args {
 public:

  CacheService_deleteDeviceOnline_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_deleteDeviceOnline_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache deviceOnlineCache;

  _CacheService_deleteDeviceOnline_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_deviceOnlineCache(const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& val) {
    deviceOnlineCache = val;
  }

  bool operator == (const CacheService_deleteDeviceOnline_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(deviceOnlineCache == rhs.deviceOnlineCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceOnline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceOnline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteDeviceOnline_pargs {
 public:


  virtual ~CacheService_deleteDeviceOnline_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache* deviceOnlineCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceOnline_result__isset {
  _CacheService_deleteDeviceOnline_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceOnline_result__isset;

class CacheService_deleteDeviceOnline_result {
 public:

  CacheService_deleteDeviceOnline_result() {
  }

  virtual ~CacheService_deleteDeviceOnline_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteDeviceOnline_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteDeviceOnline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceOnline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceOnline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceOnline_presult__isset {
  _CacheService_deleteDeviceOnline_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceOnline_presult__isset;

class CacheService_deleteDeviceOnline_presult {
 public:


  virtual ~CacheService_deleteDeviceOnline_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteDeviceOnline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteDeviceOnlineByDevOnlyId_args__isset {
  _CacheService_deleteDeviceOnlineByDevOnlyId_args__isset() : maxCode(false), minCode(false), devOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
} _CacheService_deleteDeviceOnlineByDevOnlyId_args__isset;

class CacheService_deleteDeviceOnlineByDevOnlyId_args {
 public:

  CacheService_deleteDeviceOnlineByDevOnlyId_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_deleteDeviceOnlineByDevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;

  _CacheService_deleteDeviceOnlineByDevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  bool operator == (const CacheService_deleteDeviceOnlineByDevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceOnlineByDevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceOnlineByDevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteDeviceOnlineByDevOnlyId_pargs {
 public:


  virtual ~CacheService_deleteDeviceOnlineByDevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceOnlineByDevOnlyId_result__isset {
  _CacheService_deleteDeviceOnlineByDevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceOnlineByDevOnlyId_result__isset;

class CacheService_deleteDeviceOnlineByDevOnlyId_result {
 public:

  CacheService_deleteDeviceOnlineByDevOnlyId_result() {
  }

  virtual ~CacheService_deleteDeviceOnlineByDevOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteDeviceOnlineByDevOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteDeviceOnlineByDevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceOnlineByDevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceOnlineByDevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceOnlineByDevOnlyId_presult__isset {
  _CacheService_deleteDeviceOnlineByDevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceOnlineByDevOnlyId_presult__isset;

class CacheService_deleteDeviceOnlineByDevOnlyId_presult {
 public:


  virtual ~CacheService_deleteDeviceOnlineByDevOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteDeviceOnlineByDevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteDeviceOnlineByIp_args__isset {
  _CacheService_deleteDeviceOnlineByIp_args__isset() : maxCode(false), minCode(false), ip(false) {}
  bool maxCode;
  bool minCode;
  bool ip;
} _CacheService_deleteDeviceOnlineByIp_args__isset;

class CacheService_deleteDeviceOnlineByIp_args {
 public:

  CacheService_deleteDeviceOnlineByIp_args() : maxCode(), minCode(), ip() {
  }

  virtual ~CacheService_deleteDeviceOnlineByIp_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string ip;

  _CacheService_deleteDeviceOnlineByIp_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  bool operator == (const CacheService_deleteDeviceOnlineByIp_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceOnlineByIp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceOnlineByIp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteDeviceOnlineByIp_pargs {
 public:


  virtual ~CacheService_deleteDeviceOnlineByIp_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceOnlineByIp_result__isset {
  _CacheService_deleteDeviceOnlineByIp_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceOnlineByIp_result__isset;

class CacheService_deleteDeviceOnlineByIp_result {
 public:

  CacheService_deleteDeviceOnlineByIp_result() {
  }

  virtual ~CacheService_deleteDeviceOnlineByIp_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteDeviceOnlineByIp_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteDeviceOnlineByIp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceOnlineByIp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceOnlineByIp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceOnlineByIp_presult__isset {
  _CacheService_deleteDeviceOnlineByIp_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceOnlineByIp_presult__isset;

class CacheService_deleteDeviceOnlineByIp_presult {
 public:


  virtual ~CacheService_deleteDeviceOnlineByIp_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteDeviceOnlineByIp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryAllDeviceOnlineCache_args__isset {
  _CacheService_queryAllDeviceOnlineCache_args__isset() : maxCode(false), minCode(false) {}
  bool maxCode;
  bool minCode;
} _CacheService_queryAllDeviceOnlineCache_args__isset;

class CacheService_queryAllDeviceOnlineCache_args {
 public:

  CacheService_queryAllDeviceOnlineCache_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_queryAllDeviceOnlineCache_args() throw() {}

  std::string maxCode;
  std::string minCode;

  _CacheService_queryAllDeviceOnlineCache_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  bool operator == (const CacheService_queryAllDeviceOnlineCache_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryAllDeviceOnlineCache_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryAllDeviceOnlineCache_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryAllDeviceOnlineCache_pargs {
 public:


  virtual ~CacheService_queryAllDeviceOnlineCache_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryAllDeviceOnlineCache_result__isset {
  _CacheService_queryAllDeviceOnlineCache_result__isset() : success(false) {}
  bool success;
} _CacheService_queryAllDeviceOnlineCache_result__isset;

class CacheService_queryAllDeviceOnlineCache_result {
 public:

  CacheService_queryAllDeviceOnlineCache_result() {
  }

  virtual ~CacheService_queryAllDeviceOnlineCache_result() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache>  success;

  _CacheService_queryAllDeviceOnlineCache_result__isset __isset;

  void __set_success(const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache> & val) {
    success = val;
  }

  bool operator == (const CacheService_queryAllDeviceOnlineCache_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryAllDeviceOnlineCache_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryAllDeviceOnlineCache_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryAllDeviceOnlineCache_presult__isset {
  _CacheService_queryAllDeviceOnlineCache_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryAllDeviceOnlineCache_presult__isset;

class CacheService_queryAllDeviceOnlineCache_presult {
 public:


  virtual ~CacheService_queryAllDeviceOnlineCache_presult() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache> * success;

  _CacheService_queryAllDeviceOnlineCache_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryOnlineDevOnlyIdsByUserOnlyId_args__isset {
  _CacheService_queryOnlineDevOnlyIdsByUserOnlyId_args__isset() : maxCode(false), minCode(false), userOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool userOnlyId;
} _CacheService_queryOnlineDevOnlyIdsByUserOnlyId_args__isset;

class CacheService_queryOnlineDevOnlyIdsByUserOnlyId_args {
 public:

  CacheService_queryOnlineDevOnlyIdsByUserOnlyId_args() : maxCode(), minCode(), userOnlyId() {
  }

  virtual ~CacheService_queryOnlineDevOnlyIdsByUserOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string userOnlyId;

  _CacheService_queryOnlineDevOnlyIdsByUserOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userOnlyId(const std::string& val) {
    userOnlyId = val;
  }

  bool operator == (const CacheService_queryOnlineDevOnlyIdsByUserOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userOnlyId == rhs.userOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryOnlineDevOnlyIdsByUserOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryOnlineDevOnlyIdsByUserOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryOnlineDevOnlyIdsByUserOnlyId_pargs {
 public:


  virtual ~CacheService_queryOnlineDevOnlyIdsByUserOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* userOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryOnlineDevOnlyIdsByUserOnlyId_result__isset {
  _CacheService_queryOnlineDevOnlyIdsByUserOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_queryOnlineDevOnlyIdsByUserOnlyId_result__isset;

class CacheService_queryOnlineDevOnlyIdsByUserOnlyId_result {
 public:

  CacheService_queryOnlineDevOnlyIdsByUserOnlyId_result() {
  }

  virtual ~CacheService_queryOnlineDevOnlyIdsByUserOnlyId_result() throw() {}

  std::vector<std::string>  success;

  _CacheService_queryOnlineDevOnlyIdsByUserOnlyId_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const CacheService_queryOnlineDevOnlyIdsByUserOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryOnlineDevOnlyIdsByUserOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryOnlineDevOnlyIdsByUserOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryOnlineDevOnlyIdsByUserOnlyId_presult__isset {
  _CacheService_queryOnlineDevOnlyIdsByUserOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryOnlineDevOnlyIdsByUserOnlyId_presult__isset;

class CacheService_queryOnlineDevOnlyIdsByUserOnlyId_presult {
 public:


  virtual ~CacheService_queryOnlineDevOnlyIdsByUserOnlyId_presult() throw() {}

  std::vector<std::string> * success;

  _CacheService_queryOnlineDevOnlyIdsByUserOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_args__isset {
  _CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_args__isset() : maxCode(false), minCode(false), devOnlyIdList(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyIdList;
} _CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_args__isset;

class CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_args {
 public:

  CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::vector<std::string>  devOnlyIdList;

  _CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyIdList(const std::vector<std::string> & val) {
    devOnlyIdList = val;
  }

  bool operator == (const CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyIdList == rhs.devOnlyIdList))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_pargs {
 public:


  virtual ~CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::vector<std::string> * devOnlyIdList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_result__isset {
  _CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_result__isset() : success(false) {}
  bool success;
} _CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_result__isset;

class CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_result {
 public:

  CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_result() {
  }

  virtual ~CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_result() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache>  success;

  _CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_result__isset __isset;

  void __set_success(const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache> & val) {
    success = val;
  }

  bool operator == (const CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_presult__isset {
  _CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_presult__isset() : success(false) {}
  bool success;
} _CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_presult__isset;

class CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_presult {
 public:


  virtual ~CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_presult() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache> * success;

  _CacheService_batchQueryDeviceOnlinesByDevOnlyIdList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveDeviceKey_args__isset {
  _CacheService_saveDeviceKey_args__isset() : maxCode(false), minCode(false), deviceKeyCache(false) {}
  bool maxCode;
  bool minCode;
  bool deviceKeyCache;
} _CacheService_saveDeviceKey_args__isset;

class CacheService_saveDeviceKey_args {
 public:

  CacheService_saveDeviceKey_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_saveDeviceKey_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache deviceKeyCache;

  _CacheService_saveDeviceKey_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_deviceKeyCache(const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& val) {
    deviceKeyCache = val;
  }

  bool operator == (const CacheService_saveDeviceKey_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(deviceKeyCache == rhs.deviceKeyCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveDeviceKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveDeviceKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveDeviceKey_pargs {
 public:


  virtual ~CacheService_saveDeviceKey_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache* deviceKeyCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveDeviceKey_result__isset {
  _CacheService_saveDeviceKey_result__isset() : success(false) {}
  bool success;
} _CacheService_saveDeviceKey_result__isset;

class CacheService_saveDeviceKey_result {
 public:

  CacheService_saveDeviceKey_result() {
  }

  virtual ~CacheService_saveDeviceKey_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveDeviceKey_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveDeviceKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveDeviceKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveDeviceKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveDeviceKey_presult__isset {
  _CacheService_saveDeviceKey_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveDeviceKey_presult__isset;

class CacheService_saveDeviceKey_presult {
 public:


  virtual ~CacheService_saveDeviceKey_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveDeviceKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateDeviceKey_args__isset {
  _CacheService_updateDeviceKey_args__isset() : maxCode(false), minCode(false), deviceKeyCache(false) {}
  bool maxCode;
  bool minCode;
  bool deviceKeyCache;
} _CacheService_updateDeviceKey_args__isset;

class CacheService_updateDeviceKey_args {
 public:

  CacheService_updateDeviceKey_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_updateDeviceKey_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache deviceKeyCache;

  _CacheService_updateDeviceKey_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_deviceKeyCache(const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& val) {
    deviceKeyCache = val;
  }

  bool operator == (const CacheService_updateDeviceKey_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(deviceKeyCache == rhs.deviceKeyCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDeviceKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDeviceKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateDeviceKey_pargs {
 public:


  virtual ~CacheService_updateDeviceKey_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache* deviceKeyCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDeviceKey_result__isset {
  _CacheService_updateDeviceKey_result__isset() : success(false) {}
  bool success;
} _CacheService_updateDeviceKey_result__isset;

class CacheService_updateDeviceKey_result {
 public:

  CacheService_updateDeviceKey_result() {
  }

  virtual ~CacheService_updateDeviceKey_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateDeviceKey_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateDeviceKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDeviceKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDeviceKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDeviceKey_presult__isset {
  _CacheService_updateDeviceKey_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateDeviceKey_presult__isset;

class CacheService_updateDeviceKey_presult {
 public:


  virtual ~CacheService_updateDeviceKey_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateDeviceKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateDeviceKeyByField_args__isset {
  _CacheService_updateDeviceKeyByField_args__isset() : maxCode(false), minCode(false), sessionId(false), fieldValueMap(false) {}
  bool maxCode;
  bool minCode;
  bool sessionId;
  bool fieldValueMap;
} _CacheService_updateDeviceKeyByField_args__isset;

class CacheService_updateDeviceKeyByField_args {
 public:

  CacheService_updateDeviceKeyByField_args() : maxCode(), minCode(), sessionId() {
  }

  virtual ~CacheService_updateDeviceKeyByField_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string sessionId;
  std::map<std::string, std::string>  fieldValueMap;

  _CacheService_updateDeviceKeyByField_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_sessionId(const std::string& val) {
    sessionId = val;
  }

  void __set_fieldValueMap(const std::map<std::string, std::string> & val) {
    fieldValueMap = val;
  }

  bool operator == (const CacheService_updateDeviceKeyByField_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(fieldValueMap == rhs.fieldValueMap))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDeviceKeyByField_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDeviceKeyByField_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateDeviceKeyByField_pargs {
 public:


  virtual ~CacheService_updateDeviceKeyByField_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* sessionId;
  const std::map<std::string, std::string> * fieldValueMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDeviceKeyByField_result__isset {
  _CacheService_updateDeviceKeyByField_result__isset() : success(false) {}
  bool success;
} _CacheService_updateDeviceKeyByField_result__isset;

class CacheService_updateDeviceKeyByField_result {
 public:

  CacheService_updateDeviceKeyByField_result() {
  }

  virtual ~CacheService_updateDeviceKeyByField_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateDeviceKeyByField_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateDeviceKeyByField_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDeviceKeyByField_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDeviceKeyByField_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDeviceKeyByField_presult__isset {
  _CacheService_updateDeviceKeyByField_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateDeviceKeyByField_presult__isset;

class CacheService_updateDeviceKeyByField_presult {
 public:


  virtual ~CacheService_updateDeviceKeyByField_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateDeviceKeyByField_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryDeviceKey_args__isset {
  _CacheService_queryDeviceKey_args__isset() : maxCode(false), minCode(false), deviceKeyCache(false) {}
  bool maxCode;
  bool minCode;
  bool deviceKeyCache;
} _CacheService_queryDeviceKey_args__isset;

class CacheService_queryDeviceKey_args {
 public:

  CacheService_queryDeviceKey_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_queryDeviceKey_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache deviceKeyCache;

  _CacheService_queryDeviceKey_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_deviceKeyCache(const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& val) {
    deviceKeyCache = val;
  }

  bool operator == (const CacheService_queryDeviceKey_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(deviceKeyCache == rhs.deviceKeyCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryDeviceKey_pargs {
 public:


  virtual ~CacheService_queryDeviceKey_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache* deviceKeyCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceKey_result__isset {
  _CacheService_queryDeviceKey_result__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceKey_result__isset;

class CacheService_queryDeviceKey_result {
 public:

  CacheService_queryDeviceKey_result() {
  }

  virtual ~CacheService_queryDeviceKey_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache success;

  _CacheService_queryDeviceKey_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& val) {
    success = val;
  }

  bool operator == (const CacheService_queryDeviceKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceKey_presult__isset {
  _CacheService_queryDeviceKey_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceKey_presult__isset;

class CacheService_queryDeviceKey_presult {
 public:


  virtual ~CacheService_queryDeviceKey_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache* success;

  _CacheService_queryDeviceKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryDeviceKeyBySessionId_args__isset {
  _CacheService_queryDeviceKeyBySessionId_args__isset() : maxCode(false), minCode(false), sessionId(false) {}
  bool maxCode;
  bool minCode;
  bool sessionId;
} _CacheService_queryDeviceKeyBySessionId_args__isset;

class CacheService_queryDeviceKeyBySessionId_args {
 public:

  CacheService_queryDeviceKeyBySessionId_args() : maxCode(), minCode(), sessionId() {
  }

  virtual ~CacheService_queryDeviceKeyBySessionId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string sessionId;

  _CacheService_queryDeviceKeyBySessionId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_sessionId(const std::string& val) {
    sessionId = val;
  }

  bool operator == (const CacheService_queryDeviceKeyBySessionId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceKeyBySessionId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceKeyBySessionId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryDeviceKeyBySessionId_pargs {
 public:


  virtual ~CacheService_queryDeviceKeyBySessionId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* sessionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceKeyBySessionId_result__isset {
  _CacheService_queryDeviceKeyBySessionId_result__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceKeyBySessionId_result__isset;

class CacheService_queryDeviceKeyBySessionId_result {
 public:

  CacheService_queryDeviceKeyBySessionId_result() {
  }

  virtual ~CacheService_queryDeviceKeyBySessionId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache success;

  _CacheService_queryDeviceKeyBySessionId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& val) {
    success = val;
  }

  bool operator == (const CacheService_queryDeviceKeyBySessionId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceKeyBySessionId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceKeyBySessionId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceKeyBySessionId_presult__isset {
  _CacheService_queryDeviceKeyBySessionId_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceKeyBySessionId_presult__isset;

class CacheService_queryDeviceKeyBySessionId_presult {
 public:


  virtual ~CacheService_queryDeviceKeyBySessionId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache* success;

  _CacheService_queryDeviceKeyBySessionId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryDeviceKeyByDevOnlyId_args__isset {
  _CacheService_queryDeviceKeyByDevOnlyId_args__isset() : maxCode(false), minCode(false), devOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
} _CacheService_queryDeviceKeyByDevOnlyId_args__isset;

class CacheService_queryDeviceKeyByDevOnlyId_args {
 public:

  CacheService_queryDeviceKeyByDevOnlyId_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_queryDeviceKeyByDevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;

  _CacheService_queryDeviceKeyByDevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  bool operator == (const CacheService_queryDeviceKeyByDevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceKeyByDevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceKeyByDevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryDeviceKeyByDevOnlyId_pargs {
 public:


  virtual ~CacheService_queryDeviceKeyByDevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceKeyByDevOnlyId_result__isset {
  _CacheService_queryDeviceKeyByDevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceKeyByDevOnlyId_result__isset;

class CacheService_queryDeviceKeyByDevOnlyId_result {
 public:

  CacheService_queryDeviceKeyByDevOnlyId_result() {
  }

  virtual ~CacheService_queryDeviceKeyByDevOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache success;

  _CacheService_queryDeviceKeyByDevOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& val) {
    success = val;
  }

  bool operator == (const CacheService_queryDeviceKeyByDevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceKeyByDevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceKeyByDevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceKeyByDevOnlyId_presult__isset {
  _CacheService_queryDeviceKeyByDevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceKeyByDevOnlyId_presult__isset;

class CacheService_queryDeviceKeyByDevOnlyId_presult {
 public:


  virtual ~CacheService_queryDeviceKeyByDevOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache* success;

  _CacheService_queryDeviceKeyByDevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteDeviceKey_args__isset {
  _CacheService_deleteDeviceKey_args__isset() : maxCode(false), minCode(false), deviceKeyCache(false) {}
  bool maxCode;
  bool minCode;
  bool deviceKeyCache;
} _CacheService_deleteDeviceKey_args__isset;

class CacheService_deleteDeviceKey_args {
 public:

  CacheService_deleteDeviceKey_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_deleteDeviceKey_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache deviceKeyCache;

  _CacheService_deleteDeviceKey_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_deviceKeyCache(const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& val) {
    deviceKeyCache = val;
  }

  bool operator == (const CacheService_deleteDeviceKey_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(deviceKeyCache == rhs.deviceKeyCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceKey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceKey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteDeviceKey_pargs {
 public:


  virtual ~CacheService_deleteDeviceKey_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache* deviceKeyCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceKey_result__isset {
  _CacheService_deleteDeviceKey_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceKey_result__isset;

class CacheService_deleteDeviceKey_result {
 public:

  CacheService_deleteDeviceKey_result() {
  }

  virtual ~CacheService_deleteDeviceKey_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteDeviceKey_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteDeviceKey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceKey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceKey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceKey_presult__isset {
  _CacheService_deleteDeviceKey_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceKey_presult__isset;

class CacheService_deleteDeviceKey_presult {
 public:


  virtual ~CacheService_deleteDeviceKey_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteDeviceKey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteDeviceKeyBySessionId_args__isset {
  _CacheService_deleteDeviceKeyBySessionId_args__isset() : maxCode(false), minCode(false), sessionId(false) {}
  bool maxCode;
  bool minCode;
  bool sessionId;
} _CacheService_deleteDeviceKeyBySessionId_args__isset;

class CacheService_deleteDeviceKeyBySessionId_args {
 public:

  CacheService_deleteDeviceKeyBySessionId_args() : maxCode(), minCode(), sessionId() {
  }

  virtual ~CacheService_deleteDeviceKeyBySessionId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string sessionId;

  _CacheService_deleteDeviceKeyBySessionId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_sessionId(const std::string& val) {
    sessionId = val;
  }

  bool operator == (const CacheService_deleteDeviceKeyBySessionId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceKeyBySessionId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceKeyBySessionId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteDeviceKeyBySessionId_pargs {
 public:


  virtual ~CacheService_deleteDeviceKeyBySessionId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* sessionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceKeyBySessionId_result__isset {
  _CacheService_deleteDeviceKeyBySessionId_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceKeyBySessionId_result__isset;

class CacheService_deleteDeviceKeyBySessionId_result {
 public:

  CacheService_deleteDeviceKeyBySessionId_result() {
  }

  virtual ~CacheService_deleteDeviceKeyBySessionId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteDeviceKeyBySessionId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteDeviceKeyBySessionId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceKeyBySessionId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceKeyBySessionId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceKeyBySessionId_presult__isset {
  _CacheService_deleteDeviceKeyBySessionId_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceKeyBySessionId_presult__isset;

class CacheService_deleteDeviceKeyBySessionId_presult {
 public:


  virtual ~CacheService_deleteDeviceKeyBySessionId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteDeviceKeyBySessionId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteDeviceKeyByDevOnlyId_args__isset {
  _CacheService_deleteDeviceKeyByDevOnlyId_args__isset() : maxCode(false), minCode(false), devOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
} _CacheService_deleteDeviceKeyByDevOnlyId_args__isset;

class CacheService_deleteDeviceKeyByDevOnlyId_args {
 public:

  CacheService_deleteDeviceKeyByDevOnlyId_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_deleteDeviceKeyByDevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;

  _CacheService_deleteDeviceKeyByDevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  bool operator == (const CacheService_deleteDeviceKeyByDevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceKeyByDevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceKeyByDevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteDeviceKeyByDevOnlyId_pargs {
 public:


  virtual ~CacheService_deleteDeviceKeyByDevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceKeyByDevOnlyId_result__isset {
  _CacheService_deleteDeviceKeyByDevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceKeyByDevOnlyId_result__isset;

class CacheService_deleteDeviceKeyByDevOnlyId_result {
 public:

  CacheService_deleteDeviceKeyByDevOnlyId_result() {
  }

  virtual ~CacheService_deleteDeviceKeyByDevOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteDeviceKeyByDevOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteDeviceKeyByDevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceKeyByDevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceKeyByDevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceKeyByDevOnlyId_presult__isset {
  _CacheService_deleteDeviceKeyByDevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceKeyByDevOnlyId_presult__isset;

class CacheService_deleteDeviceKeyByDevOnlyId_presult {
 public:


  virtual ~CacheService_deleteDeviceKeyByDevOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteDeviceKeyByDevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_isExistSessionIdInDeviceKeyCache_args__isset {
  _CacheService_isExistSessionIdInDeviceKeyCache_args__isset() : maxCode(false), minCode(false), sessionId(false) {}
  bool maxCode;
  bool minCode;
  bool sessionId;
} _CacheService_isExistSessionIdInDeviceKeyCache_args__isset;

class CacheService_isExistSessionIdInDeviceKeyCache_args {
 public:

  CacheService_isExistSessionIdInDeviceKeyCache_args() : maxCode(), minCode(), sessionId() {
  }

  virtual ~CacheService_isExistSessionIdInDeviceKeyCache_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string sessionId;

  _CacheService_isExistSessionIdInDeviceKeyCache_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_sessionId(const std::string& val) {
    sessionId = val;
  }

  bool operator == (const CacheService_isExistSessionIdInDeviceKeyCache_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    return true;
  }
  bool operator != (const CacheService_isExistSessionIdInDeviceKeyCache_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_isExistSessionIdInDeviceKeyCache_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_isExistSessionIdInDeviceKeyCache_pargs {
 public:


  virtual ~CacheService_isExistSessionIdInDeviceKeyCache_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* sessionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_isExistSessionIdInDeviceKeyCache_result__isset {
  _CacheService_isExistSessionIdInDeviceKeyCache_result__isset() : success(false) {}
  bool success;
} _CacheService_isExistSessionIdInDeviceKeyCache_result__isset;

class CacheService_isExistSessionIdInDeviceKeyCache_result {
 public:

  CacheService_isExistSessionIdInDeviceKeyCache_result() {
  }

  virtual ~CacheService_isExistSessionIdInDeviceKeyCache_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_isExistSessionIdInDeviceKeyCache_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_isExistSessionIdInDeviceKeyCache_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_isExistSessionIdInDeviceKeyCache_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_isExistSessionIdInDeviceKeyCache_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_isExistSessionIdInDeviceKeyCache_presult__isset {
  _CacheService_isExistSessionIdInDeviceKeyCache_presult__isset() : success(false) {}
  bool success;
} _CacheService_isExistSessionIdInDeviceKeyCache_presult__isset;

class CacheService_isExistSessionIdInDeviceKeyCache_presult {
 public:


  virtual ~CacheService_isExistSessionIdInDeviceKeyCache_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_isExistSessionIdInDeviceKeyCache_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_batchQueryDeviceKeysBySessionIdList_args__isset {
  _CacheService_batchQueryDeviceKeysBySessionIdList_args__isset() : maxCode(false), minCode(false), sessionIdList(false) {}
  bool maxCode;
  bool minCode;
  bool sessionIdList;
} _CacheService_batchQueryDeviceKeysBySessionIdList_args__isset;

class CacheService_batchQueryDeviceKeysBySessionIdList_args {
 public:

  CacheService_batchQueryDeviceKeysBySessionIdList_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_batchQueryDeviceKeysBySessionIdList_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::vector<std::string>  sessionIdList;

  _CacheService_batchQueryDeviceKeysBySessionIdList_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_sessionIdList(const std::vector<std::string> & val) {
    sessionIdList = val;
  }

  bool operator == (const CacheService_batchQueryDeviceKeysBySessionIdList_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(sessionIdList == rhs.sessionIdList))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchQueryDeviceKeysBySessionIdList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchQueryDeviceKeysBySessionIdList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_batchQueryDeviceKeysBySessionIdList_pargs {
 public:


  virtual ~CacheService_batchQueryDeviceKeysBySessionIdList_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::vector<std::string> * sessionIdList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchQueryDeviceKeysBySessionIdList_result__isset {
  _CacheService_batchQueryDeviceKeysBySessionIdList_result__isset() : success(false) {}
  bool success;
} _CacheService_batchQueryDeviceKeysBySessionIdList_result__isset;

class CacheService_batchQueryDeviceKeysBySessionIdList_result {
 public:

  CacheService_batchQueryDeviceKeysBySessionIdList_result() {
  }

  virtual ~CacheService_batchQueryDeviceKeysBySessionIdList_result() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache>  success;

  _CacheService_batchQueryDeviceKeysBySessionIdList_result__isset __isset;

  void __set_success(const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache> & val) {
    success = val;
  }

  bool operator == (const CacheService_batchQueryDeviceKeysBySessionIdList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchQueryDeviceKeysBySessionIdList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchQueryDeviceKeysBySessionIdList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchQueryDeviceKeysBySessionIdList_presult__isset {
  _CacheService_batchQueryDeviceKeysBySessionIdList_presult__isset() : success(false) {}
  bool success;
} _CacheService_batchQueryDeviceKeysBySessionIdList_presult__isset;

class CacheService_batchQueryDeviceKeysBySessionIdList_presult {
 public:


  virtual ~CacheService_batchQueryDeviceKeysBySessionIdList_presult() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache> * success;

  _CacheService_batchQueryDeviceKeysBySessionIdList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveDeviceInsProOld_args__isset {
  _CacheService_saveDeviceInsProOld_args__isset() : maxCode(false), minCode(false), devOnlyId(false), deviceProductList(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
  bool deviceProductList;
} _CacheService_saveDeviceInsProOld_args__isset;

class CacheService_saveDeviceInsProOld_args {
 public:

  CacheService_saveDeviceInsProOld_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_saveDeviceInsProOld_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;
  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct>  deviceProductList;

  _CacheService_saveDeviceInsProOld_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  void __set_deviceProductList(const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & val) {
    deviceProductList = val;
  }

  bool operator == (const CacheService_saveDeviceInsProOld_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    if (!(deviceProductList == rhs.deviceProductList))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveDeviceInsProOld_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveDeviceInsProOld_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveDeviceInsProOld_pargs {
 public:


  virtual ~CacheService_saveDeviceInsProOld_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;
  const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> * deviceProductList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveDeviceInsProOld_result__isset {
  _CacheService_saveDeviceInsProOld_result__isset() : success(false) {}
  bool success;
} _CacheService_saveDeviceInsProOld_result__isset;

class CacheService_saveDeviceInsProOld_result {
 public:

  CacheService_saveDeviceInsProOld_result() {
  }

  virtual ~CacheService_saveDeviceInsProOld_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveDeviceInsProOld_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveDeviceInsProOld_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveDeviceInsProOld_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveDeviceInsProOld_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveDeviceInsProOld_presult__isset {
  _CacheService_saveDeviceInsProOld_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveDeviceInsProOld_presult__isset;

class CacheService_saveDeviceInsProOld_presult {
 public:


  virtual ~CacheService_saveDeviceInsProOld_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveDeviceInsProOld_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateDeviceInsProOld_args__isset {
  _CacheService_updateDeviceInsProOld_args__isset() : maxCode(false), minCode(false), devOnlyId(false), deviceProductList(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
  bool deviceProductList;
} _CacheService_updateDeviceInsProOld_args__isset;

class CacheService_updateDeviceInsProOld_args {
 public:

  CacheService_updateDeviceInsProOld_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_updateDeviceInsProOld_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;
  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct>  deviceProductList;

  _CacheService_updateDeviceInsProOld_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  void __set_deviceProductList(const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & val) {
    deviceProductList = val;
  }

  bool operator == (const CacheService_updateDeviceInsProOld_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    if (!(deviceProductList == rhs.deviceProductList))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDeviceInsProOld_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDeviceInsProOld_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateDeviceInsProOld_pargs {
 public:


  virtual ~CacheService_updateDeviceInsProOld_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;
  const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> * deviceProductList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDeviceInsProOld_result__isset {
  _CacheService_updateDeviceInsProOld_result__isset() : success(false) {}
  bool success;
} _CacheService_updateDeviceInsProOld_result__isset;

class CacheService_updateDeviceInsProOld_result {
 public:

  CacheService_updateDeviceInsProOld_result() {
  }

  virtual ~CacheService_updateDeviceInsProOld_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateDeviceInsProOld_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateDeviceInsProOld_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDeviceInsProOld_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDeviceInsProOld_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDeviceInsProOld_presult__isset {
  _CacheService_updateDeviceInsProOld_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateDeviceInsProOld_presult__isset;

class CacheService_updateDeviceInsProOld_presult {
 public:


  virtual ~CacheService_updateDeviceInsProOld_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateDeviceInsProOld_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryDeviceInsProOldByDevOnlyId_args__isset {
  _CacheService_queryDeviceInsProOldByDevOnlyId_args__isset() : maxCode(false), minCode(false), devOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
} _CacheService_queryDeviceInsProOldByDevOnlyId_args__isset;

class CacheService_queryDeviceInsProOldByDevOnlyId_args {
 public:

  CacheService_queryDeviceInsProOldByDevOnlyId_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_queryDeviceInsProOldByDevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;

  _CacheService_queryDeviceInsProOldByDevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  bool operator == (const CacheService_queryDeviceInsProOldByDevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceInsProOldByDevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceInsProOldByDevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryDeviceInsProOldByDevOnlyId_pargs {
 public:


  virtual ~CacheService_queryDeviceInsProOldByDevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceInsProOldByDevOnlyId_result__isset {
  _CacheService_queryDeviceInsProOldByDevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceInsProOldByDevOnlyId_result__isset;

class CacheService_queryDeviceInsProOldByDevOnlyId_result {
 public:

  CacheService_queryDeviceInsProOldByDevOnlyId_result() {
  }

  virtual ~CacheService_queryDeviceInsProOldByDevOnlyId_result() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct>  success;

  _CacheService_queryDeviceInsProOldByDevOnlyId_result__isset __isset;

  void __set_success(const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & val) {
    success = val;
  }

  bool operator == (const CacheService_queryDeviceInsProOldByDevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceInsProOldByDevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceInsProOldByDevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceInsProOldByDevOnlyId_presult__isset {
  _CacheService_queryDeviceInsProOldByDevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceInsProOldByDevOnlyId_presult__isset;

class CacheService_queryDeviceInsProOldByDevOnlyId_presult {
 public:


  virtual ~CacheService_queryDeviceInsProOldByDevOnlyId_presult() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> * success;

  _CacheService_queryDeviceInsProOldByDevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteDeviceInsProOldByDevOnlyId_args__isset {
  _CacheService_deleteDeviceInsProOldByDevOnlyId_args__isset() : maxCode(false), minCode(false), devOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
} _CacheService_deleteDeviceInsProOldByDevOnlyId_args__isset;

class CacheService_deleteDeviceInsProOldByDevOnlyId_args {
 public:

  CacheService_deleteDeviceInsProOldByDevOnlyId_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_deleteDeviceInsProOldByDevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;

  _CacheService_deleteDeviceInsProOldByDevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  bool operator == (const CacheService_deleteDeviceInsProOldByDevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceInsProOldByDevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceInsProOldByDevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteDeviceInsProOldByDevOnlyId_pargs {
 public:


  virtual ~CacheService_deleteDeviceInsProOldByDevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceInsProOldByDevOnlyId_result__isset {
  _CacheService_deleteDeviceInsProOldByDevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceInsProOldByDevOnlyId_result__isset;

class CacheService_deleteDeviceInsProOldByDevOnlyId_result {
 public:

  CacheService_deleteDeviceInsProOldByDevOnlyId_result() {
  }

  virtual ~CacheService_deleteDeviceInsProOldByDevOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteDeviceInsProOldByDevOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteDeviceInsProOldByDevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceInsProOldByDevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceInsProOldByDevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceInsProOldByDevOnlyId_presult__isset {
  _CacheService_deleteDeviceInsProOldByDevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceInsProOldByDevOnlyId_presult__isset;

class CacheService_deleteDeviceInsProOldByDevOnlyId_presult {
 public:


  virtual ~CacheService_deleteDeviceInsProOldByDevOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteDeviceInsProOldByDevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveDeviceInsProNew_args__isset {
  _CacheService_saveDeviceInsProNew_args__isset() : maxCode(false), minCode(false), devOnlyId(false), deviceProductList(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
  bool deviceProductList;
} _CacheService_saveDeviceInsProNew_args__isset;

class CacheService_saveDeviceInsProNew_args {
 public:

  CacheService_saveDeviceInsProNew_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_saveDeviceInsProNew_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;
  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct>  deviceProductList;

  _CacheService_saveDeviceInsProNew_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  void __set_deviceProductList(const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & val) {
    deviceProductList = val;
  }

  bool operator == (const CacheService_saveDeviceInsProNew_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    if (!(deviceProductList == rhs.deviceProductList))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveDeviceInsProNew_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveDeviceInsProNew_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveDeviceInsProNew_pargs {
 public:


  virtual ~CacheService_saveDeviceInsProNew_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;
  const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> * deviceProductList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveDeviceInsProNew_result__isset {
  _CacheService_saveDeviceInsProNew_result__isset() : success(false) {}
  bool success;
} _CacheService_saveDeviceInsProNew_result__isset;

class CacheService_saveDeviceInsProNew_result {
 public:

  CacheService_saveDeviceInsProNew_result() {
  }

  virtual ~CacheService_saveDeviceInsProNew_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveDeviceInsProNew_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveDeviceInsProNew_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveDeviceInsProNew_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveDeviceInsProNew_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveDeviceInsProNew_presult__isset {
  _CacheService_saveDeviceInsProNew_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveDeviceInsProNew_presult__isset;

class CacheService_saveDeviceInsProNew_presult {
 public:


  virtual ~CacheService_saveDeviceInsProNew_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveDeviceInsProNew_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateDeviceInsProNew_args__isset {
  _CacheService_updateDeviceInsProNew_args__isset() : maxCode(false), minCode(false), devOnlyId(false), deviceProductList(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
  bool deviceProductList;
} _CacheService_updateDeviceInsProNew_args__isset;

class CacheService_updateDeviceInsProNew_args {
 public:

  CacheService_updateDeviceInsProNew_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_updateDeviceInsProNew_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;
  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct>  deviceProductList;

  _CacheService_updateDeviceInsProNew_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  void __set_deviceProductList(const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & val) {
    deviceProductList = val;
  }

  bool operator == (const CacheService_updateDeviceInsProNew_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    if (!(deviceProductList == rhs.deviceProductList))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDeviceInsProNew_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDeviceInsProNew_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateDeviceInsProNew_pargs {
 public:


  virtual ~CacheService_updateDeviceInsProNew_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;
  const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> * deviceProductList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDeviceInsProNew_result__isset {
  _CacheService_updateDeviceInsProNew_result__isset() : success(false) {}
  bool success;
} _CacheService_updateDeviceInsProNew_result__isset;

class CacheService_updateDeviceInsProNew_result {
 public:

  CacheService_updateDeviceInsProNew_result() {
  }

  virtual ~CacheService_updateDeviceInsProNew_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateDeviceInsProNew_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateDeviceInsProNew_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDeviceInsProNew_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDeviceInsProNew_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDeviceInsProNew_presult__isset {
  _CacheService_updateDeviceInsProNew_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateDeviceInsProNew_presult__isset;

class CacheService_updateDeviceInsProNew_presult {
 public:


  virtual ~CacheService_updateDeviceInsProNew_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateDeviceInsProNew_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryDeviceInsProNewByDevOnlyId_args__isset {
  _CacheService_queryDeviceInsProNewByDevOnlyId_args__isset() : maxCode(false), minCode(false), devOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
} _CacheService_queryDeviceInsProNewByDevOnlyId_args__isset;

class CacheService_queryDeviceInsProNewByDevOnlyId_args {
 public:

  CacheService_queryDeviceInsProNewByDevOnlyId_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_queryDeviceInsProNewByDevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;

  _CacheService_queryDeviceInsProNewByDevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  bool operator == (const CacheService_queryDeviceInsProNewByDevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceInsProNewByDevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceInsProNewByDevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryDeviceInsProNewByDevOnlyId_pargs {
 public:


  virtual ~CacheService_queryDeviceInsProNewByDevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceInsProNewByDevOnlyId_result__isset {
  _CacheService_queryDeviceInsProNewByDevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceInsProNewByDevOnlyId_result__isset;

class CacheService_queryDeviceInsProNewByDevOnlyId_result {
 public:

  CacheService_queryDeviceInsProNewByDevOnlyId_result() {
  }

  virtual ~CacheService_queryDeviceInsProNewByDevOnlyId_result() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct>  success;

  _CacheService_queryDeviceInsProNewByDevOnlyId_result__isset __isset;

  void __set_success(const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & val) {
    success = val;
  }

  bool operator == (const CacheService_queryDeviceInsProNewByDevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceInsProNewByDevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceInsProNewByDevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceInsProNewByDevOnlyId_presult__isset {
  _CacheService_queryDeviceInsProNewByDevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceInsProNewByDevOnlyId_presult__isset;

class CacheService_queryDeviceInsProNewByDevOnlyId_presult {
 public:


  virtual ~CacheService_queryDeviceInsProNewByDevOnlyId_presult() throw() {}

  std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> * success;

  _CacheService_queryDeviceInsProNewByDevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteDeviceInsProNewByDevOnlyId_args__isset {
  _CacheService_deleteDeviceInsProNewByDevOnlyId_args__isset() : maxCode(false), minCode(false), devOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
} _CacheService_deleteDeviceInsProNewByDevOnlyId_args__isset;

class CacheService_deleteDeviceInsProNewByDevOnlyId_args {
 public:

  CacheService_deleteDeviceInsProNewByDevOnlyId_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_deleteDeviceInsProNewByDevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;

  _CacheService_deleteDeviceInsProNewByDevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  bool operator == (const CacheService_deleteDeviceInsProNewByDevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceInsProNewByDevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceInsProNewByDevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteDeviceInsProNewByDevOnlyId_pargs {
 public:


  virtual ~CacheService_deleteDeviceInsProNewByDevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceInsProNewByDevOnlyId_result__isset {
  _CacheService_deleteDeviceInsProNewByDevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceInsProNewByDevOnlyId_result__isset;

class CacheService_deleteDeviceInsProNewByDevOnlyId_result {
 public:

  CacheService_deleteDeviceInsProNewByDevOnlyId_result() {
  }

  virtual ~CacheService_deleteDeviceInsProNewByDevOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteDeviceInsProNewByDevOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteDeviceInsProNewByDevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceInsProNewByDevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceInsProNewByDevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceInsProNewByDevOnlyId_presult__isset {
  _CacheService_deleteDeviceInsProNewByDevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceInsProNewByDevOnlyId_presult__isset;

class CacheService_deleteDeviceInsProNewByDevOnlyId_presult {
 public:


  virtual ~CacheService_deleteDeviceInsProNewByDevOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteDeviceInsProNewByDevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveDevicePolicy_args__isset {
  _CacheService_saveDevicePolicy_args__isset() : maxCode(false), minCode(false), devicePolicyCache(false) {}
  bool maxCode;
  bool minCode;
  bool devicePolicyCache;
} _CacheService_saveDevicePolicy_args__isset;

class CacheService_saveDevicePolicy_args {
 public:

  CacheService_saveDevicePolicy_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_saveDevicePolicy_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache devicePolicyCache;

  _CacheService_saveDevicePolicy_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devicePolicyCache(const  ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& val) {
    devicePolicyCache = val;
  }

  bool operator == (const CacheService_saveDevicePolicy_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devicePolicyCache == rhs.devicePolicyCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveDevicePolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveDevicePolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveDevicePolicy_pargs {
 public:


  virtual ~CacheService_saveDevicePolicy_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache* devicePolicyCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveDevicePolicy_result__isset {
  _CacheService_saveDevicePolicy_result__isset() : success(false) {}
  bool success;
} _CacheService_saveDevicePolicy_result__isset;

class CacheService_saveDevicePolicy_result {
 public:

  CacheService_saveDevicePolicy_result() {
  }

  virtual ~CacheService_saveDevicePolicy_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveDevicePolicy_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveDevicePolicy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveDevicePolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveDevicePolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveDevicePolicy_presult__isset {
  _CacheService_saveDevicePolicy_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveDevicePolicy_presult__isset;

class CacheService_saveDevicePolicy_presult {
 public:


  virtual ~CacheService_saveDevicePolicy_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveDevicePolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateDevicePolicy_args__isset {
  _CacheService_updateDevicePolicy_args__isset() : maxCode(false), minCode(false), devicePolicyCache(false) {}
  bool maxCode;
  bool minCode;
  bool devicePolicyCache;
} _CacheService_updateDevicePolicy_args__isset;

class CacheService_updateDevicePolicy_args {
 public:

  CacheService_updateDevicePolicy_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_updateDevicePolicy_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache devicePolicyCache;

  _CacheService_updateDevicePolicy_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devicePolicyCache(const  ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& val) {
    devicePolicyCache = val;
  }

  bool operator == (const CacheService_updateDevicePolicy_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devicePolicyCache == rhs.devicePolicyCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDevicePolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDevicePolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateDevicePolicy_pargs {
 public:


  virtual ~CacheService_updateDevicePolicy_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache* devicePolicyCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDevicePolicy_result__isset {
  _CacheService_updateDevicePolicy_result__isset() : success(false) {}
  bool success;
} _CacheService_updateDevicePolicy_result__isset;

class CacheService_updateDevicePolicy_result {
 public:

  CacheService_updateDevicePolicy_result() {
  }

  virtual ~CacheService_updateDevicePolicy_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateDevicePolicy_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateDevicePolicy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDevicePolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDevicePolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDevicePolicy_presult__isset {
  _CacheService_updateDevicePolicy_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateDevicePolicy_presult__isset;

class CacheService_updateDevicePolicy_presult {
 public:


  virtual ~CacheService_updateDevicePolicy_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateDevicePolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryDevicePolicyByDevOnlyId_args__isset {
  _CacheService_queryDevicePolicyByDevOnlyId_args__isset() : maxCode(false), minCode(false), devOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
} _CacheService_queryDevicePolicyByDevOnlyId_args__isset;

class CacheService_queryDevicePolicyByDevOnlyId_args {
 public:

  CacheService_queryDevicePolicyByDevOnlyId_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_queryDevicePolicyByDevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;

  _CacheService_queryDevicePolicyByDevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  bool operator == (const CacheService_queryDevicePolicyByDevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDevicePolicyByDevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDevicePolicyByDevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryDevicePolicyByDevOnlyId_pargs {
 public:


  virtual ~CacheService_queryDevicePolicyByDevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDevicePolicyByDevOnlyId_result__isset {
  _CacheService_queryDevicePolicyByDevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_queryDevicePolicyByDevOnlyId_result__isset;

class CacheService_queryDevicePolicyByDevOnlyId_result {
 public:

  CacheService_queryDevicePolicyByDevOnlyId_result() {
  }

  virtual ~CacheService_queryDevicePolicyByDevOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache success;

  _CacheService_queryDevicePolicyByDevOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& val) {
    success = val;
  }

  bool operator == (const CacheService_queryDevicePolicyByDevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDevicePolicyByDevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDevicePolicyByDevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDevicePolicyByDevOnlyId_presult__isset {
  _CacheService_queryDevicePolicyByDevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryDevicePolicyByDevOnlyId_presult__isset;

class CacheService_queryDevicePolicyByDevOnlyId_presult {
 public:


  virtual ~CacheService_queryDevicePolicyByDevOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache* success;

  _CacheService_queryDevicePolicyByDevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryDevicePolicyByIp_args__isset {
  _CacheService_queryDevicePolicyByIp_args__isset() : maxCode(false), minCode(false), ip(false) {}
  bool maxCode;
  bool minCode;
  bool ip;
} _CacheService_queryDevicePolicyByIp_args__isset;

class CacheService_queryDevicePolicyByIp_args {
 public:

  CacheService_queryDevicePolicyByIp_args() : maxCode(), minCode(), ip() {
  }

  virtual ~CacheService_queryDevicePolicyByIp_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string ip;

  _CacheService_queryDevicePolicyByIp_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  bool operator == (const CacheService_queryDevicePolicyByIp_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDevicePolicyByIp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDevicePolicyByIp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryDevicePolicyByIp_pargs {
 public:


  virtual ~CacheService_queryDevicePolicyByIp_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDevicePolicyByIp_result__isset {
  _CacheService_queryDevicePolicyByIp_result__isset() : success(false) {}
  bool success;
} _CacheService_queryDevicePolicyByIp_result__isset;

class CacheService_queryDevicePolicyByIp_result {
 public:

  CacheService_queryDevicePolicyByIp_result() {
  }

  virtual ~CacheService_queryDevicePolicyByIp_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache success;

  _CacheService_queryDevicePolicyByIp_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& val) {
    success = val;
  }

  bool operator == (const CacheService_queryDevicePolicyByIp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDevicePolicyByIp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDevicePolicyByIp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDevicePolicyByIp_presult__isset {
  _CacheService_queryDevicePolicyByIp_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryDevicePolicyByIp_presult__isset;

class CacheService_queryDevicePolicyByIp_presult {
 public:


  virtual ~CacheService_queryDevicePolicyByIp_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache* success;

  _CacheService_queryDevicePolicyByIp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteDevicePolicyByDevOnlyId_args__isset {
  _CacheService_deleteDevicePolicyByDevOnlyId_args__isset() : maxCode(false), minCode(false), devOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
} _CacheService_deleteDevicePolicyByDevOnlyId_args__isset;

class CacheService_deleteDevicePolicyByDevOnlyId_args {
 public:

  CacheService_deleteDevicePolicyByDevOnlyId_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_deleteDevicePolicyByDevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;

  _CacheService_deleteDevicePolicyByDevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  bool operator == (const CacheService_deleteDevicePolicyByDevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDevicePolicyByDevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDevicePolicyByDevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteDevicePolicyByDevOnlyId_pargs {
 public:


  virtual ~CacheService_deleteDevicePolicyByDevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDevicePolicyByDevOnlyId_result__isset {
  _CacheService_deleteDevicePolicyByDevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteDevicePolicyByDevOnlyId_result__isset;

class CacheService_deleteDevicePolicyByDevOnlyId_result {
 public:

  CacheService_deleteDevicePolicyByDevOnlyId_result() {
  }

  virtual ~CacheService_deleteDevicePolicyByDevOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteDevicePolicyByDevOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteDevicePolicyByDevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDevicePolicyByDevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDevicePolicyByDevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDevicePolicyByDevOnlyId_presult__isset {
  _CacheService_deleteDevicePolicyByDevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteDevicePolicyByDevOnlyId_presult__isset;

class CacheService_deleteDevicePolicyByDevOnlyId_presult {
 public:


  virtual ~CacheService_deleteDevicePolicyByDevOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteDevicePolicyByDevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteDevicePolicyByIp_args__isset {
  _CacheService_deleteDevicePolicyByIp_args__isset() : maxCode(false), minCode(false), ip(false) {}
  bool maxCode;
  bool minCode;
  bool ip;
} _CacheService_deleteDevicePolicyByIp_args__isset;

class CacheService_deleteDevicePolicyByIp_args {
 public:

  CacheService_deleteDevicePolicyByIp_args() : maxCode(), minCode(), ip() {
  }

  virtual ~CacheService_deleteDevicePolicyByIp_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string ip;

  _CacheService_deleteDevicePolicyByIp_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  bool operator == (const CacheService_deleteDevicePolicyByIp_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDevicePolicyByIp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDevicePolicyByIp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteDevicePolicyByIp_pargs {
 public:


  virtual ~CacheService_deleteDevicePolicyByIp_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDevicePolicyByIp_result__isset {
  _CacheService_deleteDevicePolicyByIp_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteDevicePolicyByIp_result__isset;

class CacheService_deleteDevicePolicyByIp_result {
 public:

  CacheService_deleteDevicePolicyByIp_result() {
  }

  virtual ~CacheService_deleteDevicePolicyByIp_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteDevicePolicyByIp_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteDevicePolicyByIp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDevicePolicyByIp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDevicePolicyByIp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDevicePolicyByIp_presult__isset {
  _CacheService_deleteDevicePolicyByIp_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteDevicePolicyByIp_presult__isset;

class CacheService_deleteDevicePolicyByIp_presult {
 public:


  virtual ~CacheService_deleteDevicePolicyByIp_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteDevicePolicyByIp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_batchSaveDevicePolicy_args__isset {
  _CacheService_batchSaveDevicePolicy_args__isset() : maxCode(false), minCode(false), devicePolicyList(false) {}
  bool maxCode;
  bool minCode;
  bool devicePolicyList;
} _CacheService_batchSaveDevicePolicy_args__isset;

class CacheService_batchSaveDevicePolicy_args {
 public:

  CacheService_batchSaveDevicePolicy_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_batchSaveDevicePolicy_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::vector<std::map<std::string, std::string> >  devicePolicyList;

  _CacheService_batchSaveDevicePolicy_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devicePolicyList(const std::vector<std::map<std::string, std::string> > & val) {
    devicePolicyList = val;
  }

  bool operator == (const CacheService_batchSaveDevicePolicy_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devicePolicyList == rhs.devicePolicyList))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchSaveDevicePolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchSaveDevicePolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_batchSaveDevicePolicy_pargs {
 public:


  virtual ~CacheService_batchSaveDevicePolicy_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::vector<std::map<std::string, std::string> > * devicePolicyList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchSaveDevicePolicy_result__isset {
  _CacheService_batchSaveDevicePolicy_result__isset() : success(false) {}
  bool success;
} _CacheService_batchSaveDevicePolicy_result__isset;

class CacheService_batchSaveDevicePolicy_result {
 public:

  CacheService_batchSaveDevicePolicy_result() {
  }

  virtual ~CacheService_batchSaveDevicePolicy_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_batchSaveDevicePolicy_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_batchSaveDevicePolicy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchSaveDevicePolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchSaveDevicePolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchSaveDevicePolicy_presult__isset {
  _CacheService_batchSaveDevicePolicy_presult__isset() : success(false) {}
  bool success;
} _CacheService_batchSaveDevicePolicy_presult__isset;

class CacheService_batchSaveDevicePolicy_presult {
 public:


  virtual ~CacheService_batchSaveDevicePolicy_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_batchSaveDevicePolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveUser_args__isset {
  _CacheService_saveUser_args__isset() : maxCode(false), minCode(false), userCache(false) {}
  bool maxCode;
  bool minCode;
  bool userCache;
} _CacheService_saveUser_args__isset;

class CacheService_saveUser_args {
 public:

  CacheService_saveUser_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_saveUser_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::UserCache userCache;

  _CacheService_saveUser_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userCache(const  ::com::vrv::cems::service::base::bean::cache::UserCache& val) {
    userCache = val;
  }

  bool operator == (const CacheService_saveUser_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userCache == rhs.userCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveUser_pargs {
 public:


  virtual ~CacheService_saveUser_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::UserCache* userCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveUser_result__isset {
  _CacheService_saveUser_result__isset() : success(false) {}
  bool success;
} _CacheService_saveUser_result__isset;

class CacheService_saveUser_result {
 public:

  CacheService_saveUser_result() {
  }

  virtual ~CacheService_saveUser_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveUser_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveUser_presult__isset {
  _CacheService_saveUser_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveUser_presult__isset;

class CacheService_saveUser_presult {
 public:


  virtual ~CacheService_saveUser_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateUser_args__isset {
  _CacheService_updateUser_args__isset() : maxCode(false), minCode(false), userCache(false) {}
  bool maxCode;
  bool minCode;
  bool userCache;
} _CacheService_updateUser_args__isset;

class CacheService_updateUser_args {
 public:

  CacheService_updateUser_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_updateUser_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::UserCache userCache;

  _CacheService_updateUser_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userCache(const  ::com::vrv::cems::service::base::bean::cache::UserCache& val) {
    userCache = val;
  }

  bool operator == (const CacheService_updateUser_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userCache == rhs.userCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateUser_pargs {
 public:


  virtual ~CacheService_updateUser_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::UserCache* userCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateUser_result__isset {
  _CacheService_updateUser_result__isset() : success(false) {}
  bool success;
} _CacheService_updateUser_result__isset;

class CacheService_updateUser_result {
 public:

  CacheService_updateUser_result() {
  }

  virtual ~CacheService_updateUser_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateUser_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateUser_presult__isset {
  _CacheService_updateUser_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateUser_presult__isset;

class CacheService_updateUser_presult {
 public:


  virtual ~CacheService_updateUser_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateUserByField_args__isset {
  _CacheService_updateUserByField_args__isset() : maxCode(false), minCode(false), userOnlyId(false), fieldValueMap(false) {}
  bool maxCode;
  bool minCode;
  bool userOnlyId;
  bool fieldValueMap;
} _CacheService_updateUserByField_args__isset;

class CacheService_updateUserByField_args {
 public:

  CacheService_updateUserByField_args() : maxCode(), minCode(), userOnlyId() {
  }

  virtual ~CacheService_updateUserByField_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string userOnlyId;
  std::map<std::string, std::string>  fieldValueMap;

  _CacheService_updateUserByField_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userOnlyId(const std::string& val) {
    userOnlyId = val;
  }

  void __set_fieldValueMap(const std::map<std::string, std::string> & val) {
    fieldValueMap = val;
  }

  bool operator == (const CacheService_updateUserByField_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userOnlyId == rhs.userOnlyId))
      return false;
    if (!(fieldValueMap == rhs.fieldValueMap))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateUserByField_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateUserByField_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateUserByField_pargs {
 public:


  virtual ~CacheService_updateUserByField_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* userOnlyId;
  const std::map<std::string, std::string> * fieldValueMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateUserByField_result__isset {
  _CacheService_updateUserByField_result__isset() : success(false) {}
  bool success;
} _CacheService_updateUserByField_result__isset;

class CacheService_updateUserByField_result {
 public:

  CacheService_updateUserByField_result() {
  }

  virtual ~CacheService_updateUserByField_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateUserByField_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateUserByField_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateUserByField_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateUserByField_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateUserByField_presult__isset {
  _CacheService_updateUserByField_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateUserByField_presult__isset;

class CacheService_updateUserByField_presult {
 public:


  virtual ~CacheService_updateUserByField_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateUserByField_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryUserByUserOnlyId_args__isset {
  _CacheService_queryUserByUserOnlyId_args__isset() : maxCode(false), minCode(false), userOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool userOnlyId;
} _CacheService_queryUserByUserOnlyId_args__isset;

class CacheService_queryUserByUserOnlyId_args {
 public:

  CacheService_queryUserByUserOnlyId_args() : maxCode(), minCode(), userOnlyId() {
  }

  virtual ~CacheService_queryUserByUserOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string userOnlyId;

  _CacheService_queryUserByUserOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userOnlyId(const std::string& val) {
    userOnlyId = val;
  }

  bool operator == (const CacheService_queryUserByUserOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userOnlyId == rhs.userOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryUserByUserOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryUserByUserOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryUserByUserOnlyId_pargs {
 public:


  virtual ~CacheService_queryUserByUserOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* userOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryUserByUserOnlyId_result__isset {
  _CacheService_queryUserByUserOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_queryUserByUserOnlyId_result__isset;

class CacheService_queryUserByUserOnlyId_result {
 public:

  CacheService_queryUserByUserOnlyId_result() {
  }

  virtual ~CacheService_queryUserByUserOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::UserCache success;

  _CacheService_queryUserByUserOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::UserCache& val) {
    success = val;
  }

  bool operator == (const CacheService_queryUserByUserOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryUserByUserOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryUserByUserOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryUserByUserOnlyId_presult__isset {
  _CacheService_queryUserByUserOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryUserByUserOnlyId_presult__isset;

class CacheService_queryUserByUserOnlyId_presult {
 public:


  virtual ~CacheService_queryUserByUserOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::UserCache* success;

  _CacheService_queryUserByUserOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteUserByUserOnlyId_args__isset {
  _CacheService_deleteUserByUserOnlyId_args__isset() : maxCode(false), minCode(false), userOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool userOnlyId;
} _CacheService_deleteUserByUserOnlyId_args__isset;

class CacheService_deleteUserByUserOnlyId_args {
 public:

  CacheService_deleteUserByUserOnlyId_args() : maxCode(), minCode(), userOnlyId() {
  }

  virtual ~CacheService_deleteUserByUserOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string userOnlyId;

  _CacheService_deleteUserByUserOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userOnlyId(const std::string& val) {
    userOnlyId = val;
  }

  bool operator == (const CacheService_deleteUserByUserOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userOnlyId == rhs.userOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteUserByUserOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteUserByUserOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteUserByUserOnlyId_pargs {
 public:


  virtual ~CacheService_deleteUserByUserOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* userOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteUserByUserOnlyId_result__isset {
  _CacheService_deleteUserByUserOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteUserByUserOnlyId_result__isset;

class CacheService_deleteUserByUserOnlyId_result {
 public:

  CacheService_deleteUserByUserOnlyId_result() {
  }

  virtual ~CacheService_deleteUserByUserOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteUserByUserOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteUserByUserOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteUserByUserOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteUserByUserOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteUserByUserOnlyId_presult__isset {
  _CacheService_deleteUserByUserOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteUserByUserOnlyId_presult__isset;

class CacheService_deleteUserByUserOnlyId_presult {
 public:


  virtual ~CacheService_deleteUserByUserOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteUserByUserOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_batchSaveUser_args__isset {
  _CacheService_batchSaveUser_args__isset() : maxCode(false), minCode(false), userCacheList(false) {}
  bool maxCode;
  bool minCode;
  bool userCacheList;
} _CacheService_batchSaveUser_args__isset;

class CacheService_batchSaveUser_args {
 public:

  CacheService_batchSaveUser_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_batchSaveUser_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::vector< ::com::vrv::cems::service::base::bean::cache::UserCache>  userCacheList;

  _CacheService_batchSaveUser_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userCacheList(const std::vector< ::com::vrv::cems::service::base::bean::cache::UserCache> & val) {
    userCacheList = val;
  }

  bool operator == (const CacheService_batchSaveUser_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userCacheList == rhs.userCacheList))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchSaveUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchSaveUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_batchSaveUser_pargs {
 public:


  virtual ~CacheService_batchSaveUser_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::vector< ::com::vrv::cems::service::base::bean::cache::UserCache> * userCacheList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchSaveUser_result__isset {
  _CacheService_batchSaveUser_result__isset() : success(false) {}
  bool success;
} _CacheService_batchSaveUser_result__isset;

class CacheService_batchSaveUser_result {
 public:

  CacheService_batchSaveUser_result() {
  }

  virtual ~CacheService_batchSaveUser_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_batchSaveUser_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_batchSaveUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchSaveUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchSaveUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchSaveUser_presult__isset {
  _CacheService_batchSaveUser_presult__isset() : success(false) {}
  bool success;
} _CacheService_batchSaveUser_presult__isset;

class CacheService_batchSaveUser_presult {
 public:


  virtual ~CacheService_batchSaveUser_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_batchSaveUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveUserOnline_args__isset {
  _CacheService_saveUserOnline_args__isset() : maxCode(false), minCode(false), userOnlineCache(false) {}
  bool maxCode;
  bool minCode;
  bool userOnlineCache;
} _CacheService_saveUserOnline_args__isset;

class CacheService_saveUserOnline_args {
 public:

  CacheService_saveUserOnline_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_saveUserOnline_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::UserOnlineCache userOnlineCache;

  _CacheService_saveUserOnline_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userOnlineCache(const  ::com::vrv::cems::service::base::bean::cache::UserOnlineCache& val) {
    userOnlineCache = val;
  }

  bool operator == (const CacheService_saveUserOnline_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userOnlineCache == rhs.userOnlineCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveUserOnline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveUserOnline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveUserOnline_pargs {
 public:


  virtual ~CacheService_saveUserOnline_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::UserOnlineCache* userOnlineCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveUserOnline_result__isset {
  _CacheService_saveUserOnline_result__isset() : success(false) {}
  bool success;
} _CacheService_saveUserOnline_result__isset;

class CacheService_saveUserOnline_result {
 public:

  CacheService_saveUserOnline_result() {
  }

  virtual ~CacheService_saveUserOnline_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveUserOnline_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveUserOnline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveUserOnline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveUserOnline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveUserOnline_presult__isset {
  _CacheService_saveUserOnline_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveUserOnline_presult__isset;

class CacheService_saveUserOnline_presult {
 public:


  virtual ~CacheService_saveUserOnline_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveUserOnline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateUserOnline_args__isset {
  _CacheService_updateUserOnline_args__isset() : maxCode(false), minCode(false), userOnlineCache(false) {}
  bool maxCode;
  bool minCode;
  bool userOnlineCache;
} _CacheService_updateUserOnline_args__isset;

class CacheService_updateUserOnline_args {
 public:

  CacheService_updateUserOnline_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_updateUserOnline_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::UserOnlineCache userOnlineCache;

  _CacheService_updateUserOnline_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userOnlineCache(const  ::com::vrv::cems::service::base::bean::cache::UserOnlineCache& val) {
    userOnlineCache = val;
  }

  bool operator == (const CacheService_updateUserOnline_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userOnlineCache == rhs.userOnlineCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateUserOnline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateUserOnline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateUserOnline_pargs {
 public:


  virtual ~CacheService_updateUserOnline_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::UserOnlineCache* userOnlineCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateUserOnline_result__isset {
  _CacheService_updateUserOnline_result__isset() : success(false) {}
  bool success;
} _CacheService_updateUserOnline_result__isset;

class CacheService_updateUserOnline_result {
 public:

  CacheService_updateUserOnline_result() {
  }

  virtual ~CacheService_updateUserOnline_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateUserOnline_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateUserOnline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateUserOnline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateUserOnline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateUserOnline_presult__isset {
  _CacheService_updateUserOnline_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateUserOnline_presult__isset;

class CacheService_updateUserOnline_presult {
 public:


  virtual ~CacheService_updateUserOnline_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateUserOnline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateUserOnlineByField_args__isset {
  _CacheService_updateUserOnlineByField_args__isset() : maxCode(false), minCode(false), userDevId(false), fieldValueMap(false) {}
  bool maxCode;
  bool minCode;
  bool userDevId;
  bool fieldValueMap;
} _CacheService_updateUserOnlineByField_args__isset;

class CacheService_updateUserOnlineByField_args {
 public:

  CacheService_updateUserOnlineByField_args() : maxCode(), minCode(), userDevId() {
  }

  virtual ~CacheService_updateUserOnlineByField_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string userDevId;
  std::map<std::string, std::string>  fieldValueMap;

  _CacheService_updateUserOnlineByField_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userDevId(const std::string& val) {
    userDevId = val;
  }

  void __set_fieldValueMap(const std::map<std::string, std::string> & val) {
    fieldValueMap = val;
  }

  bool operator == (const CacheService_updateUserOnlineByField_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userDevId == rhs.userDevId))
      return false;
    if (!(fieldValueMap == rhs.fieldValueMap))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateUserOnlineByField_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateUserOnlineByField_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateUserOnlineByField_pargs {
 public:


  virtual ~CacheService_updateUserOnlineByField_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* userDevId;
  const std::map<std::string, std::string> * fieldValueMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateUserOnlineByField_result__isset {
  _CacheService_updateUserOnlineByField_result__isset() : success(false) {}
  bool success;
} _CacheService_updateUserOnlineByField_result__isset;

class CacheService_updateUserOnlineByField_result {
 public:

  CacheService_updateUserOnlineByField_result() {
  }

  virtual ~CacheService_updateUserOnlineByField_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateUserOnlineByField_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateUserOnlineByField_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateUserOnlineByField_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateUserOnlineByField_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateUserOnlineByField_presult__isset {
  _CacheService_updateUserOnlineByField_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateUserOnlineByField_presult__isset;

class CacheService_updateUserOnlineByField_presult {
 public:


  virtual ~CacheService_updateUserOnlineByField_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateUserOnlineByField_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryUserOnlineByUserDevId_args__isset {
  _CacheService_queryUserOnlineByUserDevId_args__isset() : maxCode(false), minCode(false), userDevId(false) {}
  bool maxCode;
  bool minCode;
  bool userDevId;
} _CacheService_queryUserOnlineByUserDevId_args__isset;

class CacheService_queryUserOnlineByUserDevId_args {
 public:

  CacheService_queryUserOnlineByUserDevId_args() : maxCode(), minCode(), userDevId() {
  }

  virtual ~CacheService_queryUserOnlineByUserDevId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string userDevId;

  _CacheService_queryUserOnlineByUserDevId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userDevId(const std::string& val) {
    userDevId = val;
  }

  bool operator == (const CacheService_queryUserOnlineByUserDevId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userDevId == rhs.userDevId))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryUserOnlineByUserDevId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryUserOnlineByUserDevId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryUserOnlineByUserDevId_pargs {
 public:


  virtual ~CacheService_queryUserOnlineByUserDevId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* userDevId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryUserOnlineByUserDevId_result__isset {
  _CacheService_queryUserOnlineByUserDevId_result__isset() : success(false) {}
  bool success;
} _CacheService_queryUserOnlineByUserDevId_result__isset;

class CacheService_queryUserOnlineByUserDevId_result {
 public:

  CacheService_queryUserOnlineByUserDevId_result() {
  }

  virtual ~CacheService_queryUserOnlineByUserDevId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::UserOnlineCache success;

  _CacheService_queryUserOnlineByUserDevId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::UserOnlineCache& val) {
    success = val;
  }

  bool operator == (const CacheService_queryUserOnlineByUserDevId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryUserOnlineByUserDevId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryUserOnlineByUserDevId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryUserOnlineByUserDevId_presult__isset {
  _CacheService_queryUserOnlineByUserDevId_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryUserOnlineByUserDevId_presult__isset;

class CacheService_queryUserOnlineByUserDevId_presult {
 public:


  virtual ~CacheService_queryUserOnlineByUserDevId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::UserOnlineCache* success;

  _CacheService_queryUserOnlineByUserDevId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteUserOnlineByUserDevId_args__isset {
  _CacheService_deleteUserOnlineByUserDevId_args__isset() : maxCode(false), minCode(false), userDevId(false) {}
  bool maxCode;
  bool minCode;
  bool userDevId;
} _CacheService_deleteUserOnlineByUserDevId_args__isset;

class CacheService_deleteUserOnlineByUserDevId_args {
 public:

  CacheService_deleteUserOnlineByUserDevId_args() : maxCode(), minCode(), userDevId() {
  }

  virtual ~CacheService_deleteUserOnlineByUserDevId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string userDevId;

  _CacheService_deleteUserOnlineByUserDevId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userDevId(const std::string& val) {
    userDevId = val;
  }

  bool operator == (const CacheService_deleteUserOnlineByUserDevId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userDevId == rhs.userDevId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteUserOnlineByUserDevId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteUserOnlineByUserDevId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteUserOnlineByUserDevId_pargs {
 public:


  virtual ~CacheService_deleteUserOnlineByUserDevId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* userDevId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteUserOnlineByUserDevId_result__isset {
  _CacheService_deleteUserOnlineByUserDevId_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteUserOnlineByUserDevId_result__isset;

class CacheService_deleteUserOnlineByUserDevId_result {
 public:

  CacheService_deleteUserOnlineByUserDevId_result() {
  }

  virtual ~CacheService_deleteUserOnlineByUserDevId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteUserOnlineByUserDevId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteUserOnlineByUserDevId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteUserOnlineByUserDevId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteUserOnlineByUserDevId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteUserOnlineByUserDevId_presult__isset {
  _CacheService_deleteUserOnlineByUserDevId_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteUserOnlineByUserDevId_presult__isset;

class CacheService_deleteUserOnlineByUserDevId_presult {
 public:


  virtual ~CacheService_deleteUserOnlineByUserDevId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteUserOnlineByUserDevId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryAllUserOnlineDevice_args__isset {
  _CacheService_queryAllUserOnlineDevice_args__isset() : maxCode(false), minCode(false) {}
  bool maxCode;
  bool minCode;
} _CacheService_queryAllUserOnlineDevice_args__isset;

class CacheService_queryAllUserOnlineDevice_args {
 public:

  CacheService_queryAllUserOnlineDevice_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_queryAllUserOnlineDevice_args() throw() {}

  std::string maxCode;
  std::string minCode;

  _CacheService_queryAllUserOnlineDevice_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  bool operator == (const CacheService_queryAllUserOnlineDevice_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryAllUserOnlineDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryAllUserOnlineDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryAllUserOnlineDevice_pargs {
 public:


  virtual ~CacheService_queryAllUserOnlineDevice_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryAllUserOnlineDevice_result__isset {
  _CacheService_queryAllUserOnlineDevice_result__isset() : success(false) {}
  bool success;
} _CacheService_queryAllUserOnlineDevice_result__isset;

class CacheService_queryAllUserOnlineDevice_result {
 public:

  CacheService_queryAllUserOnlineDevice_result() {
  }

  virtual ~CacheService_queryAllUserOnlineDevice_result() throw() {}

  std::map<std::string, std::set<std::string> >  success;

  _CacheService_queryAllUserOnlineDevice_result__isset __isset;

  void __set_success(const std::map<std::string, std::set<std::string> > & val) {
    success = val;
  }

  bool operator == (const CacheService_queryAllUserOnlineDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryAllUserOnlineDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryAllUserOnlineDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryAllUserOnlineDevice_presult__isset {
  _CacheService_queryAllUserOnlineDevice_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryAllUserOnlineDevice_presult__isset;

class CacheService_queryAllUserOnlineDevice_presult {
 public:


  virtual ~CacheService_queryAllUserOnlineDevice_presult() throw() {}

  std::map<std::string, std::set<std::string> > * success;

  _CacheService_queryAllUserOnlineDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveUserPolicy_args__isset {
  _CacheService_saveUserPolicy_args__isset() : maxCode(false), minCode(false), userPolicyCache(false) {}
  bool maxCode;
  bool minCode;
  bool userPolicyCache;
} _CacheService_saveUserPolicy_args__isset;

class CacheService_saveUserPolicy_args {
 public:

  CacheService_saveUserPolicy_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_saveUserPolicy_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::UserPolicyCache userPolicyCache;

  _CacheService_saveUserPolicy_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userPolicyCache(const  ::com::vrv::cems::service::base::bean::cache::UserPolicyCache& val) {
    userPolicyCache = val;
  }

  bool operator == (const CacheService_saveUserPolicy_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userPolicyCache == rhs.userPolicyCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveUserPolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveUserPolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveUserPolicy_pargs {
 public:


  virtual ~CacheService_saveUserPolicy_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::UserPolicyCache* userPolicyCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveUserPolicy_result__isset {
  _CacheService_saveUserPolicy_result__isset() : success(false) {}
  bool success;
} _CacheService_saveUserPolicy_result__isset;

class CacheService_saveUserPolicy_result {
 public:

  CacheService_saveUserPolicy_result() {
  }

  virtual ~CacheService_saveUserPolicy_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveUserPolicy_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveUserPolicy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveUserPolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveUserPolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveUserPolicy_presult__isset {
  _CacheService_saveUserPolicy_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveUserPolicy_presult__isset;

class CacheService_saveUserPolicy_presult {
 public:


  virtual ~CacheService_saveUserPolicy_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveUserPolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateUserPolicy_args__isset {
  _CacheService_updateUserPolicy_args__isset() : maxCode(false), minCode(false), userPolicyCache(false) {}
  bool maxCode;
  bool minCode;
  bool userPolicyCache;
} _CacheService_updateUserPolicy_args__isset;

class CacheService_updateUserPolicy_args {
 public:

  CacheService_updateUserPolicy_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_updateUserPolicy_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::UserPolicyCache userPolicyCache;

  _CacheService_updateUserPolicy_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userPolicyCache(const  ::com::vrv::cems::service::base::bean::cache::UserPolicyCache& val) {
    userPolicyCache = val;
  }

  bool operator == (const CacheService_updateUserPolicy_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userPolicyCache == rhs.userPolicyCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateUserPolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateUserPolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateUserPolicy_pargs {
 public:


  virtual ~CacheService_updateUserPolicy_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::UserPolicyCache* userPolicyCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateUserPolicy_result__isset {
  _CacheService_updateUserPolicy_result__isset() : success(false) {}
  bool success;
} _CacheService_updateUserPolicy_result__isset;

class CacheService_updateUserPolicy_result {
 public:

  CacheService_updateUserPolicy_result() {
  }

  virtual ~CacheService_updateUserPolicy_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateUserPolicy_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateUserPolicy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateUserPolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateUserPolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateUserPolicy_presult__isset {
  _CacheService_updateUserPolicy_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateUserPolicy_presult__isset;

class CacheService_updateUserPolicy_presult {
 public:


  virtual ~CacheService_updateUserPolicy_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateUserPolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryUserPolicyByUserOnlyId_args__isset {
  _CacheService_queryUserPolicyByUserOnlyId_args__isset() : maxCode(false), minCode(false), userOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool userOnlyId;
} _CacheService_queryUserPolicyByUserOnlyId_args__isset;

class CacheService_queryUserPolicyByUserOnlyId_args {
 public:

  CacheService_queryUserPolicyByUserOnlyId_args() : maxCode(), minCode(), userOnlyId() {
  }

  virtual ~CacheService_queryUserPolicyByUserOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string userOnlyId;

  _CacheService_queryUserPolicyByUserOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userOnlyId(const std::string& val) {
    userOnlyId = val;
  }

  bool operator == (const CacheService_queryUserPolicyByUserOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userOnlyId == rhs.userOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryUserPolicyByUserOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryUserPolicyByUserOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryUserPolicyByUserOnlyId_pargs {
 public:


  virtual ~CacheService_queryUserPolicyByUserOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* userOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryUserPolicyByUserOnlyId_result__isset {
  _CacheService_queryUserPolicyByUserOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_queryUserPolicyByUserOnlyId_result__isset;

class CacheService_queryUserPolicyByUserOnlyId_result {
 public:

  CacheService_queryUserPolicyByUserOnlyId_result() {
  }

  virtual ~CacheService_queryUserPolicyByUserOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::UserPolicyCache success;

  _CacheService_queryUserPolicyByUserOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::UserPolicyCache& val) {
    success = val;
  }

  bool operator == (const CacheService_queryUserPolicyByUserOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryUserPolicyByUserOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryUserPolicyByUserOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryUserPolicyByUserOnlyId_presult__isset {
  _CacheService_queryUserPolicyByUserOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryUserPolicyByUserOnlyId_presult__isset;

class CacheService_queryUserPolicyByUserOnlyId_presult {
 public:


  virtual ~CacheService_queryUserPolicyByUserOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::UserPolicyCache* success;

  _CacheService_queryUserPolicyByUserOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteUserPolicyByUserOnlyId_args__isset {
  _CacheService_deleteUserPolicyByUserOnlyId_args__isset() : maxCode(false), minCode(false), userOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool userOnlyId;
} _CacheService_deleteUserPolicyByUserOnlyId_args__isset;

class CacheService_deleteUserPolicyByUserOnlyId_args {
 public:

  CacheService_deleteUserPolicyByUserOnlyId_args() : maxCode(), minCode(), userOnlyId() {
  }

  virtual ~CacheService_deleteUserPolicyByUserOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string userOnlyId;

  _CacheService_deleteUserPolicyByUserOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userOnlyId(const std::string& val) {
    userOnlyId = val;
  }

  bool operator == (const CacheService_deleteUserPolicyByUserOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userOnlyId == rhs.userOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteUserPolicyByUserOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteUserPolicyByUserOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteUserPolicyByUserOnlyId_pargs {
 public:


  virtual ~CacheService_deleteUserPolicyByUserOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* userOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteUserPolicyByUserOnlyId_result__isset {
  _CacheService_deleteUserPolicyByUserOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteUserPolicyByUserOnlyId_result__isset;

class CacheService_deleteUserPolicyByUserOnlyId_result {
 public:

  CacheService_deleteUserPolicyByUserOnlyId_result() {
  }

  virtual ~CacheService_deleteUserPolicyByUserOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteUserPolicyByUserOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteUserPolicyByUserOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteUserPolicyByUserOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteUserPolicyByUserOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteUserPolicyByUserOnlyId_presult__isset {
  _CacheService_deleteUserPolicyByUserOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteUserPolicyByUserOnlyId_presult__isset;

class CacheService_deleteUserPolicyByUserOnlyId_presult {
 public:


  virtual ~CacheService_deleteUserPolicyByUserOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteUserPolicyByUserOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_batchSaveUserPolicy_args__isset {
  _CacheService_batchSaveUserPolicy_args__isset() : maxCode(false), minCode(false), userPolicyist(false) {}
  bool maxCode;
  bool minCode;
  bool userPolicyist;
} _CacheService_batchSaveUserPolicy_args__isset;

class CacheService_batchSaveUserPolicy_args {
 public:

  CacheService_batchSaveUserPolicy_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_batchSaveUserPolicy_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::vector<std::map<std::string, std::string> >  userPolicyist;

  _CacheService_batchSaveUserPolicy_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userPolicyist(const std::vector<std::map<std::string, std::string> > & val) {
    userPolicyist = val;
  }

  bool operator == (const CacheService_batchSaveUserPolicy_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userPolicyist == rhs.userPolicyist))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchSaveUserPolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchSaveUserPolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_batchSaveUserPolicy_pargs {
 public:


  virtual ~CacheService_batchSaveUserPolicy_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::vector<std::map<std::string, std::string> > * userPolicyist;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchSaveUserPolicy_result__isset {
  _CacheService_batchSaveUserPolicy_result__isset() : success(false) {}
  bool success;
} _CacheService_batchSaveUserPolicy_result__isset;

class CacheService_batchSaveUserPolicy_result {
 public:

  CacheService_batchSaveUserPolicy_result() {
  }

  virtual ~CacheService_batchSaveUserPolicy_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_batchSaveUserPolicy_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_batchSaveUserPolicy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchSaveUserPolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchSaveUserPolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchSaveUserPolicy_presult__isset {
  _CacheService_batchSaveUserPolicy_presult__isset() : success(false) {}
  bool success;
} _CacheService_batchSaveUserPolicy_presult__isset;

class CacheService_batchSaveUserPolicy_presult {
 public:


  virtual ~CacheService_batchSaveUserPolicy_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_batchSaveUserPolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveProductCInstallPack_args__isset {
  _CacheService_saveProductCInstallPack_args__isset() : maxCode(false), minCode(false), cInstallPackCache(false) {}
  bool maxCode;
  bool minCode;
  bool cInstallPackCache;
} _CacheService_saveProductCInstallPack_args__isset;

class CacheService_saveProductCInstallPack_args {
 public:

  CacheService_saveProductCInstallPack_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_saveProductCInstallPack_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::CInstallPackCache cInstallPackCache;

  _CacheService_saveProductCInstallPack_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_cInstallPackCache(const  ::com::vrv::cems::service::base::bean::cache::CInstallPackCache& val) {
    cInstallPackCache = val;
  }

  bool operator == (const CacheService_saveProductCInstallPack_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(cInstallPackCache == rhs.cInstallPackCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveProductCInstallPack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveProductCInstallPack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveProductCInstallPack_pargs {
 public:


  virtual ~CacheService_saveProductCInstallPack_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::CInstallPackCache* cInstallPackCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveProductCInstallPack_result__isset {
  _CacheService_saveProductCInstallPack_result__isset() : success(false) {}
  bool success;
} _CacheService_saveProductCInstallPack_result__isset;

class CacheService_saveProductCInstallPack_result {
 public:

  CacheService_saveProductCInstallPack_result() {
  }

  virtual ~CacheService_saveProductCInstallPack_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveProductCInstallPack_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveProductCInstallPack_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveProductCInstallPack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveProductCInstallPack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveProductCInstallPack_presult__isset {
  _CacheService_saveProductCInstallPack_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveProductCInstallPack_presult__isset;

class CacheService_saveProductCInstallPack_presult {
 public:


  virtual ~CacheService_saveProductCInstallPack_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveProductCInstallPack_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateProductCInstallPack_args__isset {
  _CacheService_updateProductCInstallPack_args__isset() : maxCode(false), minCode(false), cInstallPackCache(false) {}
  bool maxCode;
  bool minCode;
  bool cInstallPackCache;
} _CacheService_updateProductCInstallPack_args__isset;

class CacheService_updateProductCInstallPack_args {
 public:

  CacheService_updateProductCInstallPack_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_updateProductCInstallPack_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::CInstallPackCache cInstallPackCache;

  _CacheService_updateProductCInstallPack_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_cInstallPackCache(const  ::com::vrv::cems::service::base::bean::cache::CInstallPackCache& val) {
    cInstallPackCache = val;
  }

  bool operator == (const CacheService_updateProductCInstallPack_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(cInstallPackCache == rhs.cInstallPackCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateProductCInstallPack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateProductCInstallPack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateProductCInstallPack_pargs {
 public:


  virtual ~CacheService_updateProductCInstallPack_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::CInstallPackCache* cInstallPackCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateProductCInstallPack_result__isset {
  _CacheService_updateProductCInstallPack_result__isset() : success(false) {}
  bool success;
} _CacheService_updateProductCInstallPack_result__isset;

class CacheService_updateProductCInstallPack_result {
 public:

  CacheService_updateProductCInstallPack_result() {
  }

  virtual ~CacheService_updateProductCInstallPack_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateProductCInstallPack_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateProductCInstallPack_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateProductCInstallPack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateProductCInstallPack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateProductCInstallPack_presult__isset {
  _CacheService_updateProductCInstallPack_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateProductCInstallPack_presult__isset;

class CacheService_updateProductCInstallPack_presult {
 public:


  virtual ~CacheService_updateProductCInstallPack_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateProductCInstallPack_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateProductCInstallPackByField_args__isset {
  _CacheService_updateProductCInstallPackByField_args__isset() : maxCode(false), minCode(false), cInstallPackId(false), fieldValueMap(false) {}
  bool maxCode;
  bool minCode;
  bool cInstallPackId;
  bool fieldValueMap;
} _CacheService_updateProductCInstallPackByField_args__isset;

class CacheService_updateProductCInstallPackByField_args {
 public:

  CacheService_updateProductCInstallPackByField_args() : maxCode(), minCode(), cInstallPackId() {
  }

  virtual ~CacheService_updateProductCInstallPackByField_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string cInstallPackId;
  std::map<std::string, std::string>  fieldValueMap;

  _CacheService_updateProductCInstallPackByField_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_cInstallPackId(const std::string& val) {
    cInstallPackId = val;
  }

  void __set_fieldValueMap(const std::map<std::string, std::string> & val) {
    fieldValueMap = val;
  }

  bool operator == (const CacheService_updateProductCInstallPackByField_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(cInstallPackId == rhs.cInstallPackId))
      return false;
    if (!(fieldValueMap == rhs.fieldValueMap))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateProductCInstallPackByField_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateProductCInstallPackByField_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateProductCInstallPackByField_pargs {
 public:


  virtual ~CacheService_updateProductCInstallPackByField_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* cInstallPackId;
  const std::map<std::string, std::string> * fieldValueMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateProductCInstallPackByField_result__isset {
  _CacheService_updateProductCInstallPackByField_result__isset() : success(false) {}
  bool success;
} _CacheService_updateProductCInstallPackByField_result__isset;

class CacheService_updateProductCInstallPackByField_result {
 public:

  CacheService_updateProductCInstallPackByField_result() {
  }

  virtual ~CacheService_updateProductCInstallPackByField_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateProductCInstallPackByField_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateProductCInstallPackByField_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateProductCInstallPackByField_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateProductCInstallPackByField_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateProductCInstallPackByField_presult__isset {
  _CacheService_updateProductCInstallPackByField_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateProductCInstallPackByField_presult__isset;

class CacheService_updateProductCInstallPackByField_presult {
 public:


  virtual ~CacheService_updateProductCInstallPackByField_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateProductCInstallPackByField_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryProductCInstallPackById_args__isset {
  _CacheService_queryProductCInstallPackById_args__isset() : maxCode(false), minCode(false), cInstallPackId(false) {}
  bool maxCode;
  bool minCode;
  bool cInstallPackId;
} _CacheService_queryProductCInstallPackById_args__isset;

class CacheService_queryProductCInstallPackById_args {
 public:

  CacheService_queryProductCInstallPackById_args() : maxCode(), minCode(), cInstallPackId() {
  }

  virtual ~CacheService_queryProductCInstallPackById_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string cInstallPackId;

  _CacheService_queryProductCInstallPackById_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_cInstallPackId(const std::string& val) {
    cInstallPackId = val;
  }

  bool operator == (const CacheService_queryProductCInstallPackById_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(cInstallPackId == rhs.cInstallPackId))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryProductCInstallPackById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryProductCInstallPackById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryProductCInstallPackById_pargs {
 public:


  virtual ~CacheService_queryProductCInstallPackById_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* cInstallPackId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryProductCInstallPackById_result__isset {
  _CacheService_queryProductCInstallPackById_result__isset() : success(false) {}
  bool success;
} _CacheService_queryProductCInstallPackById_result__isset;

class CacheService_queryProductCInstallPackById_result {
 public:

  CacheService_queryProductCInstallPackById_result() {
  }

  virtual ~CacheService_queryProductCInstallPackById_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::CInstallPackCache success;

  _CacheService_queryProductCInstallPackById_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::CInstallPackCache& val) {
    success = val;
  }

  bool operator == (const CacheService_queryProductCInstallPackById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryProductCInstallPackById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryProductCInstallPackById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryProductCInstallPackById_presult__isset {
  _CacheService_queryProductCInstallPackById_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryProductCInstallPackById_presult__isset;

class CacheService_queryProductCInstallPackById_presult {
 public:


  virtual ~CacheService_queryProductCInstallPackById_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::CInstallPackCache* success;

  _CacheService_queryProductCInstallPackById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteProductCInstallPackById_args__isset {
  _CacheService_deleteProductCInstallPackById_args__isset() : maxCode(false), minCode(false), cInstallPackId(false) {}
  bool maxCode;
  bool minCode;
  bool cInstallPackId;
} _CacheService_deleteProductCInstallPackById_args__isset;

class CacheService_deleteProductCInstallPackById_args {
 public:

  CacheService_deleteProductCInstallPackById_args() : maxCode(), minCode(), cInstallPackId() {
  }

  virtual ~CacheService_deleteProductCInstallPackById_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string cInstallPackId;

  _CacheService_deleteProductCInstallPackById_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_cInstallPackId(const std::string& val) {
    cInstallPackId = val;
  }

  bool operator == (const CacheService_deleteProductCInstallPackById_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(cInstallPackId == rhs.cInstallPackId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteProductCInstallPackById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteProductCInstallPackById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteProductCInstallPackById_pargs {
 public:


  virtual ~CacheService_deleteProductCInstallPackById_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* cInstallPackId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteProductCInstallPackById_result__isset {
  _CacheService_deleteProductCInstallPackById_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteProductCInstallPackById_result__isset;

class CacheService_deleteProductCInstallPackById_result {
 public:

  CacheService_deleteProductCInstallPackById_result() {
  }

  virtual ~CacheService_deleteProductCInstallPackById_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteProductCInstallPackById_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteProductCInstallPackById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteProductCInstallPackById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteProductCInstallPackById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteProductCInstallPackById_presult__isset {
  _CacheService_deleteProductCInstallPackById_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteProductCInstallPackById_presult__isset;

class CacheService_deleteProductCInstallPackById_presult {
 public:


  virtual ~CacheService_deleteProductCInstallPackById_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteProductCInstallPackById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_savePolicy_args__isset {
  _CacheService_savePolicy_args__isset() : maxCode(false), minCode(false), policyCache(false) {}
  bool maxCode;
  bool minCode;
  bool policyCache;
} _CacheService_savePolicy_args__isset;

class CacheService_savePolicy_args {
 public:

  CacheService_savePolicy_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_savePolicy_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::PolicyCache policyCache;

  _CacheService_savePolicy_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_policyCache(const  ::com::vrv::cems::service::base::bean::cache::PolicyCache& val) {
    policyCache = val;
  }

  bool operator == (const CacheService_savePolicy_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(policyCache == rhs.policyCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_savePolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_savePolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_savePolicy_pargs {
 public:


  virtual ~CacheService_savePolicy_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::PolicyCache* policyCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_savePolicy_result__isset {
  _CacheService_savePolicy_result__isset() : success(false) {}
  bool success;
} _CacheService_savePolicy_result__isset;

class CacheService_savePolicy_result {
 public:

  CacheService_savePolicy_result() {
  }

  virtual ~CacheService_savePolicy_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_savePolicy_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_savePolicy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_savePolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_savePolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_savePolicy_presult__isset {
  _CacheService_savePolicy_presult__isset() : success(false) {}
  bool success;
} _CacheService_savePolicy_presult__isset;

class CacheService_savePolicy_presult {
 public:


  virtual ~CacheService_savePolicy_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_savePolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updatePolicy_args__isset {
  _CacheService_updatePolicy_args__isset() : maxCode(false), minCode(false), policyCache(false) {}
  bool maxCode;
  bool minCode;
  bool policyCache;
} _CacheService_updatePolicy_args__isset;

class CacheService_updatePolicy_args {
 public:

  CacheService_updatePolicy_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_updatePolicy_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::PolicyCache policyCache;

  _CacheService_updatePolicy_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_policyCache(const  ::com::vrv::cems::service::base::bean::cache::PolicyCache& val) {
    policyCache = val;
  }

  bool operator == (const CacheService_updatePolicy_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(policyCache == rhs.policyCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_updatePolicy_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updatePolicy_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updatePolicy_pargs {
 public:


  virtual ~CacheService_updatePolicy_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::PolicyCache* policyCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updatePolicy_result__isset {
  _CacheService_updatePolicy_result__isset() : success(false) {}
  bool success;
} _CacheService_updatePolicy_result__isset;

class CacheService_updatePolicy_result {
 public:

  CacheService_updatePolicy_result() {
  }

  virtual ~CacheService_updatePolicy_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updatePolicy_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updatePolicy_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updatePolicy_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updatePolicy_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updatePolicy_presult__isset {
  _CacheService_updatePolicy_presult__isset() : success(false) {}
  bool success;
} _CacheService_updatePolicy_presult__isset;

class CacheService_updatePolicy_presult {
 public:


  virtual ~CacheService_updatePolicy_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updatePolicy_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updatePolicyByField_args__isset {
  _CacheService_updatePolicyByField_args__isset() : maxCode(false), minCode(false), policyId(false), fieldValueMap(false) {}
  bool maxCode;
  bool minCode;
  bool policyId;
  bool fieldValueMap;
} _CacheService_updatePolicyByField_args__isset;

class CacheService_updatePolicyByField_args {
 public:

  CacheService_updatePolicyByField_args() : maxCode(), minCode(), policyId() {
  }

  virtual ~CacheService_updatePolicyByField_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string policyId;
  std::map<std::string, std::string>  fieldValueMap;

  _CacheService_updatePolicyByField_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_policyId(const std::string& val) {
    policyId = val;
  }

  void __set_fieldValueMap(const std::map<std::string, std::string> & val) {
    fieldValueMap = val;
  }

  bool operator == (const CacheService_updatePolicyByField_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(policyId == rhs.policyId))
      return false;
    if (!(fieldValueMap == rhs.fieldValueMap))
      return false;
    return true;
  }
  bool operator != (const CacheService_updatePolicyByField_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updatePolicyByField_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updatePolicyByField_pargs {
 public:


  virtual ~CacheService_updatePolicyByField_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* policyId;
  const std::map<std::string, std::string> * fieldValueMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updatePolicyByField_result__isset {
  _CacheService_updatePolicyByField_result__isset() : success(false) {}
  bool success;
} _CacheService_updatePolicyByField_result__isset;

class CacheService_updatePolicyByField_result {
 public:

  CacheService_updatePolicyByField_result() {
  }

  virtual ~CacheService_updatePolicyByField_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updatePolicyByField_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updatePolicyByField_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updatePolicyByField_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updatePolicyByField_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updatePolicyByField_presult__isset {
  _CacheService_updatePolicyByField_presult__isset() : success(false) {}
  bool success;
} _CacheService_updatePolicyByField_presult__isset;

class CacheService_updatePolicyByField_presult {
 public:


  virtual ~CacheService_updatePolicyByField_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updatePolicyByField_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryPolicyByPolicyId_args__isset {
  _CacheService_queryPolicyByPolicyId_args__isset() : maxCode(false), minCode(false), policyId(false) {}
  bool maxCode;
  bool minCode;
  bool policyId;
} _CacheService_queryPolicyByPolicyId_args__isset;

class CacheService_queryPolicyByPolicyId_args {
 public:

  CacheService_queryPolicyByPolicyId_args() : maxCode(), minCode(), policyId() {
  }

  virtual ~CacheService_queryPolicyByPolicyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string policyId;

  _CacheService_queryPolicyByPolicyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_policyId(const std::string& val) {
    policyId = val;
  }

  bool operator == (const CacheService_queryPolicyByPolicyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(policyId == rhs.policyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryPolicyByPolicyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryPolicyByPolicyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryPolicyByPolicyId_pargs {
 public:


  virtual ~CacheService_queryPolicyByPolicyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* policyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryPolicyByPolicyId_result__isset {
  _CacheService_queryPolicyByPolicyId_result__isset() : success(false) {}
  bool success;
} _CacheService_queryPolicyByPolicyId_result__isset;

class CacheService_queryPolicyByPolicyId_result {
 public:

  CacheService_queryPolicyByPolicyId_result() {
  }

  virtual ~CacheService_queryPolicyByPolicyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::PolicyCache success;

  _CacheService_queryPolicyByPolicyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::PolicyCache& val) {
    success = val;
  }

  bool operator == (const CacheService_queryPolicyByPolicyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryPolicyByPolicyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryPolicyByPolicyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryPolicyByPolicyId_presult__isset {
  _CacheService_queryPolicyByPolicyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryPolicyByPolicyId_presult__isset;

class CacheService_queryPolicyByPolicyId_presult {
 public:


  virtual ~CacheService_queryPolicyByPolicyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::PolicyCache* success;

  _CacheService_queryPolicyByPolicyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deletePolicyByPolicyId_args__isset {
  _CacheService_deletePolicyByPolicyId_args__isset() : maxCode(false), minCode(false), policyId(false) {}
  bool maxCode;
  bool minCode;
  bool policyId;
} _CacheService_deletePolicyByPolicyId_args__isset;

class CacheService_deletePolicyByPolicyId_args {
 public:

  CacheService_deletePolicyByPolicyId_args() : maxCode(), minCode(), policyId() {
  }

  virtual ~CacheService_deletePolicyByPolicyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string policyId;

  _CacheService_deletePolicyByPolicyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_policyId(const std::string& val) {
    policyId = val;
  }

  bool operator == (const CacheService_deletePolicyByPolicyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(policyId == rhs.policyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deletePolicyByPolicyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deletePolicyByPolicyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deletePolicyByPolicyId_pargs {
 public:


  virtual ~CacheService_deletePolicyByPolicyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* policyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deletePolicyByPolicyId_result__isset {
  _CacheService_deletePolicyByPolicyId_result__isset() : success(false) {}
  bool success;
} _CacheService_deletePolicyByPolicyId_result__isset;

class CacheService_deletePolicyByPolicyId_result {
 public:

  CacheService_deletePolicyByPolicyId_result() {
  }

  virtual ~CacheService_deletePolicyByPolicyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deletePolicyByPolicyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deletePolicyByPolicyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deletePolicyByPolicyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deletePolicyByPolicyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deletePolicyByPolicyId_presult__isset {
  _CacheService_deletePolicyByPolicyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_deletePolicyByPolicyId_presult__isset;

class CacheService_deletePolicyByPolicyId_presult {
 public:


  virtual ~CacheService_deletePolicyByPolicyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deletePolicyByPolicyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveIPMAC2DevOnlyId_args__isset {
  _CacheService_saveIPMAC2DevOnlyId_args__isset() : maxCode(false), minCode(false), ip(false), mac(false), devOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool ip;
  bool mac;
  bool devOnlyId;
} _CacheService_saveIPMAC2DevOnlyId_args__isset;

class CacheService_saveIPMAC2DevOnlyId_args {
 public:

  CacheService_saveIPMAC2DevOnlyId_args() : maxCode(), minCode(), ip(), mac(), devOnlyId() {
  }

  virtual ~CacheService_saveIPMAC2DevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string ip;
  std::string mac;
  std::string devOnlyId;

  _CacheService_saveIPMAC2DevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_mac(const std::string& val) {
    mac = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  bool operator == (const CacheService_saveIPMAC2DevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(ip == rhs.ip))
      return false;
    if (!(mac == rhs.mac))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveIPMAC2DevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveIPMAC2DevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveIPMAC2DevOnlyId_pargs {
 public:


  virtual ~CacheService_saveIPMAC2DevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* ip;
  const std::string* mac;
  const std::string* devOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveIPMAC2DevOnlyId_result__isset {
  _CacheService_saveIPMAC2DevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_saveIPMAC2DevOnlyId_result__isset;

class CacheService_saveIPMAC2DevOnlyId_result {
 public:

  CacheService_saveIPMAC2DevOnlyId_result() {
  }

  virtual ~CacheService_saveIPMAC2DevOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveIPMAC2DevOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveIPMAC2DevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveIPMAC2DevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveIPMAC2DevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveIPMAC2DevOnlyId_presult__isset {
  _CacheService_saveIPMAC2DevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveIPMAC2DevOnlyId_presult__isset;

class CacheService_saveIPMAC2DevOnlyId_presult {
 public:


  virtual ~CacheService_saveIPMAC2DevOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveIPMAC2DevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateIPMAC2DevOnlyId_args__isset {
  _CacheService_updateIPMAC2DevOnlyId_args__isset() : maxCode(false), minCode(false), ip(false), mac(false), devOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool ip;
  bool mac;
  bool devOnlyId;
} _CacheService_updateIPMAC2DevOnlyId_args__isset;

class CacheService_updateIPMAC2DevOnlyId_args {
 public:

  CacheService_updateIPMAC2DevOnlyId_args() : maxCode(), minCode(), ip(), mac(), devOnlyId() {
  }

  virtual ~CacheService_updateIPMAC2DevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string ip;
  std::string mac;
  std::string devOnlyId;

  _CacheService_updateIPMAC2DevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_mac(const std::string& val) {
    mac = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  bool operator == (const CacheService_updateIPMAC2DevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(ip == rhs.ip))
      return false;
    if (!(mac == rhs.mac))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateIPMAC2DevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateIPMAC2DevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateIPMAC2DevOnlyId_pargs {
 public:


  virtual ~CacheService_updateIPMAC2DevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* ip;
  const std::string* mac;
  const std::string* devOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateIPMAC2DevOnlyId_result__isset {
  _CacheService_updateIPMAC2DevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_updateIPMAC2DevOnlyId_result__isset;

class CacheService_updateIPMAC2DevOnlyId_result {
 public:

  CacheService_updateIPMAC2DevOnlyId_result() {
  }

  virtual ~CacheService_updateIPMAC2DevOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateIPMAC2DevOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateIPMAC2DevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateIPMAC2DevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateIPMAC2DevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateIPMAC2DevOnlyId_presult__isset {
  _CacheService_updateIPMAC2DevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateIPMAC2DevOnlyId_presult__isset;

class CacheService_updateIPMAC2DevOnlyId_presult {
 public:


  virtual ~CacheService_updateIPMAC2DevOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateIPMAC2DevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryIPMAC2DevOnlyId_args__isset {
  _CacheService_queryIPMAC2DevOnlyId_args__isset() : maxCode(false), minCode(false), ip(false), mac(false) {}
  bool maxCode;
  bool minCode;
  bool ip;
  bool mac;
} _CacheService_queryIPMAC2DevOnlyId_args__isset;

class CacheService_queryIPMAC2DevOnlyId_args {
 public:

  CacheService_queryIPMAC2DevOnlyId_args() : maxCode(), minCode(), ip(), mac() {
  }

  virtual ~CacheService_queryIPMAC2DevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string ip;
  std::string mac;

  _CacheService_queryIPMAC2DevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_mac(const std::string& val) {
    mac = val;
  }

  bool operator == (const CacheService_queryIPMAC2DevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(ip == rhs.ip))
      return false;
    if (!(mac == rhs.mac))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryIPMAC2DevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryIPMAC2DevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryIPMAC2DevOnlyId_pargs {
 public:


  virtual ~CacheService_queryIPMAC2DevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* ip;
  const std::string* mac;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryIPMAC2DevOnlyId_result__isset {
  _CacheService_queryIPMAC2DevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_queryIPMAC2DevOnlyId_result__isset;

class CacheService_queryIPMAC2DevOnlyId_result {
 public:

  CacheService_queryIPMAC2DevOnlyId_result() : success() {
  }

  virtual ~CacheService_queryIPMAC2DevOnlyId_result() throw() {}

  std::string success;

  _CacheService_queryIPMAC2DevOnlyId_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const CacheService_queryIPMAC2DevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryIPMAC2DevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryIPMAC2DevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryIPMAC2DevOnlyId_presult__isset {
  _CacheService_queryIPMAC2DevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryIPMAC2DevOnlyId_presult__isset;

class CacheService_queryIPMAC2DevOnlyId_presult {
 public:


  virtual ~CacheService_queryIPMAC2DevOnlyId_presult() throw() {}

  std::string* success;

  _CacheService_queryIPMAC2DevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteIPMAC2DevOnlyId_args__isset {
  _CacheService_deleteIPMAC2DevOnlyId_args__isset() : maxCode(false), minCode(false), ip(false), mac(false) {}
  bool maxCode;
  bool minCode;
  bool ip;
  bool mac;
} _CacheService_deleteIPMAC2DevOnlyId_args__isset;

class CacheService_deleteIPMAC2DevOnlyId_args {
 public:

  CacheService_deleteIPMAC2DevOnlyId_args() : maxCode(), minCode(), ip(), mac() {
  }

  virtual ~CacheService_deleteIPMAC2DevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string ip;
  std::string mac;

  _CacheService_deleteIPMAC2DevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_mac(const std::string& val) {
    mac = val;
  }

  bool operator == (const CacheService_deleteIPMAC2DevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(ip == rhs.ip))
      return false;
    if (!(mac == rhs.mac))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteIPMAC2DevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteIPMAC2DevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteIPMAC2DevOnlyId_pargs {
 public:


  virtual ~CacheService_deleteIPMAC2DevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* ip;
  const std::string* mac;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteIPMAC2DevOnlyId_result__isset {
  _CacheService_deleteIPMAC2DevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteIPMAC2DevOnlyId_result__isset;

class CacheService_deleteIPMAC2DevOnlyId_result {
 public:

  CacheService_deleteIPMAC2DevOnlyId_result() {
  }

  virtual ~CacheService_deleteIPMAC2DevOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteIPMAC2DevOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteIPMAC2DevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteIPMAC2DevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteIPMAC2DevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteIPMAC2DevOnlyId_presult__isset {
  _CacheService_deleteIPMAC2DevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteIPMAC2DevOnlyId_presult__isset;

class CacheService_deleteIPMAC2DevOnlyId_presult {
 public:


  virtual ~CacheService_deleteIPMAC2DevOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteIPMAC2DevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveIP2DevOnlyId_args__isset {
  _CacheService_saveIP2DevOnlyId_args__isset() : maxCode(false), minCode(false), ip(false), devOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool ip;
  bool devOnlyId;
} _CacheService_saveIP2DevOnlyId_args__isset;

class CacheService_saveIP2DevOnlyId_args {
 public:

  CacheService_saveIP2DevOnlyId_args() : maxCode(), minCode(), ip(), devOnlyId() {
  }

  virtual ~CacheService_saveIP2DevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string ip;
  std::string devOnlyId;

  _CacheService_saveIP2DevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  bool operator == (const CacheService_saveIP2DevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(ip == rhs.ip))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveIP2DevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveIP2DevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveIP2DevOnlyId_pargs {
 public:


  virtual ~CacheService_saveIP2DevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* ip;
  const std::string* devOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveIP2DevOnlyId_result__isset {
  _CacheService_saveIP2DevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_saveIP2DevOnlyId_result__isset;

class CacheService_saveIP2DevOnlyId_result {
 public:

  CacheService_saveIP2DevOnlyId_result() {
  }

  virtual ~CacheService_saveIP2DevOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveIP2DevOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveIP2DevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveIP2DevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveIP2DevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveIP2DevOnlyId_presult__isset {
  _CacheService_saveIP2DevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveIP2DevOnlyId_presult__isset;

class CacheService_saveIP2DevOnlyId_presult {
 public:


  virtual ~CacheService_saveIP2DevOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveIP2DevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateIP2DevOnlyId_args__isset {
  _CacheService_updateIP2DevOnlyId_args__isset() : maxCode(false), minCode(false), ip(false), devOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool ip;
  bool devOnlyId;
} _CacheService_updateIP2DevOnlyId_args__isset;

class CacheService_updateIP2DevOnlyId_args {
 public:

  CacheService_updateIP2DevOnlyId_args() : maxCode(), minCode(), ip(), devOnlyId() {
  }

  virtual ~CacheService_updateIP2DevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string ip;
  std::string devOnlyId;

  _CacheService_updateIP2DevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  bool operator == (const CacheService_updateIP2DevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(ip == rhs.ip))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateIP2DevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateIP2DevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateIP2DevOnlyId_pargs {
 public:


  virtual ~CacheService_updateIP2DevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* ip;
  const std::string* devOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateIP2DevOnlyId_result__isset {
  _CacheService_updateIP2DevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_updateIP2DevOnlyId_result__isset;

class CacheService_updateIP2DevOnlyId_result {
 public:

  CacheService_updateIP2DevOnlyId_result() {
  }

  virtual ~CacheService_updateIP2DevOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateIP2DevOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateIP2DevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateIP2DevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateIP2DevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateIP2DevOnlyId_presult__isset {
  _CacheService_updateIP2DevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateIP2DevOnlyId_presult__isset;

class CacheService_updateIP2DevOnlyId_presult {
 public:


  virtual ~CacheService_updateIP2DevOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateIP2DevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryIP2DevOnlyId_args__isset {
  _CacheService_queryIP2DevOnlyId_args__isset() : maxCode(false), minCode(false), ip(false) {}
  bool maxCode;
  bool minCode;
  bool ip;
} _CacheService_queryIP2DevOnlyId_args__isset;

class CacheService_queryIP2DevOnlyId_args {
 public:

  CacheService_queryIP2DevOnlyId_args() : maxCode(), minCode(), ip() {
  }

  virtual ~CacheService_queryIP2DevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string ip;

  _CacheService_queryIP2DevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  bool operator == (const CacheService_queryIP2DevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryIP2DevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryIP2DevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryIP2DevOnlyId_pargs {
 public:


  virtual ~CacheService_queryIP2DevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryIP2DevOnlyId_result__isset {
  _CacheService_queryIP2DevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_queryIP2DevOnlyId_result__isset;

class CacheService_queryIP2DevOnlyId_result {
 public:

  CacheService_queryIP2DevOnlyId_result() : success() {
  }

  virtual ~CacheService_queryIP2DevOnlyId_result() throw() {}

  std::string success;

  _CacheService_queryIP2DevOnlyId_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const CacheService_queryIP2DevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryIP2DevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryIP2DevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryIP2DevOnlyId_presult__isset {
  _CacheService_queryIP2DevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryIP2DevOnlyId_presult__isset;

class CacheService_queryIP2DevOnlyId_presult {
 public:


  virtual ~CacheService_queryIP2DevOnlyId_presult() throw() {}

  std::string* success;

  _CacheService_queryIP2DevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteIP2DevOnlyId_args__isset {
  _CacheService_deleteIP2DevOnlyId_args__isset() : maxCode(false), minCode(false), ip(false) {}
  bool maxCode;
  bool minCode;
  bool ip;
} _CacheService_deleteIP2DevOnlyId_args__isset;

class CacheService_deleteIP2DevOnlyId_args {
 public:

  CacheService_deleteIP2DevOnlyId_args() : maxCode(), minCode(), ip() {
  }

  virtual ~CacheService_deleteIP2DevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string ip;

  _CacheService_deleteIP2DevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  bool operator == (const CacheService_deleteIP2DevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(ip == rhs.ip))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteIP2DevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteIP2DevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteIP2DevOnlyId_pargs {
 public:


  virtual ~CacheService_deleteIP2DevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* ip;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteIP2DevOnlyId_result__isset {
  _CacheService_deleteIP2DevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteIP2DevOnlyId_result__isset;

class CacheService_deleteIP2DevOnlyId_result {
 public:

  CacheService_deleteIP2DevOnlyId_result() {
  }

  virtual ~CacheService_deleteIP2DevOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteIP2DevOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteIP2DevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteIP2DevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteIP2DevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteIP2DevOnlyId_presult__isset {
  _CacheService_deleteIP2DevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteIP2DevOnlyId_presult__isset;

class CacheService_deleteIP2DevOnlyId_presult {
 public:


  virtual ~CacheService_deleteIP2DevOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteIP2DevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveProductCUpgradePack_args__isset {
  _CacheService_saveProductCUpgradePack_args__isset() : maxCode(false), minCode(false), cUpgradePackCache(false) {}
  bool maxCode;
  bool minCode;
  bool cUpgradePackCache;
} _CacheService_saveProductCUpgradePack_args__isset;

class CacheService_saveProductCUpgradePack_args {
 public:

  CacheService_saveProductCUpgradePack_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_saveProductCUpgradePack_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache cUpgradePackCache;

  _CacheService_saveProductCUpgradePack_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_cUpgradePackCache(const  ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache& val) {
    cUpgradePackCache = val;
  }

  bool operator == (const CacheService_saveProductCUpgradePack_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(cUpgradePackCache == rhs.cUpgradePackCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveProductCUpgradePack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveProductCUpgradePack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveProductCUpgradePack_pargs {
 public:


  virtual ~CacheService_saveProductCUpgradePack_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache* cUpgradePackCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveProductCUpgradePack_result__isset {
  _CacheService_saveProductCUpgradePack_result__isset() : success(false) {}
  bool success;
} _CacheService_saveProductCUpgradePack_result__isset;

class CacheService_saveProductCUpgradePack_result {
 public:

  CacheService_saveProductCUpgradePack_result() {
  }

  virtual ~CacheService_saveProductCUpgradePack_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveProductCUpgradePack_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveProductCUpgradePack_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveProductCUpgradePack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveProductCUpgradePack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveProductCUpgradePack_presult__isset {
  _CacheService_saveProductCUpgradePack_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveProductCUpgradePack_presult__isset;

class CacheService_saveProductCUpgradePack_presult {
 public:


  virtual ~CacheService_saveProductCUpgradePack_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveProductCUpgradePack_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateProductCUpgradePack_args__isset {
  _CacheService_updateProductCUpgradePack_args__isset() : maxCode(false), minCode(false), cUpgradePackCache(false) {}
  bool maxCode;
  bool minCode;
  bool cUpgradePackCache;
} _CacheService_updateProductCUpgradePack_args__isset;

class CacheService_updateProductCUpgradePack_args {
 public:

  CacheService_updateProductCUpgradePack_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_updateProductCUpgradePack_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache cUpgradePackCache;

  _CacheService_updateProductCUpgradePack_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_cUpgradePackCache(const  ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache& val) {
    cUpgradePackCache = val;
  }

  bool operator == (const CacheService_updateProductCUpgradePack_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(cUpgradePackCache == rhs.cUpgradePackCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateProductCUpgradePack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateProductCUpgradePack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateProductCUpgradePack_pargs {
 public:


  virtual ~CacheService_updateProductCUpgradePack_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache* cUpgradePackCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateProductCUpgradePack_result__isset {
  _CacheService_updateProductCUpgradePack_result__isset() : success(false) {}
  bool success;
} _CacheService_updateProductCUpgradePack_result__isset;

class CacheService_updateProductCUpgradePack_result {
 public:

  CacheService_updateProductCUpgradePack_result() {
  }

  virtual ~CacheService_updateProductCUpgradePack_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateProductCUpgradePack_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateProductCUpgradePack_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateProductCUpgradePack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateProductCUpgradePack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateProductCUpgradePack_presult__isset {
  _CacheService_updateProductCUpgradePack_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateProductCUpgradePack_presult__isset;

class CacheService_updateProductCUpgradePack_presult {
 public:


  virtual ~CacheService_updateProductCUpgradePack_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateProductCUpgradePack_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateProductCUpgradePackByField_args__isset {
  _CacheService_updateProductCUpgradePackByField_args__isset() : maxCode(false), minCode(false), cUpgradePackId(false), fieldValueMap(false) {}
  bool maxCode;
  bool minCode;
  bool cUpgradePackId;
  bool fieldValueMap;
} _CacheService_updateProductCUpgradePackByField_args__isset;

class CacheService_updateProductCUpgradePackByField_args {
 public:

  CacheService_updateProductCUpgradePackByField_args() : maxCode(), minCode(), cUpgradePackId() {
  }

  virtual ~CacheService_updateProductCUpgradePackByField_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string cUpgradePackId;
  std::map<std::string, std::string>  fieldValueMap;

  _CacheService_updateProductCUpgradePackByField_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_cUpgradePackId(const std::string& val) {
    cUpgradePackId = val;
  }

  void __set_fieldValueMap(const std::map<std::string, std::string> & val) {
    fieldValueMap = val;
  }

  bool operator == (const CacheService_updateProductCUpgradePackByField_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(cUpgradePackId == rhs.cUpgradePackId))
      return false;
    if (!(fieldValueMap == rhs.fieldValueMap))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateProductCUpgradePackByField_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateProductCUpgradePackByField_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateProductCUpgradePackByField_pargs {
 public:


  virtual ~CacheService_updateProductCUpgradePackByField_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* cUpgradePackId;
  const std::map<std::string, std::string> * fieldValueMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateProductCUpgradePackByField_result__isset {
  _CacheService_updateProductCUpgradePackByField_result__isset() : success(false) {}
  bool success;
} _CacheService_updateProductCUpgradePackByField_result__isset;

class CacheService_updateProductCUpgradePackByField_result {
 public:

  CacheService_updateProductCUpgradePackByField_result() {
  }

  virtual ~CacheService_updateProductCUpgradePackByField_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateProductCUpgradePackByField_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateProductCUpgradePackByField_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateProductCUpgradePackByField_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateProductCUpgradePackByField_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateProductCUpgradePackByField_presult__isset {
  _CacheService_updateProductCUpgradePackByField_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateProductCUpgradePackByField_presult__isset;

class CacheService_updateProductCUpgradePackByField_presult {
 public:


  virtual ~CacheService_updateProductCUpgradePackByField_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateProductCUpgradePackByField_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryProductCUpgradePackById_args__isset {
  _CacheService_queryProductCUpgradePackById_args__isset() : maxCode(false), minCode(false), cUpgradePackId(false) {}
  bool maxCode;
  bool minCode;
  bool cUpgradePackId;
} _CacheService_queryProductCUpgradePackById_args__isset;

class CacheService_queryProductCUpgradePackById_args {
 public:

  CacheService_queryProductCUpgradePackById_args() : maxCode(), minCode(), cUpgradePackId() {
  }

  virtual ~CacheService_queryProductCUpgradePackById_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string cUpgradePackId;

  _CacheService_queryProductCUpgradePackById_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_cUpgradePackId(const std::string& val) {
    cUpgradePackId = val;
  }

  bool operator == (const CacheService_queryProductCUpgradePackById_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(cUpgradePackId == rhs.cUpgradePackId))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryProductCUpgradePackById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryProductCUpgradePackById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryProductCUpgradePackById_pargs {
 public:


  virtual ~CacheService_queryProductCUpgradePackById_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* cUpgradePackId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryProductCUpgradePackById_result__isset {
  _CacheService_queryProductCUpgradePackById_result__isset() : success(false) {}
  bool success;
} _CacheService_queryProductCUpgradePackById_result__isset;

class CacheService_queryProductCUpgradePackById_result {
 public:

  CacheService_queryProductCUpgradePackById_result() {
  }

  virtual ~CacheService_queryProductCUpgradePackById_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache success;

  _CacheService_queryProductCUpgradePackById_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache& val) {
    success = val;
  }

  bool operator == (const CacheService_queryProductCUpgradePackById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryProductCUpgradePackById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryProductCUpgradePackById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryProductCUpgradePackById_presult__isset {
  _CacheService_queryProductCUpgradePackById_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryProductCUpgradePackById_presult__isset;

class CacheService_queryProductCUpgradePackById_presult {
 public:


  virtual ~CacheService_queryProductCUpgradePackById_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache* success;

  _CacheService_queryProductCUpgradePackById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteProductCUpgradePackById_args__isset {
  _CacheService_deleteProductCUpgradePackById_args__isset() : maxCode(false), minCode(false), cUpgradePackId(false) {}
  bool maxCode;
  bool minCode;
  bool cUpgradePackId;
} _CacheService_deleteProductCUpgradePackById_args__isset;

class CacheService_deleteProductCUpgradePackById_args {
 public:

  CacheService_deleteProductCUpgradePackById_args() : maxCode(), minCode(), cUpgradePackId() {
  }

  virtual ~CacheService_deleteProductCUpgradePackById_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string cUpgradePackId;

  _CacheService_deleteProductCUpgradePackById_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_cUpgradePackId(const std::string& val) {
    cUpgradePackId = val;
  }

  bool operator == (const CacheService_deleteProductCUpgradePackById_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(cUpgradePackId == rhs.cUpgradePackId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteProductCUpgradePackById_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteProductCUpgradePackById_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteProductCUpgradePackById_pargs {
 public:


  virtual ~CacheService_deleteProductCUpgradePackById_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* cUpgradePackId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteProductCUpgradePackById_result__isset {
  _CacheService_deleteProductCUpgradePackById_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteProductCUpgradePackById_result__isset;

class CacheService_deleteProductCUpgradePackById_result {
 public:

  CacheService_deleteProductCUpgradePackById_result() {
  }

  virtual ~CacheService_deleteProductCUpgradePackById_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteProductCUpgradePackById_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteProductCUpgradePackById_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteProductCUpgradePackById_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteProductCUpgradePackById_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteProductCUpgradePackById_presult__isset {
  _CacheService_deleteProductCUpgradePackById_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteProductCUpgradePackById_presult__isset;

class CacheService_deleteProductCUpgradePackById_presult {
 public:


  virtual ~CacheService_deleteProductCUpgradePackById_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteProductCUpgradePackById_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveAccount2UserOnlyId_args__isset {
  _CacheService_saveAccount2UserOnlyId_args__isset() : maxCode(false), minCode(false), account(false), userOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool account;
  bool userOnlyId;
} _CacheService_saveAccount2UserOnlyId_args__isset;

class CacheService_saveAccount2UserOnlyId_args {
 public:

  CacheService_saveAccount2UserOnlyId_args() : maxCode(), minCode(), account(), userOnlyId() {
  }

  virtual ~CacheService_saveAccount2UserOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string account;
  std::string userOnlyId;

  _CacheService_saveAccount2UserOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_account(const std::string& val) {
    account = val;
  }

  void __set_userOnlyId(const std::string& val) {
    userOnlyId = val;
  }

  bool operator == (const CacheService_saveAccount2UserOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(account == rhs.account))
      return false;
    if (!(userOnlyId == rhs.userOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveAccount2UserOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveAccount2UserOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveAccount2UserOnlyId_pargs {
 public:


  virtual ~CacheService_saveAccount2UserOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* account;
  const std::string* userOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveAccount2UserOnlyId_result__isset {
  _CacheService_saveAccount2UserOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_saveAccount2UserOnlyId_result__isset;

class CacheService_saveAccount2UserOnlyId_result {
 public:

  CacheService_saveAccount2UserOnlyId_result() {
  }

  virtual ~CacheService_saveAccount2UserOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveAccount2UserOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveAccount2UserOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveAccount2UserOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveAccount2UserOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveAccount2UserOnlyId_presult__isset {
  _CacheService_saveAccount2UserOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveAccount2UserOnlyId_presult__isset;

class CacheService_saveAccount2UserOnlyId_presult {
 public:


  virtual ~CacheService_saveAccount2UserOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveAccount2UserOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateAccount2UserOnlyId_args__isset {
  _CacheService_updateAccount2UserOnlyId_args__isset() : maxCode(false), minCode(false), account(false), userOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool account;
  bool userOnlyId;
} _CacheService_updateAccount2UserOnlyId_args__isset;

class CacheService_updateAccount2UserOnlyId_args {
 public:

  CacheService_updateAccount2UserOnlyId_args() : maxCode(), minCode(), account(), userOnlyId() {
  }

  virtual ~CacheService_updateAccount2UserOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string account;
  std::string userOnlyId;

  _CacheService_updateAccount2UserOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_account(const std::string& val) {
    account = val;
  }

  void __set_userOnlyId(const std::string& val) {
    userOnlyId = val;
  }

  bool operator == (const CacheService_updateAccount2UserOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(account == rhs.account))
      return false;
    if (!(userOnlyId == rhs.userOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateAccount2UserOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateAccount2UserOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateAccount2UserOnlyId_pargs {
 public:


  virtual ~CacheService_updateAccount2UserOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* account;
  const std::string* userOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateAccount2UserOnlyId_result__isset {
  _CacheService_updateAccount2UserOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_updateAccount2UserOnlyId_result__isset;

class CacheService_updateAccount2UserOnlyId_result {
 public:

  CacheService_updateAccount2UserOnlyId_result() {
  }

  virtual ~CacheService_updateAccount2UserOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateAccount2UserOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateAccount2UserOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateAccount2UserOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateAccount2UserOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateAccount2UserOnlyId_presult__isset {
  _CacheService_updateAccount2UserOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateAccount2UserOnlyId_presult__isset;

class CacheService_updateAccount2UserOnlyId_presult {
 public:


  virtual ~CacheService_updateAccount2UserOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateAccount2UserOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryAccount2UserOnlyId_args__isset {
  _CacheService_queryAccount2UserOnlyId_args__isset() : maxCode(false), minCode(false), account(false) {}
  bool maxCode;
  bool minCode;
  bool account;
} _CacheService_queryAccount2UserOnlyId_args__isset;

class CacheService_queryAccount2UserOnlyId_args {
 public:

  CacheService_queryAccount2UserOnlyId_args() : maxCode(), minCode(), account() {
  }

  virtual ~CacheService_queryAccount2UserOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string account;

  _CacheService_queryAccount2UserOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_account(const std::string& val) {
    account = val;
  }

  bool operator == (const CacheService_queryAccount2UserOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(account == rhs.account))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryAccount2UserOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryAccount2UserOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryAccount2UserOnlyId_pargs {
 public:


  virtual ~CacheService_queryAccount2UserOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* account;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryAccount2UserOnlyId_result__isset {
  _CacheService_queryAccount2UserOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_queryAccount2UserOnlyId_result__isset;

class CacheService_queryAccount2UserOnlyId_result {
 public:

  CacheService_queryAccount2UserOnlyId_result() : success() {
  }

  virtual ~CacheService_queryAccount2UserOnlyId_result() throw() {}

  std::string success;

  _CacheService_queryAccount2UserOnlyId_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const CacheService_queryAccount2UserOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryAccount2UserOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryAccount2UserOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryAccount2UserOnlyId_presult__isset {
  _CacheService_queryAccount2UserOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryAccount2UserOnlyId_presult__isset;

class CacheService_queryAccount2UserOnlyId_presult {
 public:


  virtual ~CacheService_queryAccount2UserOnlyId_presult() throw() {}

  std::string* success;

  _CacheService_queryAccount2UserOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteAccount2UserOnlyId_args__isset {
  _CacheService_deleteAccount2UserOnlyId_args__isset() : maxCode(false), minCode(false), account(false) {}
  bool maxCode;
  bool minCode;
  bool account;
} _CacheService_deleteAccount2UserOnlyId_args__isset;

class CacheService_deleteAccount2UserOnlyId_args {
 public:

  CacheService_deleteAccount2UserOnlyId_args() : maxCode(), minCode(), account() {
  }

  virtual ~CacheService_deleteAccount2UserOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string account;

  _CacheService_deleteAccount2UserOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_account(const std::string& val) {
    account = val;
  }

  bool operator == (const CacheService_deleteAccount2UserOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(account == rhs.account))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteAccount2UserOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteAccount2UserOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteAccount2UserOnlyId_pargs {
 public:


  virtual ~CacheService_deleteAccount2UserOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* account;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteAccount2UserOnlyId_result__isset {
  _CacheService_deleteAccount2UserOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteAccount2UserOnlyId_result__isset;

class CacheService_deleteAccount2UserOnlyId_result {
 public:

  CacheService_deleteAccount2UserOnlyId_result() {
  }

  virtual ~CacheService_deleteAccount2UserOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteAccount2UserOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteAccount2UserOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteAccount2UserOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteAccount2UserOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteAccount2UserOnlyId_presult__isset {
  _CacheService_deleteAccount2UserOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteAccount2UserOnlyId_presult__isset;

class CacheService_deleteAccount2UserOnlyId_presult {
 public:


  virtual ~CacheService_deleteAccount2UserOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteAccount2UserOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_batchSaveAccount2UserOnlyId_args__isset {
  _CacheService_batchSaveAccount2UserOnlyId_args__isset() : maxCode(false), minCode(false), userCacheList(false) {}
  bool maxCode;
  bool minCode;
  bool userCacheList;
} _CacheService_batchSaveAccount2UserOnlyId_args__isset;

class CacheService_batchSaveAccount2UserOnlyId_args {
 public:

  CacheService_batchSaveAccount2UserOnlyId_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_batchSaveAccount2UserOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::vector< ::com::vrv::cems::service::base::bean::cache::UserCache>  userCacheList;

  _CacheService_batchSaveAccount2UserOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userCacheList(const std::vector< ::com::vrv::cems::service::base::bean::cache::UserCache> & val) {
    userCacheList = val;
  }

  bool operator == (const CacheService_batchSaveAccount2UserOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userCacheList == rhs.userCacheList))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchSaveAccount2UserOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchSaveAccount2UserOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_batchSaveAccount2UserOnlyId_pargs {
 public:


  virtual ~CacheService_batchSaveAccount2UserOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::vector< ::com::vrv::cems::service::base::bean::cache::UserCache> * userCacheList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchSaveAccount2UserOnlyId_result__isset {
  _CacheService_batchSaveAccount2UserOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_batchSaveAccount2UserOnlyId_result__isset;

class CacheService_batchSaveAccount2UserOnlyId_result {
 public:

  CacheService_batchSaveAccount2UserOnlyId_result() {
  }

  virtual ~CacheService_batchSaveAccount2UserOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_batchSaveAccount2UserOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_batchSaveAccount2UserOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_batchSaveAccount2UserOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_batchSaveAccount2UserOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_batchSaveAccount2UserOnlyId_presult__isset {
  _CacheService_batchSaveAccount2UserOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_batchSaveAccount2UserOnlyId_presult__isset;

class CacheService_batchSaveAccount2UserOnlyId_presult {
 public:


  virtual ~CacheService_batchSaveAccount2UserOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_batchSaveAccount2UserOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_savePtp_args__isset {
  _CacheService_savePtp_args__isset() : maxCode(false), minCode(false), uuid(false), ptpResult(false) {}
  bool maxCode;
  bool minCode;
  bool uuid;
  bool ptpResult;
} _CacheService_savePtp_args__isset;

class CacheService_savePtp_args {
 public:

  CacheService_savePtp_args() : maxCode(), minCode(), uuid(), ptpResult() {
  }

  virtual ~CacheService_savePtp_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string uuid;
  std::string ptpResult;

  _CacheService_savePtp_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_uuid(const std::string& val) {
    uuid = val;
  }

  void __set_ptpResult(const std::string& val) {
    ptpResult = val;
  }

  bool operator == (const CacheService_savePtp_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(uuid == rhs.uuid))
      return false;
    if (!(ptpResult == rhs.ptpResult))
      return false;
    return true;
  }
  bool operator != (const CacheService_savePtp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_savePtp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_savePtp_pargs {
 public:


  virtual ~CacheService_savePtp_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* uuid;
  const std::string* ptpResult;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_savePtp_result__isset {
  _CacheService_savePtp_result__isset() : success(false) {}
  bool success;
} _CacheService_savePtp_result__isset;

class CacheService_savePtp_result {
 public:

  CacheService_savePtp_result() {
  }

  virtual ~CacheService_savePtp_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_savePtp_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_savePtp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_savePtp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_savePtp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_savePtp_presult__isset {
  _CacheService_savePtp_presult__isset() : success(false) {}
  bool success;
} _CacheService_savePtp_presult__isset;

class CacheService_savePtp_presult {
 public:


  virtual ~CacheService_savePtp_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_savePtp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updatePtp_args__isset {
  _CacheService_updatePtp_args__isset() : maxCode(false), minCode(false), uuid(false), ptpResult(false) {}
  bool maxCode;
  bool minCode;
  bool uuid;
  bool ptpResult;
} _CacheService_updatePtp_args__isset;

class CacheService_updatePtp_args {
 public:

  CacheService_updatePtp_args() : maxCode(), minCode(), uuid(), ptpResult() {
  }

  virtual ~CacheService_updatePtp_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string uuid;
  std::string ptpResult;

  _CacheService_updatePtp_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_uuid(const std::string& val) {
    uuid = val;
  }

  void __set_ptpResult(const std::string& val) {
    ptpResult = val;
  }

  bool operator == (const CacheService_updatePtp_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(uuid == rhs.uuid))
      return false;
    if (!(ptpResult == rhs.ptpResult))
      return false;
    return true;
  }
  bool operator != (const CacheService_updatePtp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updatePtp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updatePtp_pargs {
 public:


  virtual ~CacheService_updatePtp_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* uuid;
  const std::string* ptpResult;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updatePtp_result__isset {
  _CacheService_updatePtp_result__isset() : success(false) {}
  bool success;
} _CacheService_updatePtp_result__isset;

class CacheService_updatePtp_result {
 public:

  CacheService_updatePtp_result() {
  }

  virtual ~CacheService_updatePtp_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updatePtp_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updatePtp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updatePtp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updatePtp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updatePtp_presult__isset {
  _CacheService_updatePtp_presult__isset() : success(false) {}
  bool success;
} _CacheService_updatePtp_presult__isset;

class CacheService_updatePtp_presult {
 public:


  virtual ~CacheService_updatePtp_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updatePtp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryPtp_args__isset {
  _CacheService_queryPtp_args__isset() : maxCode(false), minCode(false), uuid(false) {}
  bool maxCode;
  bool minCode;
  bool uuid;
} _CacheService_queryPtp_args__isset;

class CacheService_queryPtp_args {
 public:

  CacheService_queryPtp_args() : maxCode(), minCode(), uuid() {
  }

  virtual ~CacheService_queryPtp_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string uuid;

  _CacheService_queryPtp_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_uuid(const std::string& val) {
    uuid = val;
  }

  bool operator == (const CacheService_queryPtp_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(uuid == rhs.uuid))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryPtp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryPtp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryPtp_pargs {
 public:


  virtual ~CacheService_queryPtp_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* uuid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryPtp_result__isset {
  _CacheService_queryPtp_result__isset() : success(false) {}
  bool success;
} _CacheService_queryPtp_result__isset;

class CacheService_queryPtp_result {
 public:

  CacheService_queryPtp_result() : success() {
  }

  virtual ~CacheService_queryPtp_result() throw() {}

  std::string success;

  _CacheService_queryPtp_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const CacheService_queryPtp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryPtp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryPtp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryPtp_presult__isset {
  _CacheService_queryPtp_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryPtp_presult__isset;

class CacheService_queryPtp_presult {
 public:


  virtual ~CacheService_queryPtp_presult() throw() {}

  std::string* success;

  _CacheService_queryPtp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deletePtp_args__isset {
  _CacheService_deletePtp_args__isset() : maxCode(false), minCode(false), uuid(false) {}
  bool maxCode;
  bool minCode;
  bool uuid;
} _CacheService_deletePtp_args__isset;

class CacheService_deletePtp_args {
 public:

  CacheService_deletePtp_args() : maxCode(), minCode(), uuid() {
  }

  virtual ~CacheService_deletePtp_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string uuid;

  _CacheService_deletePtp_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_uuid(const std::string& val) {
    uuid = val;
  }

  bool operator == (const CacheService_deletePtp_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(uuid == rhs.uuid))
      return false;
    return true;
  }
  bool operator != (const CacheService_deletePtp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deletePtp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deletePtp_pargs {
 public:


  virtual ~CacheService_deletePtp_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* uuid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deletePtp_result__isset {
  _CacheService_deletePtp_result__isset() : success(false) {}
  bool success;
} _CacheService_deletePtp_result__isset;

class CacheService_deletePtp_result {
 public:

  CacheService_deletePtp_result() {
  }

  virtual ~CacheService_deletePtp_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deletePtp_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deletePtp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deletePtp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deletePtp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deletePtp_presult__isset {
  _CacheService_deletePtp_presult__isset() : success(false) {}
  bool success;
} _CacheService_deletePtp_presult__isset;

class CacheService_deletePtp_presult {
 public:


  virtual ~CacheService_deletePtp_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deletePtp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveSensitive_args__isset {
  _CacheService_saveSensitive_args__isset() : maxCode(false), minCode(false), sensitiveCache(false) {}
  bool maxCode;
  bool minCode;
  bool sensitiveCache;
} _CacheService_saveSensitive_args__isset;

class CacheService_saveSensitive_args {
 public:

  CacheService_saveSensitive_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_saveSensitive_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::SensitiveCache sensitiveCache;

  _CacheService_saveSensitive_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_sensitiveCache(const  ::com::vrv::cems::service::base::bean::cache::SensitiveCache& val) {
    sensitiveCache = val;
  }

  bool operator == (const CacheService_saveSensitive_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(sensitiveCache == rhs.sensitiveCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveSensitive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveSensitive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveSensitive_pargs {
 public:


  virtual ~CacheService_saveSensitive_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::SensitiveCache* sensitiveCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveSensitive_result__isset {
  _CacheService_saveSensitive_result__isset() : success(false) {}
  bool success;
} _CacheService_saveSensitive_result__isset;

class CacheService_saveSensitive_result {
 public:

  CacheService_saveSensitive_result() {
  }

  virtual ~CacheService_saveSensitive_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveSensitive_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveSensitive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveSensitive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveSensitive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveSensitive_presult__isset {
  _CacheService_saveSensitive_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveSensitive_presult__isset;

class CacheService_saveSensitive_presult {
 public:


  virtual ~CacheService_saveSensitive_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveSensitive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateSensitive_args__isset {
  _CacheService_updateSensitive_args__isset() : maxCode(false), minCode(false), sensitiveCache(false) {}
  bool maxCode;
  bool minCode;
  bool sensitiveCache;
} _CacheService_updateSensitive_args__isset;

class CacheService_updateSensitive_args {
 public:

  CacheService_updateSensitive_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_updateSensitive_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::SensitiveCache sensitiveCache;

  _CacheService_updateSensitive_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_sensitiveCache(const  ::com::vrv::cems::service::base::bean::cache::SensitiveCache& val) {
    sensitiveCache = val;
  }

  bool operator == (const CacheService_updateSensitive_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(sensitiveCache == rhs.sensitiveCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateSensitive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateSensitive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateSensitive_pargs {
 public:


  virtual ~CacheService_updateSensitive_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::SensitiveCache* sensitiveCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateSensitive_result__isset {
  _CacheService_updateSensitive_result__isset() : success(false) {}
  bool success;
} _CacheService_updateSensitive_result__isset;

class CacheService_updateSensitive_result {
 public:

  CacheService_updateSensitive_result() {
  }

  virtual ~CacheService_updateSensitive_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateSensitive_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateSensitive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateSensitive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateSensitive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateSensitive_presult__isset {
  _CacheService_updateSensitive_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateSensitive_presult__isset;

class CacheService_updateSensitive_presult {
 public:


  virtual ~CacheService_updateSensitive_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateSensitive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_querySensitive_args__isset {
  _CacheService_querySensitive_args__isset() : maxCode(false), minCode(false), name(false) {}
  bool maxCode;
  bool minCode;
  bool name;
} _CacheService_querySensitive_args__isset;

class CacheService_querySensitive_args {
 public:

  CacheService_querySensitive_args() : maxCode(), minCode(), name() {
  }

  virtual ~CacheService_querySensitive_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string name;

  _CacheService_querySensitive_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const CacheService_querySensitive_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const CacheService_querySensitive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_querySensitive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_querySensitive_pargs {
 public:


  virtual ~CacheService_querySensitive_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_querySensitive_result__isset {
  _CacheService_querySensitive_result__isset() : success(false) {}
  bool success;
} _CacheService_querySensitive_result__isset;

class CacheService_querySensitive_result {
 public:

  CacheService_querySensitive_result() {
  }

  virtual ~CacheService_querySensitive_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::SensitiveCache success;

  _CacheService_querySensitive_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::SensitiveCache& val) {
    success = val;
  }

  bool operator == (const CacheService_querySensitive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_querySensitive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_querySensitive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_querySensitive_presult__isset {
  _CacheService_querySensitive_presult__isset() : success(false) {}
  bool success;
} _CacheService_querySensitive_presult__isset;

class CacheService_querySensitive_presult {
 public:


  virtual ~CacheService_querySensitive_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::SensitiveCache* success;

  _CacheService_querySensitive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_querySensitiveByField_args__isset {
  _CacheService_querySensitiveByField_args__isset() : maxCode(false), minCode(false), name(false), fieldKey(false) {}
  bool maxCode;
  bool minCode;
  bool name;
  bool fieldKey;
} _CacheService_querySensitiveByField_args__isset;

class CacheService_querySensitiveByField_args {
 public:

  CacheService_querySensitiveByField_args() : maxCode(), minCode(), name(), fieldKey() {
  }

  virtual ~CacheService_querySensitiveByField_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string name;
  std::string fieldKey;

  _CacheService_querySensitiveByField_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_fieldKey(const std::string& val) {
    fieldKey = val;
  }

  bool operator == (const CacheService_querySensitiveByField_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(fieldKey == rhs.fieldKey))
      return false;
    return true;
  }
  bool operator != (const CacheService_querySensitiveByField_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_querySensitiveByField_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_querySensitiveByField_pargs {
 public:


  virtual ~CacheService_querySensitiveByField_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* name;
  const std::string* fieldKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_querySensitiveByField_result__isset {
  _CacheService_querySensitiveByField_result__isset() : success(false) {}
  bool success;
} _CacheService_querySensitiveByField_result__isset;

class CacheService_querySensitiveByField_result {
 public:

  CacheService_querySensitiveByField_result() : success() {
  }

  virtual ~CacheService_querySensitiveByField_result() throw() {}

  std::string success;

  _CacheService_querySensitiveByField_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const CacheService_querySensitiveByField_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_querySensitiveByField_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_querySensitiveByField_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_querySensitiveByField_presult__isset {
  _CacheService_querySensitiveByField_presult__isset() : success(false) {}
  bool success;
} _CacheService_querySensitiveByField_presult__isset;

class CacheService_querySensitiveByField_presult {
 public:


  virtual ~CacheService_querySensitiveByField_presult() throw() {}

  std::string* success;

  _CacheService_querySensitiveByField_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteSensitive_args__isset {
  _CacheService_deleteSensitive_args__isset() : maxCode(false), minCode(false), name(false) {}
  bool maxCode;
  bool minCode;
  bool name;
} _CacheService_deleteSensitive_args__isset;

class CacheService_deleteSensitive_args {
 public:

  CacheService_deleteSensitive_args() : maxCode(), minCode(), name() {
  }

  virtual ~CacheService_deleteSensitive_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string name;

  _CacheService_deleteSensitive_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_name(const std::string& val) {
    name = val;
  }

  bool operator == (const CacheService_deleteSensitive_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteSensitive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteSensitive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteSensitive_pargs {
 public:


  virtual ~CacheService_deleteSensitive_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteSensitive_result__isset {
  _CacheService_deleteSensitive_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteSensitive_result__isset;

class CacheService_deleteSensitive_result {
 public:

  CacheService_deleteSensitive_result() {
  }

  virtual ~CacheService_deleteSensitive_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteSensitive_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteSensitive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteSensitive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteSensitive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteSensitive_presult__isset {
  _CacheService_deleteSensitive_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteSensitive_presult__isset;

class CacheService_deleteSensitive_presult {
 public:


  virtual ~CacheService_deleteSensitive_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteSensitive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveDeviceMsgDigest_args__isset {
  _CacheService_saveDeviceMsgDigest_args__isset() : maxCode(false), minCode(false), devOnlyId(false), fieldValueMap(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
  bool fieldValueMap;
} _CacheService_saveDeviceMsgDigest_args__isset;

class CacheService_saveDeviceMsgDigest_args {
 public:

  CacheService_saveDeviceMsgDigest_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_saveDeviceMsgDigest_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;
  std::map<std::string, std::vector<std::string> >  fieldValueMap;

  _CacheService_saveDeviceMsgDigest_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  void __set_fieldValueMap(const std::map<std::string, std::vector<std::string> > & val) {
    fieldValueMap = val;
  }

  bool operator == (const CacheService_saveDeviceMsgDigest_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    if (!(fieldValueMap == rhs.fieldValueMap))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveDeviceMsgDigest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveDeviceMsgDigest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveDeviceMsgDigest_pargs {
 public:


  virtual ~CacheService_saveDeviceMsgDigest_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;
  const std::map<std::string, std::vector<std::string> > * fieldValueMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveDeviceMsgDigest_result__isset {
  _CacheService_saveDeviceMsgDigest_result__isset() : success(false) {}
  bool success;
} _CacheService_saveDeviceMsgDigest_result__isset;

class CacheService_saveDeviceMsgDigest_result {
 public:

  CacheService_saveDeviceMsgDigest_result() {
  }

  virtual ~CacheService_saveDeviceMsgDigest_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveDeviceMsgDigest_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveDeviceMsgDigest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveDeviceMsgDigest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveDeviceMsgDigest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveDeviceMsgDigest_presult__isset {
  _CacheService_saveDeviceMsgDigest_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveDeviceMsgDigest_presult__isset;

class CacheService_saveDeviceMsgDigest_presult {
 public:


  virtual ~CacheService_saveDeviceMsgDigest_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveDeviceMsgDigest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_args__isset {
  _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_args__isset() : maxCode(false), minCode(false), devOnlyId(false), msgType(false), msgIdList(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
  bool msgType;
  bool msgIdList;
} _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_args__isset;

class CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_args {
 public:

  CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_args() : maxCode(), minCode(), devOnlyId(), msgType() {
  }

  virtual ~CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;
  std::string msgType;
  std::vector<std::string>  msgIdList;

  _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  void __set_msgType(const std::string& val) {
    msgType = val;
  }

  void __set_msgIdList(const std::vector<std::string> & val) {
    msgIdList = val;
  }

  bool operator == (const CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    if (!(msgType == rhs.msgType))
      return false;
    if (!(msgIdList == rhs.msgIdList))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_pargs {
 public:


  virtual ~CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;
  const std::string* msgType;
  const std::vector<std::string> * msgIdList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_result__isset {
  _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_result__isset() : success(false) {}
  bool success;
} _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_result__isset;

class CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_result {
 public:

  CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_result() {
  }

  virtual ~CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_presult__isset {
  _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_presult__isset;

class CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_presult {
 public:


  virtual ~CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_args__isset {
  _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_args__isset() : maxCode(false), minCode(false), devOnlyId(false), msgType(false), msgId(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
  bool msgType;
  bool msgId;
} _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_args__isset;

class CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_args {
 public:

  CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_args() : maxCode(), minCode(), devOnlyId(), msgType(), msgId() {
  }

  virtual ~CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;
  std::string msgType;
  std::string msgId;

  _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  void __set_msgType(const std::string& val) {
    msgType = val;
  }

  void __set_msgId(const std::string& val) {
    msgId = val;
  }

  bool operator == (const CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    if (!(msgType == rhs.msgType))
      return false;
    if (!(msgId == rhs.msgId))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_pargs {
 public:


  virtual ~CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;
  const std::string* msgType;
  const std::string* msgId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_result__isset {
  _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_result__isset() : success(false) {}
  bool success;
} _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_result__isset;

class CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_result {
 public:

  CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_result() {
  }

  virtual ~CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_presult__isset {
  _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_presult__isset;

class CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_presult {
 public:


  virtual ~CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteDeviceMsgDigestByDevOnlyId_args__isset {
  _CacheService_deleteDeviceMsgDigestByDevOnlyId_args__isset() : maxCode(false), minCode(false), devOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
} _CacheService_deleteDeviceMsgDigestByDevOnlyId_args__isset;

class CacheService_deleteDeviceMsgDigestByDevOnlyId_args {
 public:

  CacheService_deleteDeviceMsgDigestByDevOnlyId_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_deleteDeviceMsgDigestByDevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;

  _CacheService_deleteDeviceMsgDigestByDevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  bool operator == (const CacheService_deleteDeviceMsgDigestByDevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceMsgDigestByDevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceMsgDigestByDevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteDeviceMsgDigestByDevOnlyId_pargs {
 public:


  virtual ~CacheService_deleteDeviceMsgDigestByDevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceMsgDigestByDevOnlyId_result__isset {
  _CacheService_deleteDeviceMsgDigestByDevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceMsgDigestByDevOnlyId_result__isset;

class CacheService_deleteDeviceMsgDigestByDevOnlyId_result {
 public:

  CacheService_deleteDeviceMsgDigestByDevOnlyId_result() {
  }

  virtual ~CacheService_deleteDeviceMsgDigestByDevOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteDeviceMsgDigestByDevOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteDeviceMsgDigestByDevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceMsgDigestByDevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceMsgDigestByDevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceMsgDigestByDevOnlyId_presult__isset {
  _CacheService_deleteDeviceMsgDigestByDevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceMsgDigestByDevOnlyId_presult__isset;

class CacheService_deleteDeviceMsgDigestByDevOnlyId_presult {
 public:


  virtual ~CacheService_deleteDeviceMsgDigestByDevOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteDeviceMsgDigestByDevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_args__isset {
  _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_args__isset() : maxCode(false), minCode(false), devOnlyId(false), msgType(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
  bool msgType;
} _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_args__isset;

class CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_args {
 public:

  CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_args() : maxCode(), minCode(), devOnlyId(), msgType() {
  }

  virtual ~CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;
  std::string msgType;

  _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  void __set_msgType(const std::string& val) {
    msgType = val;
  }

  bool operator == (const CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    if (!(msgType == rhs.msgType))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_pargs {
 public:


  virtual ~CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;
  const std::string* msgType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_result__isset {
  _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_result__isset;

class CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_result {
 public:

  CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_result() {
  }

  virtual ~CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_presult__isset {
  _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_presult__isset;

class CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_presult {
 public:


  virtual ~CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_args__isset {
  _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_args__isset() : maxCode(false), minCode(false), devOnlyId(false), msgType(false), msgId(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
  bool msgType;
  bool msgId;
} _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_args__isset;

class CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_args {
 public:

  CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_args() : maxCode(), minCode(), devOnlyId(), msgType(), msgId() {
  }

  virtual ~CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;
  std::string msgType;
  std::string msgId;

  _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  void __set_msgType(const std::string& val) {
    msgType = val;
  }

  void __set_msgId(const std::string& val) {
    msgId = val;
  }

  bool operator == (const CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    if (!(msgType == rhs.msgType))
      return false;
    if (!(msgId == rhs.msgId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_pargs {
 public:


  virtual ~CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;
  const std::string* msgType;
  const std::string* msgId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_result__isset {
  _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_result__isset;

class CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_result {
 public:

  CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_result() {
  }

  virtual ~CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_presult__isset {
  _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_presult__isset;

class CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_presult {
 public:


  virtual ~CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateDeviceMsgDigest_args__isset {
  _CacheService_updateDeviceMsgDigest_args__isset() : maxCode(false), minCode(false), devOnlyId(false), msgType(false), msgId(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
  bool msgType;
  bool msgId;
} _CacheService_updateDeviceMsgDigest_args__isset;

class CacheService_updateDeviceMsgDigest_args {
 public:

  CacheService_updateDeviceMsgDigest_args() : maxCode(), minCode(), devOnlyId(), msgType(), msgId() {
  }

  virtual ~CacheService_updateDeviceMsgDigest_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;
  std::string msgType;
  std::string msgId;

  _CacheService_updateDeviceMsgDigest_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  void __set_msgType(const std::string& val) {
    msgType = val;
  }

  void __set_msgId(const std::string& val) {
    msgId = val;
  }

  bool operator == (const CacheService_updateDeviceMsgDigest_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    if (!(msgType == rhs.msgType))
      return false;
    if (!(msgId == rhs.msgId))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDeviceMsgDigest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDeviceMsgDigest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateDeviceMsgDigest_pargs {
 public:


  virtual ~CacheService_updateDeviceMsgDigest_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;
  const std::string* msgType;
  const std::string* msgId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDeviceMsgDigest_result__isset {
  _CacheService_updateDeviceMsgDigest_result__isset() : success(false) {}
  bool success;
} _CacheService_updateDeviceMsgDigest_result__isset;

class CacheService_updateDeviceMsgDigest_result {
 public:

  CacheService_updateDeviceMsgDigest_result() {
  }

  virtual ~CacheService_updateDeviceMsgDigest_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateDeviceMsgDigest_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateDeviceMsgDigest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateDeviceMsgDigest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateDeviceMsgDigest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateDeviceMsgDigest_presult__isset {
  _CacheService_updateDeviceMsgDigest_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateDeviceMsgDigest_presult__isset;

class CacheService_updateDeviceMsgDigest_presult {
 public:


  virtual ~CacheService_updateDeviceMsgDigest_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateDeviceMsgDigest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryDeviceMsgDigestByDevOnlyId_args__isset {
  _CacheService_queryDeviceMsgDigestByDevOnlyId_args__isset() : maxCode(false), minCode(false), devOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
} _CacheService_queryDeviceMsgDigestByDevOnlyId_args__isset;

class CacheService_queryDeviceMsgDigestByDevOnlyId_args {
 public:

  CacheService_queryDeviceMsgDigestByDevOnlyId_args() : maxCode(), minCode(), devOnlyId() {
  }

  virtual ~CacheService_queryDeviceMsgDigestByDevOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;

  _CacheService_queryDeviceMsgDigestByDevOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  bool operator == (const CacheService_queryDeviceMsgDigestByDevOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceMsgDigestByDevOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceMsgDigestByDevOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryDeviceMsgDigestByDevOnlyId_pargs {
 public:


  virtual ~CacheService_queryDeviceMsgDigestByDevOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceMsgDigestByDevOnlyId_result__isset {
  _CacheService_queryDeviceMsgDigestByDevOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceMsgDigestByDevOnlyId_result__isset;

class CacheService_queryDeviceMsgDigestByDevOnlyId_result {
 public:

  CacheService_queryDeviceMsgDigestByDevOnlyId_result() {
  }

  virtual ~CacheService_queryDeviceMsgDigestByDevOnlyId_result() throw() {}

  std::map<std::string, std::vector<std::string> >  success;

  _CacheService_queryDeviceMsgDigestByDevOnlyId_result__isset __isset;

  void __set_success(const std::map<std::string, std::vector<std::string> > & val) {
    success = val;
  }

  bool operator == (const CacheService_queryDeviceMsgDigestByDevOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceMsgDigestByDevOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceMsgDigestByDevOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceMsgDigestByDevOnlyId_presult__isset {
  _CacheService_queryDeviceMsgDigestByDevOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceMsgDigestByDevOnlyId_presult__isset;

class CacheService_queryDeviceMsgDigestByDevOnlyId_presult {
 public:


  virtual ~CacheService_queryDeviceMsgDigestByDevOnlyId_presult() throw() {}

  std::map<std::string, std::vector<std::string> > * success;

  _CacheService_queryDeviceMsgDigestByDevOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryDeviceMsgDigestByDevIdAndMsgType_args__isset {
  _CacheService_queryDeviceMsgDigestByDevIdAndMsgType_args__isset() : maxCode(false), minCode(false), devOnlyId(false), msgType(false) {}
  bool maxCode;
  bool minCode;
  bool devOnlyId;
  bool msgType;
} _CacheService_queryDeviceMsgDigestByDevIdAndMsgType_args__isset;

class CacheService_queryDeviceMsgDigestByDevIdAndMsgType_args {
 public:

  CacheService_queryDeviceMsgDigestByDevIdAndMsgType_args() : maxCode(), minCode(), devOnlyId(), msgType() {
  }

  virtual ~CacheService_queryDeviceMsgDigestByDevIdAndMsgType_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string devOnlyId;
  std::string msgType;

  _CacheService_queryDeviceMsgDigestByDevIdAndMsgType_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_devOnlyId(const std::string& val) {
    devOnlyId = val;
  }

  void __set_msgType(const std::string& val) {
    msgType = val;
  }

  bool operator == (const CacheService_queryDeviceMsgDigestByDevIdAndMsgType_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(devOnlyId == rhs.devOnlyId))
      return false;
    if (!(msgType == rhs.msgType))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceMsgDigestByDevIdAndMsgType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceMsgDigestByDevIdAndMsgType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryDeviceMsgDigestByDevIdAndMsgType_pargs {
 public:


  virtual ~CacheService_queryDeviceMsgDigestByDevIdAndMsgType_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* devOnlyId;
  const std::string* msgType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceMsgDigestByDevIdAndMsgType_result__isset {
  _CacheService_queryDeviceMsgDigestByDevIdAndMsgType_result__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceMsgDigestByDevIdAndMsgType_result__isset;

class CacheService_queryDeviceMsgDigestByDevIdAndMsgType_result {
 public:

  CacheService_queryDeviceMsgDigestByDevIdAndMsgType_result() {
  }

  virtual ~CacheService_queryDeviceMsgDigestByDevIdAndMsgType_result() throw() {}

  std::vector<std::string>  success;

  _CacheService_queryDeviceMsgDigestByDevIdAndMsgType_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const CacheService_queryDeviceMsgDigestByDevIdAndMsgType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceMsgDigestByDevIdAndMsgType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceMsgDigestByDevIdAndMsgType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceMsgDigestByDevIdAndMsgType_presult__isset {
  _CacheService_queryDeviceMsgDigestByDevIdAndMsgType_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceMsgDigestByDevIdAndMsgType_presult__isset;

class CacheService_queryDeviceMsgDigestByDevIdAndMsgType_presult {
 public:


  virtual ~CacheService_queryDeviceMsgDigestByDevIdAndMsgType_presult() throw() {}

  std::vector<std::string> * success;

  _CacheService_queryDeviceMsgDigestByDevIdAndMsgType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveUserMsgDigest_args__isset {
  _CacheService_saveUserMsgDigest_args__isset() : maxCode(false), minCode(false), userOnlyId(false), fieldValueMap(false) {}
  bool maxCode;
  bool minCode;
  bool userOnlyId;
  bool fieldValueMap;
} _CacheService_saveUserMsgDigest_args__isset;

class CacheService_saveUserMsgDigest_args {
 public:

  CacheService_saveUserMsgDigest_args() : maxCode(), minCode(), userOnlyId() {
  }

  virtual ~CacheService_saveUserMsgDigest_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string userOnlyId;
  std::map<std::string, std::vector<std::string> >  fieldValueMap;

  _CacheService_saveUserMsgDigest_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userOnlyId(const std::string& val) {
    userOnlyId = val;
  }

  void __set_fieldValueMap(const std::map<std::string, std::vector<std::string> > & val) {
    fieldValueMap = val;
  }

  bool operator == (const CacheService_saveUserMsgDigest_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userOnlyId == rhs.userOnlyId))
      return false;
    if (!(fieldValueMap == rhs.fieldValueMap))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveUserMsgDigest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveUserMsgDigest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveUserMsgDigest_pargs {
 public:


  virtual ~CacheService_saveUserMsgDigest_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* userOnlyId;
  const std::map<std::string, std::vector<std::string> > * fieldValueMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveUserMsgDigest_result__isset {
  _CacheService_saveUserMsgDigest_result__isset() : success(false) {}
  bool success;
} _CacheService_saveUserMsgDigest_result__isset;

class CacheService_saveUserMsgDigest_result {
 public:

  CacheService_saveUserMsgDigest_result() {
  }

  virtual ~CacheService_saveUserMsgDigest_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveUserMsgDigest_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveUserMsgDigest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveUserMsgDigest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveUserMsgDigest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveUserMsgDigest_presult__isset {
  _CacheService_saveUserMsgDigest_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveUserMsgDigest_presult__isset;

class CacheService_saveUserMsgDigest_presult {
 public:


  virtual ~CacheService_saveUserMsgDigest_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveUserMsgDigest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_args__isset {
  _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_args__isset() : maxCode(false), minCode(false), userOnlyId(false), msgType(false), msgIdList(false) {}
  bool maxCode;
  bool minCode;
  bool userOnlyId;
  bool msgType;
  bool msgIdList;
} _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_args__isset;

class CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_args {
 public:

  CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_args() : maxCode(), minCode(), userOnlyId(), msgType() {
  }

  virtual ~CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string userOnlyId;
  std::string msgType;
  std::vector<std::string>  msgIdList;

  _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userOnlyId(const std::string& val) {
    userOnlyId = val;
  }

  void __set_msgType(const std::string& val) {
    msgType = val;
  }

  void __set_msgIdList(const std::vector<std::string> & val) {
    msgIdList = val;
  }

  bool operator == (const CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userOnlyId == rhs.userOnlyId))
      return false;
    if (!(msgType == rhs.msgType))
      return false;
    if (!(msgIdList == rhs.msgIdList))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_pargs {
 public:


  virtual ~CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* userOnlyId;
  const std::string* msgType;
  const std::vector<std::string> * msgIdList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_result__isset {
  _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_result__isset() : success(false) {}
  bool success;
} _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_result__isset;

class CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_result {
 public:

  CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_result() {
  }

  virtual ~CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_presult__isset {
  _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_presult__isset;

class CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_presult {
 public:


  virtual ~CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_args__isset {
  _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_args__isset() : maxCode(false), minCode(false), userOnlyId(false), msgType(false), msgId(false) {}
  bool maxCode;
  bool minCode;
  bool userOnlyId;
  bool msgType;
  bool msgId;
} _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_args__isset;

class CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_args {
 public:

  CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_args() : maxCode(), minCode(), userOnlyId(), msgType(), msgId() {
  }

  virtual ~CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string userOnlyId;
  std::string msgType;
  std::string msgId;

  _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userOnlyId(const std::string& val) {
    userOnlyId = val;
  }

  void __set_msgType(const std::string& val) {
    msgType = val;
  }

  void __set_msgId(const std::string& val) {
    msgId = val;
  }

  bool operator == (const CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userOnlyId == rhs.userOnlyId))
      return false;
    if (!(msgType == rhs.msgType))
      return false;
    if (!(msgId == rhs.msgId))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_pargs {
 public:


  virtual ~CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* userOnlyId;
  const std::string* msgType;
  const std::string* msgId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_result__isset {
  _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_result__isset() : success(false) {}
  bool success;
} _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_result__isset;

class CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_result {
 public:

  CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_result() {
  }

  virtual ~CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_presult__isset {
  _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_presult__isset;

class CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_presult {
 public:


  virtual ~CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteUserMsgDigestByUserOnlyId_args__isset {
  _CacheService_deleteUserMsgDigestByUserOnlyId_args__isset() : maxCode(false), minCode(false), userOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool userOnlyId;
} _CacheService_deleteUserMsgDigestByUserOnlyId_args__isset;

class CacheService_deleteUserMsgDigestByUserOnlyId_args {
 public:

  CacheService_deleteUserMsgDigestByUserOnlyId_args() : maxCode(), minCode(), userOnlyId() {
  }

  virtual ~CacheService_deleteUserMsgDigestByUserOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string userOnlyId;

  _CacheService_deleteUserMsgDigestByUserOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userOnlyId(const std::string& val) {
    userOnlyId = val;
  }

  bool operator == (const CacheService_deleteUserMsgDigestByUserOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userOnlyId == rhs.userOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteUserMsgDigestByUserOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteUserMsgDigestByUserOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteUserMsgDigestByUserOnlyId_pargs {
 public:


  virtual ~CacheService_deleteUserMsgDigestByUserOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* userOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteUserMsgDigestByUserOnlyId_result__isset {
  _CacheService_deleteUserMsgDigestByUserOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteUserMsgDigestByUserOnlyId_result__isset;

class CacheService_deleteUserMsgDigestByUserOnlyId_result {
 public:

  CacheService_deleteUserMsgDigestByUserOnlyId_result() {
  }

  virtual ~CacheService_deleteUserMsgDigestByUserOnlyId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteUserMsgDigestByUserOnlyId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteUserMsgDigestByUserOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteUserMsgDigestByUserOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteUserMsgDigestByUserOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteUserMsgDigestByUserOnlyId_presult__isset {
  _CacheService_deleteUserMsgDigestByUserOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteUserMsgDigestByUserOnlyId_presult__isset;

class CacheService_deleteUserMsgDigestByUserOnlyId_presult {
 public:


  virtual ~CacheService_deleteUserMsgDigestByUserOnlyId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteUserMsgDigestByUserOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_args__isset {
  _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_args__isset() : maxCode(false), minCode(false), userOnlyId(false), msgType(false) {}
  bool maxCode;
  bool minCode;
  bool userOnlyId;
  bool msgType;
} _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_args__isset;

class CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_args {
 public:

  CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_args() : maxCode(), minCode(), userOnlyId(), msgType() {
  }

  virtual ~CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string userOnlyId;
  std::string msgType;

  _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userOnlyId(const std::string& val) {
    userOnlyId = val;
  }

  void __set_msgType(const std::string& val) {
    msgType = val;
  }

  bool operator == (const CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userOnlyId == rhs.userOnlyId))
      return false;
    if (!(msgType == rhs.msgType))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_pargs {
 public:


  virtual ~CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* userOnlyId;
  const std::string* msgType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_result__isset {
  _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_result__isset;

class CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_result {
 public:

  CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_result() {
  }

  virtual ~CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_presult__isset {
  _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_presult__isset;

class CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_presult {
 public:


  virtual ~CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_args__isset {
  _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_args__isset() : maxCode(false), minCode(false), userOnlyId(false), msgType(false), msgId(false) {}
  bool maxCode;
  bool minCode;
  bool userOnlyId;
  bool msgType;
  bool msgId;
} _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_args__isset;

class CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_args {
 public:

  CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_args() : maxCode(), minCode(), userOnlyId(), msgType(), msgId() {
  }

  virtual ~CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string userOnlyId;
  std::string msgType;
  std::string msgId;

  _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userOnlyId(const std::string& val) {
    userOnlyId = val;
  }

  void __set_msgType(const std::string& val) {
    msgType = val;
  }

  void __set_msgId(const std::string& val) {
    msgId = val;
  }

  bool operator == (const CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userOnlyId == rhs.userOnlyId))
      return false;
    if (!(msgType == rhs.msgType))
      return false;
    if (!(msgId == rhs.msgId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_pargs {
 public:


  virtual ~CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* userOnlyId;
  const std::string* msgType;
  const std::string* msgId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_result__isset {
  _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_result__isset;

class CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_result {
 public:

  CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_result() {
  }

  virtual ~CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_presult__isset {
  _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_presult__isset;

class CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_presult {
 public:


  virtual ~CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateUserMsgDigest_args__isset {
  _CacheService_updateUserMsgDigest_args__isset() : maxCode(false), minCode(false), userOnlyId(false), msgType(false), msgId(false) {}
  bool maxCode;
  bool minCode;
  bool userOnlyId;
  bool msgType;
  bool msgId;
} _CacheService_updateUserMsgDigest_args__isset;

class CacheService_updateUserMsgDigest_args {
 public:

  CacheService_updateUserMsgDigest_args() : maxCode(), minCode(), userOnlyId(), msgType(), msgId() {
  }

  virtual ~CacheService_updateUserMsgDigest_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string userOnlyId;
  std::string msgType;
  std::string msgId;

  _CacheService_updateUserMsgDigest_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userOnlyId(const std::string& val) {
    userOnlyId = val;
  }

  void __set_msgType(const std::string& val) {
    msgType = val;
  }

  void __set_msgId(const std::string& val) {
    msgId = val;
  }

  bool operator == (const CacheService_updateUserMsgDigest_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userOnlyId == rhs.userOnlyId))
      return false;
    if (!(msgType == rhs.msgType))
      return false;
    if (!(msgId == rhs.msgId))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateUserMsgDigest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateUserMsgDigest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateUserMsgDigest_pargs {
 public:


  virtual ~CacheService_updateUserMsgDigest_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* userOnlyId;
  const std::string* msgType;
  const std::string* msgId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateUserMsgDigest_result__isset {
  _CacheService_updateUserMsgDigest_result__isset() : success(false) {}
  bool success;
} _CacheService_updateUserMsgDigest_result__isset;

class CacheService_updateUserMsgDigest_result {
 public:

  CacheService_updateUserMsgDigest_result() {
  }

  virtual ~CacheService_updateUserMsgDigest_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateUserMsgDigest_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateUserMsgDigest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateUserMsgDigest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateUserMsgDigest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateUserMsgDigest_presult__isset {
  _CacheService_updateUserMsgDigest_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateUserMsgDigest_presult__isset;

class CacheService_updateUserMsgDigest_presult {
 public:


  virtual ~CacheService_updateUserMsgDigest_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateUserMsgDigest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryUserMsgDigestByUserOnlyId_args__isset {
  _CacheService_queryUserMsgDigestByUserOnlyId_args__isset() : maxCode(false), minCode(false), userOnlyId(false) {}
  bool maxCode;
  bool minCode;
  bool userOnlyId;
} _CacheService_queryUserMsgDigestByUserOnlyId_args__isset;

class CacheService_queryUserMsgDigestByUserOnlyId_args {
 public:

  CacheService_queryUserMsgDigestByUserOnlyId_args() : maxCode(), minCode(), userOnlyId() {
  }

  virtual ~CacheService_queryUserMsgDigestByUserOnlyId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string userOnlyId;

  _CacheService_queryUserMsgDigestByUserOnlyId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userOnlyId(const std::string& val) {
    userOnlyId = val;
  }

  bool operator == (const CacheService_queryUserMsgDigestByUserOnlyId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userOnlyId == rhs.userOnlyId))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryUserMsgDigestByUserOnlyId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryUserMsgDigestByUserOnlyId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryUserMsgDigestByUserOnlyId_pargs {
 public:


  virtual ~CacheService_queryUserMsgDigestByUserOnlyId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* userOnlyId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryUserMsgDigestByUserOnlyId_result__isset {
  _CacheService_queryUserMsgDigestByUserOnlyId_result__isset() : success(false) {}
  bool success;
} _CacheService_queryUserMsgDigestByUserOnlyId_result__isset;

class CacheService_queryUserMsgDigestByUserOnlyId_result {
 public:

  CacheService_queryUserMsgDigestByUserOnlyId_result() {
  }

  virtual ~CacheService_queryUserMsgDigestByUserOnlyId_result() throw() {}

  std::map<std::string, std::vector<std::string> >  success;

  _CacheService_queryUserMsgDigestByUserOnlyId_result__isset __isset;

  void __set_success(const std::map<std::string, std::vector<std::string> > & val) {
    success = val;
  }

  bool operator == (const CacheService_queryUserMsgDigestByUserOnlyId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryUserMsgDigestByUserOnlyId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryUserMsgDigestByUserOnlyId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryUserMsgDigestByUserOnlyId_presult__isset {
  _CacheService_queryUserMsgDigestByUserOnlyId_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryUserMsgDigestByUserOnlyId_presult__isset;

class CacheService_queryUserMsgDigestByUserOnlyId_presult {
 public:


  virtual ~CacheService_queryUserMsgDigestByUserOnlyId_presult() throw() {}

  std::map<std::string, std::vector<std::string> > * success;

  _CacheService_queryUserMsgDigestByUserOnlyId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_args__isset {
  _CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_args__isset() : maxCode(false), minCode(false), userOnlyId(false), msgType(false) {}
  bool maxCode;
  bool minCode;
  bool userOnlyId;
  bool msgType;
} _CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_args__isset;

class CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_args {
 public:

  CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_args() : maxCode(), minCode(), userOnlyId(), msgType() {
  }

  virtual ~CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string userOnlyId;
  std::string msgType;

  _CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_userOnlyId(const std::string& val) {
    userOnlyId = val;
  }

  void __set_msgType(const std::string& val) {
    msgType = val;
  }

  bool operator == (const CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(userOnlyId == rhs.userOnlyId))
      return false;
    if (!(msgType == rhs.msgType))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_pargs {
 public:


  virtual ~CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* userOnlyId;
  const std::string* msgType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_result__isset {
  _CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_result__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_result__isset;

class CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_result {
 public:

  CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_result() {
  }

  virtual ~CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_result() throw() {}

  std::vector<std::string>  success;

  _CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_presult__isset {
  _CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_presult__isset;

class CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_presult {
 public:


  virtual ~CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_presult() throw() {}

  std::vector<std::string> * success;

  _CacheService_queryDeviceMsgDigestByUserOnlyIdAndMsgType_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveMsg_args__isset {
  _CacheService_saveMsg_args__isset() : maxCode(false), minCode(false), msgCache(false) {}
  bool maxCode;
  bool minCode;
  bool msgCache;
} _CacheService_saveMsg_args__isset;

class CacheService_saveMsg_args {
 public:

  CacheService_saveMsg_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_saveMsg_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::MsgCache msgCache;

  _CacheService_saveMsg_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_msgCache(const  ::com::vrv::cems::service::base::bean::cache::MsgCache& val) {
    msgCache = val;
  }

  bool operator == (const CacheService_saveMsg_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(msgCache == rhs.msgCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveMsg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveMsg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveMsg_pargs {
 public:


  virtual ~CacheService_saveMsg_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::MsgCache* msgCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveMsg_result__isset {
  _CacheService_saveMsg_result__isset() : success(false) {}
  bool success;
} _CacheService_saveMsg_result__isset;

class CacheService_saveMsg_result {
 public:

  CacheService_saveMsg_result() {
  }

  virtual ~CacheService_saveMsg_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveMsg_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveMsg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveMsg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveMsg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveMsg_presult__isset {
  _CacheService_saveMsg_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveMsg_presult__isset;

class CacheService_saveMsg_presult {
 public:


  virtual ~CacheService_saveMsg_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveMsg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteMsg_args__isset {
  _CacheService_deleteMsg_args__isset() : maxCode(false), minCode(false), msgId(false) {}
  bool maxCode;
  bool minCode;
  bool msgId;
} _CacheService_deleteMsg_args__isset;

class CacheService_deleteMsg_args {
 public:

  CacheService_deleteMsg_args() : maxCode(), minCode(), msgId() {
  }

  virtual ~CacheService_deleteMsg_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string msgId;

  _CacheService_deleteMsg_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_msgId(const std::string& val) {
    msgId = val;
  }

  bool operator == (const CacheService_deleteMsg_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(msgId == rhs.msgId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteMsg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteMsg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteMsg_pargs {
 public:


  virtual ~CacheService_deleteMsg_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* msgId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteMsg_result__isset {
  _CacheService_deleteMsg_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteMsg_result__isset;

class CacheService_deleteMsg_result {
 public:

  CacheService_deleteMsg_result() {
  }

  virtual ~CacheService_deleteMsg_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteMsg_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteMsg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteMsg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteMsg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteMsg_presult__isset {
  _CacheService_deleteMsg_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteMsg_presult__isset;

class CacheService_deleteMsg_presult {
 public:


  virtual ~CacheService_deleteMsg_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteMsg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryMsg_args__isset {
  _CacheService_queryMsg_args__isset() : maxCode(false), minCode(false), msgId(false) {}
  bool maxCode;
  bool minCode;
  bool msgId;
} _CacheService_queryMsg_args__isset;

class CacheService_queryMsg_args {
 public:

  CacheService_queryMsg_args() : maxCode(), minCode(), msgId() {
  }

  virtual ~CacheService_queryMsg_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string msgId;

  _CacheService_queryMsg_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_msgId(const std::string& val) {
    msgId = val;
  }

  bool operator == (const CacheService_queryMsg_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(msgId == rhs.msgId))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryMsg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryMsg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryMsg_pargs {
 public:


  virtual ~CacheService_queryMsg_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* msgId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryMsg_result__isset {
  _CacheService_queryMsg_result__isset() : success(false) {}
  bool success;
} _CacheService_queryMsg_result__isset;

class CacheService_queryMsg_result {
 public:

  CacheService_queryMsg_result() {
  }

  virtual ~CacheService_queryMsg_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::MsgCache success;

  _CacheService_queryMsg_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::MsgCache& val) {
    success = val;
  }

  bool operator == (const CacheService_queryMsg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryMsg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryMsg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryMsg_presult__isset {
  _CacheService_queryMsg_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryMsg_presult__isset;

class CacheService_queryMsg_presult {
 public:


  virtual ~CacheService_queryMsg_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::MsgCache* success;

  _CacheService_queryMsg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveToken_args__isset {
  _CacheService_saveToken_args__isset() : maxCode(false), minCode(false), tokenCache(false) {}
  bool maxCode;
  bool minCode;
  bool tokenCache;
} _CacheService_saveToken_args__isset;

class CacheService_saveToken_args {
 public:

  CacheService_saveToken_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_saveToken_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::TokenCache tokenCache;

  _CacheService_saveToken_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_tokenCache(const  ::com::vrv::cems::service::base::bean::cache::TokenCache& val) {
    tokenCache = val;
  }

  bool operator == (const CacheService_saveToken_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(tokenCache == rhs.tokenCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveToken_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveToken_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveToken_pargs {
 public:


  virtual ~CacheService_saveToken_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::TokenCache* tokenCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveToken_result__isset {
  _CacheService_saveToken_result__isset() : success(false) {}
  bool success;
} _CacheService_saveToken_result__isset;

class CacheService_saveToken_result {
 public:

  CacheService_saveToken_result() {
  }

  virtual ~CacheService_saveToken_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveToken_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveToken_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveToken_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveToken_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveToken_presult__isset {
  _CacheService_saveToken_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveToken_presult__isset;

class CacheService_saveToken_presult {
 public:


  virtual ~CacheService_saveToken_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveToken_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteTokenByAppId_args__isset {
  _CacheService_deleteTokenByAppId_args__isset() : maxCode(false), minCode(false), appId(false) {}
  bool maxCode;
  bool minCode;
  bool appId;
} _CacheService_deleteTokenByAppId_args__isset;

class CacheService_deleteTokenByAppId_args {
 public:

  CacheService_deleteTokenByAppId_args() : maxCode(), minCode(), appId() {
  }

  virtual ~CacheService_deleteTokenByAppId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string appId;

  _CacheService_deleteTokenByAppId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_appId(const std::string& val) {
    appId = val;
  }

  bool operator == (const CacheService_deleteTokenByAppId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(appId == rhs.appId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteTokenByAppId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteTokenByAppId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteTokenByAppId_pargs {
 public:


  virtual ~CacheService_deleteTokenByAppId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* appId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteTokenByAppId_result__isset {
  _CacheService_deleteTokenByAppId_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteTokenByAppId_result__isset;

class CacheService_deleteTokenByAppId_result {
 public:

  CacheService_deleteTokenByAppId_result() {
  }

  virtual ~CacheService_deleteTokenByAppId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteTokenByAppId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteTokenByAppId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteTokenByAppId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteTokenByAppId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteTokenByAppId_presult__isset {
  _CacheService_deleteTokenByAppId_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteTokenByAppId_presult__isset;

class CacheService_deleteTokenByAppId_presult {
 public:


  virtual ~CacheService_deleteTokenByAppId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteTokenByAppId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateTokenByAppId_args__isset {
  _CacheService_updateTokenByAppId_args__isset() : maxCode(false), minCode(false), tokenCache(false) {}
  bool maxCode;
  bool minCode;
  bool tokenCache;
} _CacheService_updateTokenByAppId_args__isset;

class CacheService_updateTokenByAppId_args {
 public:

  CacheService_updateTokenByAppId_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_updateTokenByAppId_args() throw() {}

  std::string maxCode;
  std::string minCode;
   ::com::vrv::cems::service::base::bean::cache::TokenCache tokenCache;

  _CacheService_updateTokenByAppId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_tokenCache(const  ::com::vrv::cems::service::base::bean::cache::TokenCache& val) {
    tokenCache = val;
  }

  bool operator == (const CacheService_updateTokenByAppId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(tokenCache == rhs.tokenCache))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateTokenByAppId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateTokenByAppId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateTokenByAppId_pargs {
 public:


  virtual ~CacheService_updateTokenByAppId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const  ::com::vrv::cems::service::base::bean::cache::TokenCache* tokenCache;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateTokenByAppId_result__isset {
  _CacheService_updateTokenByAppId_result__isset() : success(false) {}
  bool success;
} _CacheService_updateTokenByAppId_result__isset;

class CacheService_updateTokenByAppId_result {
 public:

  CacheService_updateTokenByAppId_result() {
  }

  virtual ~CacheService_updateTokenByAppId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateTokenByAppId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateTokenByAppId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateTokenByAppId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateTokenByAppId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateTokenByAppId_presult__isset {
  _CacheService_updateTokenByAppId_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateTokenByAppId_presult__isset;

class CacheService_updateTokenByAppId_presult {
 public:


  virtual ~CacheService_updateTokenByAppId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateTokenByAppId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_queryTokenByAppId_args__isset {
  _CacheService_queryTokenByAppId_args__isset() : maxCode(false), minCode(false), appId(false) {}
  bool maxCode;
  bool minCode;
  bool appId;
} _CacheService_queryTokenByAppId_args__isset;

class CacheService_queryTokenByAppId_args {
 public:

  CacheService_queryTokenByAppId_args() : maxCode(), minCode(), appId() {
  }

  virtual ~CacheService_queryTokenByAppId_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string appId;

  _CacheService_queryTokenByAppId_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_appId(const std::string& val) {
    appId = val;
  }

  bool operator == (const CacheService_queryTokenByAppId_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(appId == rhs.appId))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryTokenByAppId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryTokenByAppId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_queryTokenByAppId_pargs {
 public:


  virtual ~CacheService_queryTokenByAppId_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* appId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryTokenByAppId_result__isset {
  _CacheService_queryTokenByAppId_result__isset() : success(false) {}
  bool success;
} _CacheService_queryTokenByAppId_result__isset;

class CacheService_queryTokenByAppId_result {
 public:

  CacheService_queryTokenByAppId_result() {
  }

  virtual ~CacheService_queryTokenByAppId_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::TokenCache success;

  _CacheService_queryTokenByAppId_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::TokenCache& val) {
    success = val;
  }

  bool operator == (const CacheService_queryTokenByAppId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_queryTokenByAppId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_queryTokenByAppId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_queryTokenByAppId_presult__isset {
  _CacheService_queryTokenByAppId_presult__isset() : success(false) {}
  bool success;
} _CacheService_queryTokenByAppId_presult__isset;

class CacheService_queryTokenByAppId_presult {
 public:


  virtual ~CacheService_queryTokenByAppId_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::TokenCache* success;

  _CacheService_queryTokenByAppId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveSession_args__isset {
  _CacheService_saveSession_args__isset() : maxCode(false), minCode(false), sId(false), hashMap(false) {}
  bool maxCode;
  bool minCode;
  bool sId;
  bool hashMap;
} _CacheService_saveSession_args__isset;

class CacheService_saveSession_args {
 public:

  CacheService_saveSession_args() : maxCode(), minCode(), sId() {
  }

  virtual ~CacheService_saveSession_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string sId;
  std::map<std::string, std::string>  hashMap;

  _CacheService_saveSession_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_sId(const std::string& val) {
    sId = val;
  }

  void __set_hashMap(const std::map<std::string, std::string> & val) {
    hashMap = val;
  }

  bool operator == (const CacheService_saveSession_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(sId == rhs.sId))
      return false;
    if (!(hashMap == rhs.hashMap))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveSession_pargs {
 public:


  virtual ~CacheService_saveSession_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* sId;
  const std::map<std::string, std::string> * hashMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveSession_result__isset {
  _CacheService_saveSession_result__isset() : success(false) {}
  bool success;
} _CacheService_saveSession_result__isset;

class CacheService_saveSession_result {
 public:

  CacheService_saveSession_result() {
  }

  virtual ~CacheService_saveSession_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveSession_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveSession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveSession_presult__isset {
  _CacheService_saveSession_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveSession_presult__isset;

class CacheService_saveSession_presult {
 public:


  virtual ~CacheService_saveSession_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_saveSessionByDetail_args__isset {
  _CacheService_saveSessionByDetail_args__isset() : maxCode(false), minCode(false), sId(false), key(false), value(false) {}
  bool maxCode;
  bool minCode;
  bool sId;
  bool key;
  bool value;
} _CacheService_saveSessionByDetail_args__isset;

class CacheService_saveSessionByDetail_args {
 public:

  CacheService_saveSessionByDetail_args() : maxCode(), minCode(), sId(), key(), value() {
  }

  virtual ~CacheService_saveSessionByDetail_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string sId;
  std::string key;
  std::string value;

  _CacheService_saveSessionByDetail_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_sId(const std::string& val) {
    sId = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const CacheService_saveSessionByDetail_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(sId == rhs.sId))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveSessionByDetail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveSessionByDetail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_saveSessionByDetail_pargs {
 public:


  virtual ~CacheService_saveSessionByDetail_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* sId;
  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveSessionByDetail_result__isset {
  _CacheService_saveSessionByDetail_result__isset() : success(false) {}
  bool success;
} _CacheService_saveSessionByDetail_result__isset;

class CacheService_saveSessionByDetail_result {
 public:

  CacheService_saveSessionByDetail_result() {
  }

  virtual ~CacheService_saveSessionByDetail_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_saveSessionByDetail_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_saveSessionByDetail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_saveSessionByDetail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_saveSessionByDetail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_saveSessionByDetail_presult__isset {
  _CacheService_saveSessionByDetail_presult__isset() : success(false) {}
  bool success;
} _CacheService_saveSessionByDetail_presult__isset;

class CacheService_saveSessionByDetail_presult {
 public:


  virtual ~CacheService_saveSessionByDetail_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_saveSessionByDetail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteSession_args__isset {
  _CacheService_deleteSession_args__isset() : maxCode(false), minCode(false), sId(false) {}
  bool maxCode;
  bool minCode;
  bool sId;
} _CacheService_deleteSession_args__isset;

class CacheService_deleteSession_args {
 public:

  CacheService_deleteSession_args() : maxCode(), minCode(), sId() {
  }

  virtual ~CacheService_deleteSession_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string sId;

  _CacheService_deleteSession_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_sId(const std::string& val) {
    sId = val;
  }

  bool operator == (const CacheService_deleteSession_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(sId == rhs.sId))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteSession_pargs {
 public:


  virtual ~CacheService_deleteSession_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* sId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteSession_result__isset {
  _CacheService_deleteSession_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteSession_result__isset;

class CacheService_deleteSession_result {
 public:

  CacheService_deleteSession_result() {
  }

  virtual ~CacheService_deleteSession_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteSession_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteSession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteSession_presult__isset {
  _CacheService_deleteSession_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteSession_presult__isset;

class CacheService_deleteSession_presult {
 public:


  virtual ~CacheService_deleteSession_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_deleteSessionByDetail_args__isset {
  _CacheService_deleteSessionByDetail_args__isset() : maxCode(false), minCode(false), sId(false), key(false) {}
  bool maxCode;
  bool minCode;
  bool sId;
  bool key;
} _CacheService_deleteSessionByDetail_args__isset;

class CacheService_deleteSessionByDetail_args {
 public:

  CacheService_deleteSessionByDetail_args() : maxCode(), minCode(), sId(), key() {
  }

  virtual ~CacheService_deleteSessionByDetail_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string sId;
  std::string key;

  _CacheService_deleteSessionByDetail_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_sId(const std::string& val) {
    sId = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const CacheService_deleteSessionByDetail_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(sId == rhs.sId))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteSessionByDetail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteSessionByDetail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_deleteSessionByDetail_pargs {
 public:


  virtual ~CacheService_deleteSessionByDetail_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* sId;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteSessionByDetail_result__isset {
  _CacheService_deleteSessionByDetail_result__isset() : success(false) {}
  bool success;
} _CacheService_deleteSessionByDetail_result__isset;

class CacheService_deleteSessionByDetail_result {
 public:

  CacheService_deleteSessionByDetail_result() {
  }

  virtual ~CacheService_deleteSessionByDetail_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_deleteSessionByDetail_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_deleteSessionByDetail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_deleteSessionByDetail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_deleteSessionByDetail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_deleteSessionByDetail_presult__isset {
  _CacheService_deleteSessionByDetail_presult__isset() : success(false) {}
  bool success;
} _CacheService_deleteSessionByDetail_presult__isset;

class CacheService_deleteSessionByDetail_presult {
 public:


  virtual ~CacheService_deleteSessionByDetail_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_deleteSessionByDetail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updataSessionByDetail_args__isset {
  _CacheService_updataSessionByDetail_args__isset() : maxCode(false), minCode(false), sId(false), key(false), value(false) {}
  bool maxCode;
  bool minCode;
  bool sId;
  bool key;
  bool value;
} _CacheService_updataSessionByDetail_args__isset;

class CacheService_updataSessionByDetail_args {
 public:

  CacheService_updataSessionByDetail_args() : maxCode(), minCode(), sId(), key(), value() {
  }

  virtual ~CacheService_updataSessionByDetail_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string sId;
  std::string key;
  std::string value;

  _CacheService_updataSessionByDetail_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_sId(const std::string& val) {
    sId = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const CacheService_updataSessionByDetail_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(sId == rhs.sId))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CacheService_updataSessionByDetail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updataSessionByDetail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updataSessionByDetail_pargs {
 public:


  virtual ~CacheService_updataSessionByDetail_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* sId;
  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updataSessionByDetail_result__isset {
  _CacheService_updataSessionByDetail_result__isset() : success(false) {}
  bool success;
} _CacheService_updataSessionByDetail_result__isset;

class CacheService_updataSessionByDetail_result {
 public:

  CacheService_updataSessionByDetail_result() {
  }

  virtual ~CacheService_updataSessionByDetail_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updataSessionByDetail_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updataSessionByDetail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updataSessionByDetail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updataSessionByDetail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updataSessionByDetail_presult__isset {
  _CacheService_updataSessionByDetail_presult__isset() : success(false) {}
  bool success;
} _CacheService_updataSessionByDetail_presult__isset;

class CacheService_updataSessionByDetail_presult {
 public:


  virtual ~CacheService_updataSessionByDetail_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updataSessionByDetail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_updateSession_args__isset {
  _CacheService_updateSession_args__isset() : maxCode(false), minCode(false), sId(false), hashMap(false) {}
  bool maxCode;
  bool minCode;
  bool sId;
  bool hashMap;
} _CacheService_updateSession_args__isset;

class CacheService_updateSession_args {
 public:

  CacheService_updateSession_args() : maxCode(), minCode(), sId() {
  }

  virtual ~CacheService_updateSession_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string sId;
  std::map<std::string, std::string>  hashMap;

  _CacheService_updateSession_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_sId(const std::string& val) {
    sId = val;
  }

  void __set_hashMap(const std::map<std::string, std::string> & val) {
    hashMap = val;
  }

  bool operator == (const CacheService_updateSession_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(sId == rhs.sId))
      return false;
    if (!(hashMap == rhs.hashMap))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_updateSession_pargs {
 public:


  virtual ~CacheService_updateSession_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* sId;
  const std::map<std::string, std::string> * hashMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateSession_result__isset {
  _CacheService_updateSession_result__isset() : success(false) {}
  bool success;
} _CacheService_updateSession_result__isset;

class CacheService_updateSession_result {
 public:

  CacheService_updateSession_result() {
  }

  virtual ~CacheService_updateSession_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_updateSession_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_updateSession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_updateSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_updateSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_updateSession_presult__isset {
  _CacheService_updateSession_presult__isset() : success(false) {}
  bool success;
} _CacheService_updateSession_presult__isset;

class CacheService_updateSession_presult {
 public:


  virtual ~CacheService_updateSession_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_updateSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_querySessionByDetail_args__isset {
  _CacheService_querySessionByDetail_args__isset() : maxCode(false), minCode(false), sId(false), key(false) {}
  bool maxCode;
  bool minCode;
  bool sId;
  bool key;
} _CacheService_querySessionByDetail_args__isset;

class CacheService_querySessionByDetail_args {
 public:

  CacheService_querySessionByDetail_args() : maxCode(), minCode(), sId(), key() {
  }

  virtual ~CacheService_querySessionByDetail_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string sId;
  std::string key;

  _CacheService_querySessionByDetail_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_sId(const std::string& val) {
    sId = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const CacheService_querySessionByDetail_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(sId == rhs.sId))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const CacheService_querySessionByDetail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_querySessionByDetail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_querySessionByDetail_pargs {
 public:


  virtual ~CacheService_querySessionByDetail_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* sId;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_querySessionByDetail_result__isset {
  _CacheService_querySessionByDetail_result__isset() : success(false) {}
  bool success;
} _CacheService_querySessionByDetail_result__isset;

class CacheService_querySessionByDetail_result {
 public:

  CacheService_querySessionByDetail_result() : success() {
  }

  virtual ~CacheService_querySessionByDetail_result() throw() {}

  std::string success;

  _CacheService_querySessionByDetail_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const CacheService_querySessionByDetail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_querySessionByDetail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_querySessionByDetail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_querySessionByDetail_presult__isset {
  _CacheService_querySessionByDetail_presult__isset() : success(false) {}
  bool success;
} _CacheService_querySessionByDetail_presult__isset;

class CacheService_querySessionByDetail_presult {
 public:


  virtual ~CacheService_querySessionByDetail_presult() throw() {}

  std::string* success;

  _CacheService_querySessionByDetail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_querySession_args__isset {
  _CacheService_querySession_args__isset() : maxCode(false), minCode(false), sId(false) {}
  bool maxCode;
  bool minCode;
  bool sId;
} _CacheService_querySession_args__isset;

class CacheService_querySession_args {
 public:

  CacheService_querySession_args() : maxCode(), minCode(), sId() {
  }

  virtual ~CacheService_querySession_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string sId;

  _CacheService_querySession_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_sId(const std::string& val) {
    sId = val;
  }

  bool operator == (const CacheService_querySession_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(sId == rhs.sId))
      return false;
    return true;
  }
  bool operator != (const CacheService_querySession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_querySession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_querySession_pargs {
 public:


  virtual ~CacheService_querySession_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* sId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_querySession_result__isset {
  _CacheService_querySession_result__isset() : success(false) {}
  bool success;
} _CacheService_querySession_result__isset;

class CacheService_querySession_result {
 public:

  CacheService_querySession_result() {
  }

  virtual ~CacheService_querySession_result() throw() {}

  std::map<std::string, std::string>  success;

  _CacheService_querySession_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const CacheService_querySession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_querySession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_querySession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_querySession_presult__isset {
  _CacheService_querySession_presult__isset() : success(false) {}
  bool success;
} _CacheService_querySession_presult__isset;

class CacheService_querySession_presult {
 public:


  virtual ~CacheService_querySession_presult() throw() {}

  std::map<std::string, std::string> * success;

  _CacheService_querySession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonHset_args__isset {
  _CacheService_commonHset_args__isset() : maxCode(false), minCode(false), key(false), field(false), value(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool field;
  bool value;
} _CacheService_commonHset_args__isset;

class CacheService_commonHset_args {
 public:

  CacheService_commonHset_args() : maxCode(), minCode(), key(), field(), value() {
  }

  virtual ~CacheService_commonHset_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  std::string field;
  std::string value;

  _CacheService_commonHset_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_field(const std::string& val) {
    field = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const CacheService_commonHset_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonHset_pargs {
 public:


  virtual ~CacheService_commonHset_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHset_result__isset {
  _CacheService_commonHset_result__isset() : success(false) {}
  bool success;
} _CacheService_commonHset_result__isset;

class CacheService_commonHset_result {
 public:

  CacheService_commonHset_result() {
  }

  virtual ~CacheService_commonHset_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_commonHset_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_commonHset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHset_presult__isset {
  _CacheService_commonHset_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonHset_presult__isset;

class CacheService_commonHset_presult {
 public:


  virtual ~CacheService_commonHset_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_commonHset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonHmset_args__isset {
  _CacheService_commonHmset_args__isset() : maxCode(false), minCode(false), key(false), hashMap(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool hashMap;
} _CacheService_commonHmset_args__isset;

class CacheService_commonHmset_args {
 public:

  CacheService_commonHmset_args() : maxCode(), minCode(), key() {
  }

  virtual ~CacheService_commonHmset_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  std::map<std::string, std::string>  hashMap;

  _CacheService_commonHmset_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_hashMap(const std::map<std::string, std::string> & val) {
    hashMap = val;
  }

  bool operator == (const CacheService_commonHmset_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(hashMap == rhs.hashMap))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHmset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHmset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonHmset_pargs {
 public:


  virtual ~CacheService_commonHmset_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const std::map<std::string, std::string> * hashMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHmset_result__isset {
  _CacheService_commonHmset_result__isset() : success(false) {}
  bool success;
} _CacheService_commonHmset_result__isset;

class CacheService_commonHmset_result {
 public:

  CacheService_commonHmset_result() {
  }

  virtual ~CacheService_commonHmset_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_commonHmset_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_commonHmset_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHmset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHmset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHmset_presult__isset {
  _CacheService_commonHmset_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonHmset_presult__isset;

class CacheService_commonHmset_presult {
 public:


  virtual ~CacheService_commonHmset_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_commonHmset_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonHsetnx_args__isset {
  _CacheService_commonHsetnx_args__isset() : maxCode(false), minCode(false), key(false), field(false), value(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool field;
  bool value;
} _CacheService_commonHsetnx_args__isset;

class CacheService_commonHsetnx_args {
 public:

  CacheService_commonHsetnx_args() : maxCode(), minCode(), key(), field(), value() {
  }

  virtual ~CacheService_commonHsetnx_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  std::string field;
  std::string value;

  _CacheService_commonHsetnx_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_field(const std::string& val) {
    field = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const CacheService_commonHsetnx_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(field == rhs.field))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHsetnx_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHsetnx_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonHsetnx_pargs {
 public:


  virtual ~CacheService_commonHsetnx_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const std::string* field;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHsetnx_result__isset {
  _CacheService_commonHsetnx_result__isset() : success(false) {}
  bool success;
} _CacheService_commonHsetnx_result__isset;

class CacheService_commonHsetnx_result {
 public:

  CacheService_commonHsetnx_result() {
  }

  virtual ~CacheService_commonHsetnx_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_commonHsetnx_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_commonHsetnx_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHsetnx_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHsetnx_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHsetnx_presult__isset {
  _CacheService_commonHsetnx_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonHsetnx_presult__isset;

class CacheService_commonHsetnx_presult {
 public:


  virtual ~CacheService_commonHsetnx_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_commonHsetnx_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonHdel_args__isset {
  _CacheService_commonHdel_args__isset() : maxCode(false), minCode(false), key(false), fields(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool fields;
} _CacheService_commonHdel_args__isset;

class CacheService_commonHdel_args {
 public:

  CacheService_commonHdel_args() : maxCode(), minCode(), key() {
  }

  virtual ~CacheService_commonHdel_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  std::vector<std::string>  fields;

  _CacheService_commonHdel_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_fields(const std::vector<std::string> & val) {
    fields = val;
  }

  bool operator == (const CacheService_commonHdel_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHdel_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHdel_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonHdel_pargs {
 public:


  virtual ~CacheService_commonHdel_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const std::vector<std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHdel_result__isset {
  _CacheService_commonHdel_result__isset() : success(false) {}
  bool success;
} _CacheService_commonHdel_result__isset;

class CacheService_commonHdel_result {
 public:

  CacheService_commonHdel_result() {
  }

  virtual ~CacheService_commonHdel_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_commonHdel_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_commonHdel_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHdel_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHdel_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHdel_presult__isset {
  _CacheService_commonHdel_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonHdel_presult__isset;

class CacheService_commonHdel_presult {
 public:


  virtual ~CacheService_commonHdel_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_commonHdel_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonBatchHget_args__isset {
  _CacheService_commonBatchHget_args__isset() : maxCode(false), minCode(false), keys(false) {}
  bool maxCode;
  bool minCode;
  bool keys;
} _CacheService_commonBatchHget_args__isset;

class CacheService_commonBatchHget_args {
 public:

  CacheService_commonBatchHget_args() : maxCode(), minCode() {
  }

  virtual ~CacheService_commonBatchHget_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::vector<std::string>  keys;

  _CacheService_commonBatchHget_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_keys(const std::vector<std::string> & val) {
    keys = val;
  }

  bool operator == (const CacheService_commonBatchHget_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonBatchHget_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonBatchHget_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonBatchHget_pargs {
 public:


  virtual ~CacheService_commonBatchHget_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::vector<std::string> * keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonBatchHget_result__isset {
  _CacheService_commonBatchHget_result__isset() : success(false) {}
  bool success;
} _CacheService_commonBatchHget_result__isset;

class CacheService_commonBatchHget_result {
 public:

  CacheService_commonBatchHget_result() {
  }

  virtual ~CacheService_commonBatchHget_result() throw() {}

  std::map<std::string, std::map<std::string, std::string> >  success;

  _CacheService_commonBatchHget_result__isset __isset;

  void __set_success(const std::map<std::string, std::map<std::string, std::string> > & val) {
    success = val;
  }

  bool operator == (const CacheService_commonBatchHget_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonBatchHget_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonBatchHget_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonBatchHget_presult__isset {
  _CacheService_commonBatchHget_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonBatchHget_presult__isset;

class CacheService_commonBatchHget_presult {
 public:


  virtual ~CacheService_commonBatchHget_presult() throw() {}

  std::map<std::string, std::map<std::string, std::string> > * success;

  _CacheService_commonBatchHget_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonHgetAll_args__isset {
  _CacheService_commonHgetAll_args__isset() : maxCode(false), minCode(false), key(false) {}
  bool maxCode;
  bool minCode;
  bool key;
} _CacheService_commonHgetAll_args__isset;

class CacheService_commonHgetAll_args {
 public:

  CacheService_commonHgetAll_args() : maxCode(), minCode(), key() {
  }

  virtual ~CacheService_commonHgetAll_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;

  _CacheService_commonHgetAll_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const CacheService_commonHgetAll_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHgetAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHgetAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonHgetAll_pargs {
 public:


  virtual ~CacheService_commonHgetAll_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHgetAll_result__isset {
  _CacheService_commonHgetAll_result__isset() : success(false) {}
  bool success;
} _CacheService_commonHgetAll_result__isset;

class CacheService_commonHgetAll_result {
 public:

  CacheService_commonHgetAll_result() {
  }

  virtual ~CacheService_commonHgetAll_result() throw() {}

  std::map<std::string, std::string>  success;

  _CacheService_commonHgetAll_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const CacheService_commonHgetAll_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHgetAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHgetAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHgetAll_presult__isset {
  _CacheService_commonHgetAll_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonHgetAll_presult__isset;

class CacheService_commonHgetAll_presult {
 public:


  virtual ~CacheService_commonHgetAll_presult() throw() {}

  std::map<std::string, std::string> * success;

  _CacheService_commonHgetAll_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonHget_args__isset {
  _CacheService_commonHget_args__isset() : maxCode(false), minCode(false), key(false), field(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool field;
} _CacheService_commonHget_args__isset;

class CacheService_commonHget_args {
 public:

  CacheService_commonHget_args() : maxCode(), minCode(), key(), field() {
  }

  virtual ~CacheService_commonHget_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  std::string field;

  _CacheService_commonHget_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_field(const std::string& val) {
    field = val;
  }

  bool operator == (const CacheService_commonHget_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(field == rhs.field))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHget_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHget_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonHget_pargs {
 public:


  virtual ~CacheService_commonHget_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const std::string* field;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHget_result__isset {
  _CacheService_commonHget_result__isset() : success(false) {}
  bool success;
} _CacheService_commonHget_result__isset;

class CacheService_commonHget_result {
 public:

  CacheService_commonHget_result() : success() {
  }

  virtual ~CacheService_commonHget_result() throw() {}

  std::string success;

  _CacheService_commonHget_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const CacheService_commonHget_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHget_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHget_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHget_presult__isset {
  _CacheService_commonHget_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonHget_presult__isset;

class CacheService_commonHget_presult {
 public:


  virtual ~CacheService_commonHget_presult() throw() {}

  std::string* success;

  _CacheService_commonHget_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonHmget_args__isset {
  _CacheService_commonHmget_args__isset() : maxCode(false), minCode(false), key(false), fields(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool fields;
} _CacheService_commonHmget_args__isset;

class CacheService_commonHmget_args {
 public:

  CacheService_commonHmget_args() : maxCode(), minCode(), key() {
  }

  virtual ~CacheService_commonHmget_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  std::vector<std::string>  fields;

  _CacheService_commonHmget_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_fields(const std::vector<std::string> & val) {
    fields = val;
  }

  bool operator == (const CacheService_commonHmget_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(fields == rhs.fields))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHmget_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHmget_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonHmget_pargs {
 public:


  virtual ~CacheService_commonHmget_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const std::vector<std::string> * fields;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHmget_result__isset {
  _CacheService_commonHmget_result__isset() : success(false) {}
  bool success;
} _CacheService_commonHmget_result__isset;

class CacheService_commonHmget_result {
 public:

  CacheService_commonHmget_result() {
  }

  virtual ~CacheService_commonHmget_result() throw() {}

  std::vector<std::string>  success;

  _CacheService_commonHmget_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const CacheService_commonHmget_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHmget_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHmget_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHmget_presult__isset {
  _CacheService_commonHmget_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonHmget_presult__isset;

class CacheService_commonHmget_presult {
 public:


  virtual ~CacheService_commonHmget_presult() throw() {}

  std::vector<std::string> * success;

  _CacheService_commonHmget_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonHscan_args__isset {
  _CacheService_commonHscan_args__isset() : maxCode(false), minCode(false), key(false), cursor(false), match(false), count(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool cursor;
  bool match;
  bool count;
} _CacheService_commonHscan_args__isset;

class CacheService_commonHscan_args {
 public:

  CacheService_commonHscan_args() : maxCode(), minCode(), key(), cursor(), match(), count() {
  }

  virtual ~CacheService_commonHscan_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  std::string cursor;
  std::string match;
  std::string count;

  _CacheService_commonHscan_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_cursor(const std::string& val) {
    cursor = val;
  }

  void __set_match(const std::string& val) {
    match = val;
  }

  void __set_count(const std::string& val) {
    count = val;
  }

  bool operator == (const CacheService_commonHscan_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(cursor == rhs.cursor))
      return false;
    if (!(match == rhs.match))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHscan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHscan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonHscan_pargs {
 public:


  virtual ~CacheService_commonHscan_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const std::string* cursor;
  const std::string* match;
  const std::string* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHscan_result__isset {
  _CacheService_commonHscan_result__isset() : success(false) {}
  bool success;
} _CacheService_commonHscan_result__isset;

class CacheService_commonHscan_result {
 public:

  CacheService_commonHscan_result() {
  }

  virtual ~CacheService_commonHscan_result() throw() {}

  std::map<std::string, std::string>  success;

  _CacheService_commonHscan_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const CacheService_commonHscan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHscan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHscan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHscan_presult__isset {
  _CacheService_commonHscan_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonHscan_presult__isset;

class CacheService_commonHscan_presult {
 public:


  virtual ~CacheService_commonHscan_presult() throw() {}

  std::map<std::string, std::string> * success;

  _CacheService_commonHscan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonHvals_args__isset {
  _CacheService_commonHvals_args__isset() : maxCode(false), minCode(false), key(false) {}
  bool maxCode;
  bool minCode;
  bool key;
} _CacheService_commonHvals_args__isset;

class CacheService_commonHvals_args {
 public:

  CacheService_commonHvals_args() : maxCode(), minCode(), key() {
  }

  virtual ~CacheService_commonHvals_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;

  _CacheService_commonHvals_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const CacheService_commonHvals_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHvals_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHvals_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonHvals_pargs {
 public:


  virtual ~CacheService_commonHvals_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHvals_result__isset {
  _CacheService_commonHvals_result__isset() : success(false) {}
  bool success;
} _CacheService_commonHvals_result__isset;

class CacheService_commonHvals_result {
 public:

  CacheService_commonHvals_result() {
  }

  virtual ~CacheService_commonHvals_result() throw() {}

  std::vector<std::string>  success;

  _CacheService_commonHvals_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const CacheService_commonHvals_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHvals_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHvals_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHvals_presult__isset {
  _CacheService_commonHvals_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonHvals_presult__isset;

class CacheService_commonHvals_presult {
 public:


  virtual ~CacheService_commonHvals_presult() throw() {}

  std::vector<std::string> * success;

  _CacheService_commonHvals_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonHexists_args__isset {
  _CacheService_commonHexists_args__isset() : maxCode(false), minCode(false), key(false), field(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool field;
} _CacheService_commonHexists_args__isset;

class CacheService_commonHexists_args {
 public:

  CacheService_commonHexists_args() : maxCode(), minCode(), key(), field() {
  }

  virtual ~CacheService_commonHexists_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  std::string field;

  _CacheService_commonHexists_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_field(const std::string& val) {
    field = val;
  }

  bool operator == (const CacheService_commonHexists_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(field == rhs.field))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHexists_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHexists_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonHexists_pargs {
 public:


  virtual ~CacheService_commonHexists_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const std::string* field;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHexists_result__isset {
  _CacheService_commonHexists_result__isset() : success(false) {}
  bool success;
} _CacheService_commonHexists_result__isset;

class CacheService_commonHexists_result {
 public:

  CacheService_commonHexists_result() : success(0) {
  }

  virtual ~CacheService_commonHexists_result() throw() {}

  bool success;

  _CacheService_commonHexists_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const CacheService_commonHexists_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHexists_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHexists_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHexists_presult__isset {
  _CacheService_commonHexists_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonHexists_presult__isset;

class CacheService_commonHexists_presult {
 public:


  virtual ~CacheService_commonHexists_presult() throw() {}

  bool* success;

  _CacheService_commonHexists_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonHlen_args__isset {
  _CacheService_commonHlen_args__isset() : maxCode(false), minCode(false), key(false) {}
  bool maxCode;
  bool minCode;
  bool key;
} _CacheService_commonHlen_args__isset;

class CacheService_commonHlen_args {
 public:

  CacheService_commonHlen_args() : maxCode(), minCode(), key() {
  }

  virtual ~CacheService_commonHlen_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;

  _CacheService_commonHlen_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const CacheService_commonHlen_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHlen_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHlen_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonHlen_pargs {
 public:


  virtual ~CacheService_commonHlen_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHlen_result__isset {
  _CacheService_commonHlen_result__isset() : success(false) {}
  bool success;
} _CacheService_commonHlen_result__isset;

class CacheService_commonHlen_result {
 public:

  CacheService_commonHlen_result() : success(0) {
  }

  virtual ~CacheService_commonHlen_result() throw() {}

  int64_t success;

  _CacheService_commonHlen_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const CacheService_commonHlen_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonHlen_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonHlen_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonHlen_presult__isset {
  _CacheService_commonHlen_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonHlen_presult__isset;

class CacheService_commonHlen_presult {
 public:


  virtual ~CacheService_commonHlen_presult() throw() {}

  int64_t* success;

  _CacheService_commonHlen_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonZadd_args__isset {
  _CacheService_commonZadd_args__isset() : maxCode(false), minCode(false), key(false), hashMap(false), options(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool hashMap;
  bool options;
} _CacheService_commonZadd_args__isset;

class CacheService_commonZadd_args {
 public:

  CacheService_commonZadd_args() : maxCode(), minCode(), key(), options() {
  }

  virtual ~CacheService_commonZadd_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  std::map<std::string, double>  hashMap;
  std::string options;

  _CacheService_commonZadd_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_hashMap(const std::map<std::string, double> & val) {
    hashMap = val;
  }

  void __set_options(const std::string& val) {
    options = val;
  }

  bool operator == (const CacheService_commonZadd_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(hashMap == rhs.hashMap))
      return false;
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZadd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZadd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonZadd_pargs {
 public:


  virtual ~CacheService_commonZadd_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const std::map<std::string, double> * hashMap;
  const std::string* options;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZadd_result__isset {
  _CacheService_commonZadd_result__isset() : success(false) {}
  bool success;
} _CacheService_commonZadd_result__isset;

class CacheService_commonZadd_result {
 public:

  CacheService_commonZadd_result() {
  }

  virtual ~CacheService_commonZadd_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_commonZadd_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_commonZadd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZadd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZadd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZadd_presult__isset {
  _CacheService_commonZadd_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonZadd_presult__isset;

class CacheService_commonZadd_presult {
 public:


  virtual ~CacheService_commonZadd_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_commonZadd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonZrem_args__isset {
  _CacheService_commonZrem_args__isset() : maxCode(false), minCode(false), key(false), members(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool members;
} _CacheService_commonZrem_args__isset;

class CacheService_commonZrem_args {
 public:

  CacheService_commonZrem_args() : maxCode(), minCode(), key() {
  }

  virtual ~CacheService_commonZrem_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  std::vector<std::string>  members;

  _CacheService_commonZrem_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_members(const std::vector<std::string> & val) {
    members = val;
  }

  bool operator == (const CacheService_commonZrem_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(members == rhs.members))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZrem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZrem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonZrem_pargs {
 public:


  virtual ~CacheService_commonZrem_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const std::vector<std::string> * members;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZrem_result__isset {
  _CacheService_commonZrem_result__isset() : success(false) {}
  bool success;
} _CacheService_commonZrem_result__isset;

class CacheService_commonZrem_result {
 public:

  CacheService_commonZrem_result() {
  }

  virtual ~CacheService_commonZrem_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_commonZrem_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_commonZrem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZrem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZrem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZrem_presult__isset {
  _CacheService_commonZrem_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonZrem_presult__isset;

class CacheService_commonZrem_presult {
 public:


  virtual ~CacheService_commonZrem_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_commonZrem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonZremrangeByScore_args__isset {
  _CacheService_commonZremrangeByScore_args__isset() : maxCode(false), minCode(false), key(false), min(false), max(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool min;
  bool max;
} _CacheService_commonZremrangeByScore_args__isset;

class CacheService_commonZremrangeByScore_args {
 public:

  CacheService_commonZremrangeByScore_args() : maxCode(), minCode(), key(), min(0), max(0) {
  }

  virtual ~CacheService_commonZremrangeByScore_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  double min;
  double max;

  _CacheService_commonZremrangeByScore_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_min(const double val) {
    min = val;
  }

  void __set_max(const double val) {
    max = val;
  }

  bool operator == (const CacheService_commonZremrangeByScore_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(min == rhs.min))
      return false;
    if (!(max == rhs.max))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZremrangeByScore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZremrangeByScore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonZremrangeByScore_pargs {
 public:


  virtual ~CacheService_commonZremrangeByScore_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const double* min;
  const double* max;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZremrangeByScore_result__isset {
  _CacheService_commonZremrangeByScore_result__isset() : success(false) {}
  bool success;
} _CacheService_commonZremrangeByScore_result__isset;

class CacheService_commonZremrangeByScore_result {
 public:

  CacheService_commonZremrangeByScore_result() {
  }

  virtual ~CacheService_commonZremrangeByScore_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_commonZremrangeByScore_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_commonZremrangeByScore_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZremrangeByScore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZremrangeByScore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZremrangeByScore_presult__isset {
  _CacheService_commonZremrangeByScore_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonZremrangeByScore_presult__isset;

class CacheService_commonZremrangeByScore_presult {
 public:


  virtual ~CacheService_commonZremrangeByScore_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_commonZremrangeByScore_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonZremrangeByRank_args__isset {
  _CacheService_commonZremrangeByRank_args__isset() : maxCode(false), minCode(false), key(false), min(false), max(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool min;
  bool max;
} _CacheService_commonZremrangeByRank_args__isset;

class CacheService_commonZremrangeByRank_args {
 public:

  CacheService_commonZremrangeByRank_args() : maxCode(), minCode(), key(), min(0), max(0) {
  }

  virtual ~CacheService_commonZremrangeByRank_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  int64_t min;
  int64_t max;

  _CacheService_commonZremrangeByRank_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_min(const int64_t val) {
    min = val;
  }

  void __set_max(const int64_t val) {
    max = val;
  }

  bool operator == (const CacheService_commonZremrangeByRank_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(min == rhs.min))
      return false;
    if (!(max == rhs.max))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZremrangeByRank_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZremrangeByRank_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonZremrangeByRank_pargs {
 public:


  virtual ~CacheService_commonZremrangeByRank_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const int64_t* min;
  const int64_t* max;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZremrangeByRank_result__isset {
  _CacheService_commonZremrangeByRank_result__isset() : success(false) {}
  bool success;
} _CacheService_commonZremrangeByRank_result__isset;

class CacheService_commonZremrangeByRank_result {
 public:

  CacheService_commonZremrangeByRank_result() {
  }

  virtual ~CacheService_commonZremrangeByRank_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_commonZremrangeByRank_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_commonZremrangeByRank_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZremrangeByRank_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZremrangeByRank_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZremrangeByRank_presult__isset {
  _CacheService_commonZremrangeByRank_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonZremrangeByRank_presult__isset;

class CacheService_commonZremrangeByRank_presult {
 public:


  virtual ~CacheService_commonZremrangeByRank_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_commonZremrangeByRank_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonZremrangeByLex_args__isset {
  _CacheService_commonZremrangeByLex_args__isset() : maxCode(false), minCode(false), key(false), min(false), max(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool min;
  bool max;
} _CacheService_commonZremrangeByLex_args__isset;

class CacheService_commonZremrangeByLex_args {
 public:

  CacheService_commonZremrangeByLex_args() : maxCode(), minCode(), key(), min(), max() {
  }

  virtual ~CacheService_commonZremrangeByLex_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  std::string min;
  std::string max;

  _CacheService_commonZremrangeByLex_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_min(const std::string& val) {
    min = val;
  }

  void __set_max(const std::string& val) {
    max = val;
  }

  bool operator == (const CacheService_commonZremrangeByLex_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(min == rhs.min))
      return false;
    if (!(max == rhs.max))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZremrangeByLex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZremrangeByLex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonZremrangeByLex_pargs {
 public:


  virtual ~CacheService_commonZremrangeByLex_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const std::string* min;
  const std::string* max;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZremrangeByLex_result__isset {
  _CacheService_commonZremrangeByLex_result__isset() : success(false) {}
  bool success;
} _CacheService_commonZremrangeByLex_result__isset;

class CacheService_commonZremrangeByLex_result {
 public:

  CacheService_commonZremrangeByLex_result() {
  }

  virtual ~CacheService_commonZremrangeByLex_result() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result success;

  _CacheService_commonZremrangeByLex_result__isset __isset;

  void __set_success(const  ::com::vrv::cems::service::base::bean::cache::Result& val) {
    success = val;
  }

  bool operator == (const CacheService_commonZremrangeByLex_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZremrangeByLex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZremrangeByLex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZremrangeByLex_presult__isset {
  _CacheService_commonZremrangeByLex_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonZremrangeByLex_presult__isset;

class CacheService_commonZremrangeByLex_presult {
 public:


  virtual ~CacheService_commonZremrangeByLex_presult() throw() {}

   ::com::vrv::cems::service::base::bean::cache::Result* success;

  _CacheService_commonZremrangeByLex_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonZcard_args__isset {
  _CacheService_commonZcard_args__isset() : maxCode(false), minCode(false), key(false) {}
  bool maxCode;
  bool minCode;
  bool key;
} _CacheService_commonZcard_args__isset;

class CacheService_commonZcard_args {
 public:

  CacheService_commonZcard_args() : maxCode(), minCode(), key() {
  }

  virtual ~CacheService_commonZcard_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;

  _CacheService_commonZcard_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const CacheService_commonZcard_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZcard_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZcard_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonZcard_pargs {
 public:


  virtual ~CacheService_commonZcard_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZcard_result__isset {
  _CacheService_commonZcard_result__isset() : success(false) {}
  bool success;
} _CacheService_commonZcard_result__isset;

class CacheService_commonZcard_result {
 public:

  CacheService_commonZcard_result() : success(0) {
  }

  virtual ~CacheService_commonZcard_result() throw() {}

  int64_t success;

  _CacheService_commonZcard_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const CacheService_commonZcard_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZcard_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZcard_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZcard_presult__isset {
  _CacheService_commonZcard_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonZcard_presult__isset;

class CacheService_commonZcard_presult {
 public:


  virtual ~CacheService_commonZcard_presult() throw() {}

  int64_t* success;

  _CacheService_commonZcard_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonZscore_args__isset {
  _CacheService_commonZscore_args__isset() : maxCode(false), minCode(false), key(false), member(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool member;
} _CacheService_commonZscore_args__isset;

class CacheService_commonZscore_args {
 public:

  CacheService_commonZscore_args() : maxCode(), minCode(), key(), member() {
  }

  virtual ~CacheService_commonZscore_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  std::string member;

  _CacheService_commonZscore_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_member(const std::string& val) {
    member = val;
  }

  bool operator == (const CacheService_commonZscore_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(member == rhs.member))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZscore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZscore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonZscore_pargs {
 public:


  virtual ~CacheService_commonZscore_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const std::string* member;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZscore_result__isset {
  _CacheService_commonZscore_result__isset() : success(false) {}
  bool success;
} _CacheService_commonZscore_result__isset;

class CacheService_commonZscore_result {
 public:

  CacheService_commonZscore_result() : success(0) {
  }

  virtual ~CacheService_commonZscore_result() throw() {}

  double success;

  _CacheService_commonZscore_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const CacheService_commonZscore_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZscore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZscore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZscore_presult__isset {
  _CacheService_commonZscore_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonZscore_presult__isset;

class CacheService_commonZscore_presult {
 public:


  virtual ~CacheService_commonZscore_presult() throw() {}

  double* success;

  _CacheService_commonZscore_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonZrank_args__isset {
  _CacheService_commonZrank_args__isset() : maxCode(false), minCode(false), key(false), member(false), sortType(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool member;
  bool sortType;
} _CacheService_commonZrank_args__isset;

class CacheService_commonZrank_args {
 public:

  CacheService_commonZrank_args() : maxCode(), minCode(), key(), member(), sortType() {
  }

  virtual ~CacheService_commonZrank_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  std::string member;
  std::string sortType;

  _CacheService_commonZrank_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_member(const std::string& val) {
    member = val;
  }

  void __set_sortType(const std::string& val) {
    sortType = val;
  }

  bool operator == (const CacheService_commonZrank_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(member == rhs.member))
      return false;
    if (!(sortType == rhs.sortType))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZrank_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZrank_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonZrank_pargs {
 public:


  virtual ~CacheService_commonZrank_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const std::string* member;
  const std::string* sortType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZrank_result__isset {
  _CacheService_commonZrank_result__isset() : success(false) {}
  bool success;
} _CacheService_commonZrank_result__isset;

class CacheService_commonZrank_result {
 public:

  CacheService_commonZrank_result() : success(0) {
  }

  virtual ~CacheService_commonZrank_result() throw() {}

  int64_t success;

  _CacheService_commonZrank_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const CacheService_commonZrank_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZrank_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZrank_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZrank_presult__isset {
  _CacheService_commonZrank_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonZrank_presult__isset;

class CacheService_commonZrank_presult {
 public:


  virtual ~CacheService_commonZrank_presult() throw() {}

  int64_t* success;

  _CacheService_commonZrank_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonPageZrangeByScore_args__isset {
  _CacheService_commonPageZrangeByScore_args__isset() : maxCode(false), minCode(false), key(false), min(false), max(false), sortType(false), offset(false), count(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool min;
  bool max;
  bool sortType;
  bool offset;
  bool count;
} _CacheService_commonPageZrangeByScore_args__isset;

class CacheService_commonPageZrangeByScore_args {
 public:

  CacheService_commonPageZrangeByScore_args() : maxCode(), minCode(), key(), min(0), max(0), sortType(), offset(0), count(0) {
  }

  virtual ~CacheService_commonPageZrangeByScore_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  double min;
  double max;
  std::string sortType;
  int32_t offset;
  int32_t count;

  _CacheService_commonPageZrangeByScore_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_min(const double val) {
    min = val;
  }

  void __set_max(const double val) {
    max = val;
  }

  void __set_sortType(const std::string& val) {
    sortType = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  void __set_count(const int32_t val) {
    count = val;
  }

  bool operator == (const CacheService_commonPageZrangeByScore_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(min == rhs.min))
      return false;
    if (!(max == rhs.max))
      return false;
    if (!(sortType == rhs.sortType))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonPageZrangeByScore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonPageZrangeByScore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonPageZrangeByScore_pargs {
 public:


  virtual ~CacheService_commonPageZrangeByScore_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const double* min;
  const double* max;
  const std::string* sortType;
  const int32_t* offset;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonPageZrangeByScore_result__isset {
  _CacheService_commonPageZrangeByScore_result__isset() : success(false) {}
  bool success;
} _CacheService_commonPageZrangeByScore_result__isset;

class CacheService_commonPageZrangeByScore_result {
 public:

  CacheService_commonPageZrangeByScore_result() {
  }

  virtual ~CacheService_commonPageZrangeByScore_result() throw() {}

  std::set<std::string>  success;

  _CacheService_commonPageZrangeByScore_result__isset __isset;

  void __set_success(const std::set<std::string> & val) {
    success = val;
  }

  bool operator == (const CacheService_commonPageZrangeByScore_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonPageZrangeByScore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonPageZrangeByScore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonPageZrangeByScore_presult__isset {
  _CacheService_commonPageZrangeByScore_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonPageZrangeByScore_presult__isset;

class CacheService_commonPageZrangeByScore_presult {
 public:


  virtual ~CacheService_commonPageZrangeByScore_presult() throw() {}

  std::set<std::string> * success;

  _CacheService_commonPageZrangeByScore_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonPageZrangeByScoreWithScores_args__isset {
  _CacheService_commonPageZrangeByScoreWithScores_args__isset() : maxCode(false), minCode(false), key(false), min(false), max(false), sortType(false), offset(false), count(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool min;
  bool max;
  bool sortType;
  bool offset;
  bool count;
} _CacheService_commonPageZrangeByScoreWithScores_args__isset;

class CacheService_commonPageZrangeByScoreWithScores_args {
 public:

  CacheService_commonPageZrangeByScoreWithScores_args() : maxCode(), minCode(), key(), min(0), max(0), sortType(), offset(0), count(0) {
  }

  virtual ~CacheService_commonPageZrangeByScoreWithScores_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  double min;
  double max;
  std::string sortType;
  int32_t offset;
  int32_t count;

  _CacheService_commonPageZrangeByScoreWithScores_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_min(const double val) {
    min = val;
  }

  void __set_max(const double val) {
    max = val;
  }

  void __set_sortType(const std::string& val) {
    sortType = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  void __set_count(const int32_t val) {
    count = val;
  }

  bool operator == (const CacheService_commonPageZrangeByScoreWithScores_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(min == rhs.min))
      return false;
    if (!(max == rhs.max))
      return false;
    if (!(sortType == rhs.sortType))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonPageZrangeByScoreWithScores_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonPageZrangeByScoreWithScores_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonPageZrangeByScoreWithScores_pargs {
 public:


  virtual ~CacheService_commonPageZrangeByScoreWithScores_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const double* min;
  const double* max;
  const std::string* sortType;
  const int32_t* offset;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonPageZrangeByScoreWithScores_result__isset {
  _CacheService_commonPageZrangeByScoreWithScores_result__isset() : success(false) {}
  bool success;
} _CacheService_commonPageZrangeByScoreWithScores_result__isset;

class CacheService_commonPageZrangeByScoreWithScores_result {
 public:

  CacheService_commonPageZrangeByScoreWithScores_result() {
  }

  virtual ~CacheService_commonPageZrangeByScoreWithScores_result() throw() {}

  std::map<std::string, std::string>  success;

  _CacheService_commonPageZrangeByScoreWithScores_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const CacheService_commonPageZrangeByScoreWithScores_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonPageZrangeByScoreWithScores_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonPageZrangeByScoreWithScores_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonPageZrangeByScoreWithScores_presult__isset {
  _CacheService_commonPageZrangeByScoreWithScores_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonPageZrangeByScoreWithScores_presult__isset;

class CacheService_commonPageZrangeByScoreWithScores_presult {
 public:


  virtual ~CacheService_commonPageZrangeByScoreWithScores_presult() throw() {}

  std::map<std::string, std::string> * success;

  _CacheService_commonPageZrangeByScoreWithScores_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonZrangeByScore_args__isset {
  _CacheService_commonZrangeByScore_args__isset() : maxCode(false), minCode(false), key(false), min(false), max(false), sortType(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool min;
  bool max;
  bool sortType;
} _CacheService_commonZrangeByScore_args__isset;

class CacheService_commonZrangeByScore_args {
 public:

  CacheService_commonZrangeByScore_args() : maxCode(), minCode(), key(), min(0), max(0), sortType() {
  }

  virtual ~CacheService_commonZrangeByScore_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  double min;
  double max;
  std::string sortType;

  _CacheService_commonZrangeByScore_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_min(const double val) {
    min = val;
  }

  void __set_max(const double val) {
    max = val;
  }

  void __set_sortType(const std::string& val) {
    sortType = val;
  }

  bool operator == (const CacheService_commonZrangeByScore_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(min == rhs.min))
      return false;
    if (!(max == rhs.max))
      return false;
    if (!(sortType == rhs.sortType))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZrangeByScore_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZrangeByScore_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonZrangeByScore_pargs {
 public:


  virtual ~CacheService_commonZrangeByScore_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const double* min;
  const double* max;
  const std::string* sortType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZrangeByScore_result__isset {
  _CacheService_commonZrangeByScore_result__isset() : success(false) {}
  bool success;
} _CacheService_commonZrangeByScore_result__isset;

class CacheService_commonZrangeByScore_result {
 public:

  CacheService_commonZrangeByScore_result() {
  }

  virtual ~CacheService_commonZrangeByScore_result() throw() {}

  std::map<std::string, std::string>  success;

  _CacheService_commonZrangeByScore_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const CacheService_commonZrangeByScore_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZrangeByScore_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZrangeByScore_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZrangeByScore_presult__isset {
  _CacheService_commonZrangeByScore_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonZrangeByScore_presult__isset;

class CacheService_commonZrangeByScore_presult {
 public:


  virtual ~CacheService_commonZrangeByScore_presult() throw() {}

  std::map<std::string, std::string> * success;

  _CacheService_commonZrangeByScore_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonZrangeByScoreWithScores_args__isset {
  _CacheService_commonZrangeByScoreWithScores_args__isset() : maxCode(false), minCode(false), key(false), min(false), max(false), sortType(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool min;
  bool max;
  bool sortType;
} _CacheService_commonZrangeByScoreWithScores_args__isset;

class CacheService_commonZrangeByScoreWithScores_args {
 public:

  CacheService_commonZrangeByScoreWithScores_args() : maxCode(), minCode(), key(), min(0), max(0), sortType() {
  }

  virtual ~CacheService_commonZrangeByScoreWithScores_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  double min;
  double max;
  std::string sortType;

  _CacheService_commonZrangeByScoreWithScores_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_min(const double val) {
    min = val;
  }

  void __set_max(const double val) {
    max = val;
  }

  void __set_sortType(const std::string& val) {
    sortType = val;
  }

  bool operator == (const CacheService_commonZrangeByScoreWithScores_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(min == rhs.min))
      return false;
    if (!(max == rhs.max))
      return false;
    if (!(sortType == rhs.sortType))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZrangeByScoreWithScores_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZrangeByScoreWithScores_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonZrangeByScoreWithScores_pargs {
 public:


  virtual ~CacheService_commonZrangeByScoreWithScores_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const double* min;
  const double* max;
  const std::string* sortType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZrangeByScoreWithScores_result__isset {
  _CacheService_commonZrangeByScoreWithScores_result__isset() : success(false) {}
  bool success;
} _CacheService_commonZrangeByScoreWithScores_result__isset;

class CacheService_commonZrangeByScoreWithScores_result {
 public:

  CacheService_commonZrangeByScoreWithScores_result() {
  }

  virtual ~CacheService_commonZrangeByScoreWithScores_result() throw() {}

  std::set<std::string>  success;

  _CacheService_commonZrangeByScoreWithScores_result__isset __isset;

  void __set_success(const std::set<std::string> & val) {
    success = val;
  }

  bool operator == (const CacheService_commonZrangeByScoreWithScores_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZrangeByScoreWithScores_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZrangeByScoreWithScores_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZrangeByScoreWithScores_presult__isset {
  _CacheService_commonZrangeByScoreWithScores_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonZrangeByScoreWithScores_presult__isset;

class CacheService_commonZrangeByScoreWithScores_presult {
 public:


  virtual ~CacheService_commonZrangeByScoreWithScores_presult() throw() {}

  std::set<std::string> * success;

  _CacheService_commonZrangeByScoreWithScores_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonZrange_args__isset {
  _CacheService_commonZrange_args__isset() : maxCode(false), minCode(false), key(false), min(false), max(false), sortType(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool min;
  bool max;
  bool sortType;
} _CacheService_commonZrange_args__isset;

class CacheService_commonZrange_args {
 public:

  CacheService_commonZrange_args() : maxCode(), minCode(), key(), min(0), max(0), sortType() {
  }

  virtual ~CacheService_commonZrange_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  int64_t min;
  int64_t max;
  std::string sortType;

  _CacheService_commonZrange_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_min(const int64_t val) {
    min = val;
  }

  void __set_max(const int64_t val) {
    max = val;
  }

  void __set_sortType(const std::string& val) {
    sortType = val;
  }

  bool operator == (const CacheService_commonZrange_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(min == rhs.min))
      return false;
    if (!(max == rhs.max))
      return false;
    if (!(sortType == rhs.sortType))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZrange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZrange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonZrange_pargs {
 public:


  virtual ~CacheService_commonZrange_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const int64_t* min;
  const int64_t* max;
  const std::string* sortType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZrange_result__isset {
  _CacheService_commonZrange_result__isset() : success(false) {}
  bool success;
} _CacheService_commonZrange_result__isset;

class CacheService_commonZrange_result {
 public:

  CacheService_commonZrange_result() {
  }

  virtual ~CacheService_commonZrange_result() throw() {}

  std::set<std::string>  success;

  _CacheService_commonZrange_result__isset __isset;

  void __set_success(const std::set<std::string> & val) {
    success = val;
  }

  bool operator == (const CacheService_commonZrange_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZrange_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZrange_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZrange_presult__isset {
  _CacheService_commonZrange_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonZrange_presult__isset;

class CacheService_commonZrange_presult {
 public:


  virtual ~CacheService_commonZrange_presult() throw() {}

  std::set<std::string> * success;

  _CacheService_commonZrange_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonZincrby_args__isset {
  _CacheService_commonZincrby_args__isset() : maxCode(false), minCode(false), key(false), sorce(false), member(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool sorce;
  bool member;
} _CacheService_commonZincrby_args__isset;

class CacheService_commonZincrby_args {
 public:

  CacheService_commonZincrby_args() : maxCode(), minCode(), key(), sorce(0), member() {
  }

  virtual ~CacheService_commonZincrby_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  double sorce;
  std::string member;

  _CacheService_commonZincrby_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_sorce(const double val) {
    sorce = val;
  }

  void __set_member(const std::string& val) {
    member = val;
  }

  bool operator == (const CacheService_commonZincrby_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(sorce == rhs.sorce))
      return false;
    if (!(member == rhs.member))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZincrby_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZincrby_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonZincrby_pargs {
 public:


  virtual ~CacheService_commonZincrby_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const double* sorce;
  const std::string* member;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZincrby_result__isset {
  _CacheService_commonZincrby_result__isset() : success(false) {}
  bool success;
} _CacheService_commonZincrby_result__isset;

class CacheService_commonZincrby_result {
 public:

  CacheService_commonZincrby_result() : success(0) {
  }

  virtual ~CacheService_commonZincrby_result() throw() {}

  double success;

  _CacheService_commonZincrby_result__isset __isset;

  void __set_success(const double val) {
    success = val;
  }

  bool operator == (const CacheService_commonZincrby_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZincrby_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZincrby_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZincrby_presult__isset {
  _CacheService_commonZincrby_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonZincrby_presult__isset;

class CacheService_commonZincrby_presult {
 public:


  virtual ~CacheService_commonZincrby_presult() throw() {}

  double* success;

  _CacheService_commonZincrby_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CacheService_commonZcount_args__isset {
  _CacheService_commonZcount_args__isset() : maxCode(false), minCode(false), key(false), min(false), max(false) {}
  bool maxCode;
  bool minCode;
  bool key;
  bool min;
  bool max;
} _CacheService_commonZcount_args__isset;

class CacheService_commonZcount_args {
 public:

  CacheService_commonZcount_args() : maxCode(), minCode(), key(), min(0), max(0) {
  }

  virtual ~CacheService_commonZcount_args() throw() {}

  std::string maxCode;
  std::string minCode;
  std::string key;
  double min;
  double max;

  _CacheService_commonZcount_args__isset __isset;

  void __set_maxCode(const std::string& val) {
    maxCode = val;
  }

  void __set_minCode(const std::string& val) {
    minCode = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_min(const double val) {
    min = val;
  }

  void __set_max(const double val) {
    max = val;
  }

  bool operator == (const CacheService_commonZcount_args & rhs) const
  {
    if (!(maxCode == rhs.maxCode))
      return false;
    if (!(minCode == rhs.minCode))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(min == rhs.min))
      return false;
    if (!(max == rhs.max))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZcount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZcount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_commonZcount_pargs {
 public:


  virtual ~CacheService_commonZcount_pargs() throw() {}

  const std::string* maxCode;
  const std::string* minCode;
  const std::string* key;
  const double* min;
  const double* max;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZcount_result__isset {
  _CacheService_commonZcount_result__isset() : success(false) {}
  bool success;
} _CacheService_commonZcount_result__isset;

class CacheService_commonZcount_result {
 public:

  CacheService_commonZcount_result() : success(0) {
  }

  virtual ~CacheService_commonZcount_result() throw() {}

  int64_t success;

  _CacheService_commonZcount_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const CacheService_commonZcount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_commonZcount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_commonZcount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_commonZcount_presult__isset {
  _CacheService_commonZcount_presult__isset() : success(false) {}
  bool success;
} _CacheService_commonZcount_presult__isset;

class CacheService_commonZcount_presult {
 public:


  virtual ~CacheService_commonZcount_presult() throw() {}

  int64_t* success;

  _CacheService_commonZcount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CacheServiceClient : virtual public CacheServiceIf {
 public:
  CacheServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  CacheServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getDataTS(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& checkCode, const bool isZip, const std::string& data, const bool isEncrypt, const std::string& key, const int32_t flag);
  void send_getDataTS(const std::string& maxCode, const std::string& minCode, const std::string& checkCode, const bool isZip, const std::string& data, const bool isEncrypt, const std::string& key, const int32_t flag);
  void recv_getDataTS(std::string& _return);
  void isExist( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& prefix, const std::string& key);
  void send_isExist(const std::string& maxCode, const std::string& minCode, const std::string& prefix, const std::string& key);
  void recv_isExist( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void setExpireTimeByString( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const int32_t expireTime);
  void send_setExpireTimeByString(const std::string& maxCode, const std::string& minCode, const std::string& key, const int32_t expireTime);
  void recv_setExpireTimeByString( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void setExpireTimeByBinary( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const int32_t expireTime);
  void send_setExpireTimeByBinary(const std::string& maxCode, const std::string& minCode, const std::string& key, const int32_t expireTime);
  void recv_setExpireTimeByBinary( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void batchDel( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & keyList);
  void send_batchDel(const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & keyList);
  void recv_batchDel( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void saveDevice( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& deviceCache);
  void send_saveDevice(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& deviceCache);
  void recv_saveDevice( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateDevice( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& deviceCache);
  void send_updateDevice(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& deviceCache);
  void recv_updateDevice( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateDeviceByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::map<std::string, std::string> & fieldValueMap);
  void send_updateDeviceByField(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::map<std::string, std::string> & fieldValueMap);
  void recv_updateDeviceByField( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryDevice( ::com::vrv::cems::service::base::bean::cache::DeviceCache& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& deviceCache);
  void send_queryDevice(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& deviceCache);
  void recv_queryDevice( ::com::vrv::cems::service::base::bean::cache::DeviceCache& _return);
  void queryDeviceByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DeviceCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void send_queryDeviceByDevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void recv_queryDeviceByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DeviceCache& _return);
  void queryDeviceByIp( ::com::vrv::cems::service::base::bean::cache::DeviceCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip);
  void send_queryDeviceByIp(const std::string& maxCode, const std::string& minCode, const std::string& ip);
  void recv_queryDeviceByIp( ::com::vrv::cems::service::base::bean::cache::DeviceCache& _return);
  void deleteDevice( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& deviceCache);
  void send_deleteDevice(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& deviceCache);
  void recv_deleteDevice( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void deleteDeviceByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void send_deleteDeviceByDevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void recv_deleteDeviceByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void deleteDeviceByIp( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip);
  void send_deleteDeviceByIp(const std::string& maxCode, const std::string& minCode, const std::string& ip);
  void recv_deleteDeviceByIp( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void batchSaveDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & _return, const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & deviceCacheList);
  void send_batchSaveDevice(const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & deviceCacheList);
  void recv_batchSaveDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & _return);
  void batchUpdateDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & _return, const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & deviceCacheList);
  void send_batchUpdateDevice(const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & deviceCacheList);
  void recv_batchUpdateDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & _return);
  void batchQueryDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & _return, const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & deviceCacheList);
  void send_batchQueryDevice(const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & deviceCacheList);
  void recv_batchQueryDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & _return);
  void batchQueryDeviceByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & devOnlyIdList);
  void send_batchQueryDeviceByDevOnlyId(const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & devOnlyIdList);
  void recv_batchQueryDeviceByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & _return);
  void batchDeleteDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & _return, const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & deviceCacheList);
  void send_batchDeleteDevice(const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & deviceCacheList);
  void recv_batchDeleteDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & _return);
  void batchDeleteDeviceByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & devOnlyIdList);
  void send_batchDeleteDeviceByDevOnlyId(const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & devOnlyIdList);
  void recv_batchDeleteDeviceByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & _return);
  void saveDeviceOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& deviceOnlineCache);
  void send_saveDeviceOnline(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& deviceOnlineCache);
  void recv_saveDeviceOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateDeviceOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& deviceOnlineCache);
  void send_updateDeviceOnline(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& deviceOnlineCache);
  void recv_updateDeviceOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateDeviceOnlineByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::map<std::string, std::string> & fieldValueMap);
  void send_updateDeviceOnlineByField(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::map<std::string, std::string> & fieldValueMap);
  void recv_updateDeviceOnlineByField( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryDeviceOnline( ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& deviceOnlineCache);
  void send_queryDeviceOnline(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& deviceOnlineCache);
  void recv_queryDeviceOnline( ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& _return);
  void queryDeviceOnlineByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void send_queryDeviceOnlineByDevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void recv_queryDeviceOnlineByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& _return);
  void queryDeviceOnlineByIp( ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip);
  void send_queryDeviceOnlineByIp(const std::string& maxCode, const std::string& minCode, const std::string& ip);
  void recv_queryDeviceOnlineByIp( ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& _return);
  void deleteDeviceOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& deviceOnlineCache);
  void send_deleteDeviceOnline(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& deviceOnlineCache);
  void recv_deleteDeviceOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void deleteDeviceOnlineByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void send_deleteDeviceOnlineByDevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void recv_deleteDeviceOnlineByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void deleteDeviceOnlineByIp( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip);
  void send_deleteDeviceOnlineByIp(const std::string& maxCode, const std::string& minCode, const std::string& ip);
  void recv_deleteDeviceOnlineByIp( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryAllDeviceOnlineCache(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache> & _return, const std::string& maxCode, const std::string& minCode);
  void send_queryAllDeviceOnlineCache(const std::string& maxCode, const std::string& minCode);
  void recv_queryAllDeviceOnlineCache(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache> & _return);
  void queryOnlineDevOnlyIdsByUserOnlyId(std::vector<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId);
  void send_queryOnlineDevOnlyIdsByUserOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId);
  void recv_queryOnlineDevOnlyIdsByUserOnlyId(std::vector<std::string> & _return);
  void batchQueryDeviceOnlinesByDevOnlyIdList(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache> & _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & devOnlyIdList);
  void send_batchQueryDeviceOnlinesByDevOnlyIdList(const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & devOnlyIdList);
  void recv_batchQueryDeviceOnlinesByDevOnlyIdList(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache> & _return);
  void saveDeviceKey( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& deviceKeyCache);
  void send_saveDeviceKey(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& deviceKeyCache);
  void recv_saveDeviceKey( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateDeviceKey( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& deviceKeyCache);
  void send_updateDeviceKey(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& deviceKeyCache);
  void recv_updateDeviceKey( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateDeviceKeyByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sessionId, const std::map<std::string, std::string> & fieldValueMap);
  void send_updateDeviceKeyByField(const std::string& maxCode, const std::string& minCode, const std::string& sessionId, const std::map<std::string, std::string> & fieldValueMap);
  void recv_updateDeviceKeyByField( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryDeviceKey( ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& deviceKeyCache);
  void send_queryDeviceKey(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& deviceKeyCache);
  void recv_queryDeviceKey( ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& _return);
  void queryDeviceKeyBySessionId( ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& sessionId);
  void send_queryDeviceKeyBySessionId(const std::string& maxCode, const std::string& minCode, const std::string& sessionId);
  void recv_queryDeviceKeyBySessionId( ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& _return);
  void queryDeviceKeyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void send_queryDeviceKeyByDevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void recv_queryDeviceKeyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& _return);
  void deleteDeviceKey( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& deviceKeyCache);
  void send_deleteDeviceKey(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& deviceKeyCache);
  void recv_deleteDeviceKey( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void deleteDeviceKeyBySessionId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sessionId);
  void send_deleteDeviceKeyBySessionId(const std::string& maxCode, const std::string& minCode, const std::string& sessionId);
  void recv_deleteDeviceKeyBySessionId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void deleteDeviceKeyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void send_deleteDeviceKeyByDevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void recv_deleteDeviceKeyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void isExistSessionIdInDeviceKeyCache( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sessionId);
  void send_isExistSessionIdInDeviceKeyCache(const std::string& maxCode, const std::string& minCode, const std::string& sessionId);
  void recv_isExistSessionIdInDeviceKeyCache( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void batchQueryDeviceKeysBySessionIdList(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache> & _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & sessionIdList);
  void send_batchQueryDeviceKeysBySessionIdList(const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & sessionIdList);
  void recv_batchQueryDeviceKeysBySessionIdList(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache> & _return);
  void saveDeviceInsProOld( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & deviceProductList);
  void send_saveDeviceInsProOld(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & deviceProductList);
  void recv_saveDeviceInsProOld( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateDeviceInsProOld( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & deviceProductList);
  void send_updateDeviceInsProOld(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & deviceProductList);
  void recv_updateDeviceInsProOld( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryDeviceInsProOldByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void send_queryDeviceInsProOldByDevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void recv_queryDeviceInsProOldByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & _return);
  void deleteDeviceInsProOldByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void send_deleteDeviceInsProOldByDevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void recv_deleteDeviceInsProOldByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void saveDeviceInsProNew( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & deviceProductList);
  void send_saveDeviceInsProNew(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & deviceProductList);
  void recv_saveDeviceInsProNew( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateDeviceInsProNew( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & deviceProductList);
  void send_updateDeviceInsProNew(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & deviceProductList);
  void recv_updateDeviceInsProNew( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryDeviceInsProNewByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void send_queryDeviceInsProNewByDevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void recv_queryDeviceInsProNewByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & _return);
  void deleteDeviceInsProNewByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void send_deleteDeviceInsProNewByDevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void recv_deleteDeviceInsProNewByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void saveDevicePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& devicePolicyCache);
  void send_saveDevicePolicy(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& devicePolicyCache);
  void recv_saveDevicePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateDevicePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& devicePolicyCache);
  void send_updateDevicePolicy(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& devicePolicyCache);
  void recv_updateDevicePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryDevicePolicyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void send_queryDevicePolicyByDevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void recv_queryDevicePolicyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& _return);
  void queryDevicePolicyByIp( ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip);
  void send_queryDevicePolicyByIp(const std::string& maxCode, const std::string& minCode, const std::string& ip);
  void recv_queryDevicePolicyByIp( ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& _return);
  void deleteDevicePolicyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void send_deleteDevicePolicyByDevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void recv_deleteDevicePolicyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void deleteDevicePolicyByIp( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip);
  void send_deleteDevicePolicyByIp(const std::string& maxCode, const std::string& minCode, const std::string& ip);
  void recv_deleteDevicePolicyByIp( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void batchSaveDevicePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::map<std::string, std::string> > & devicePolicyList);
  void send_batchSaveDevicePolicy(const std::string& maxCode, const std::string& minCode, const std::vector<std::map<std::string, std::string> > & devicePolicyList);
  void recv_batchSaveDevicePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void saveUser( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserCache& userCache);
  void send_saveUser(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserCache& userCache);
  void recv_saveUser( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateUser( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserCache& userCache);
  void send_updateUser(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserCache& userCache);
  void recv_updateUser( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateUserByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::map<std::string, std::string> & fieldValueMap);
  void send_updateUserByField(const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::map<std::string, std::string> & fieldValueMap);
  void recv_updateUserByField( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryUserByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::UserCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId);
  void send_queryUserByUserOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId);
  void recv_queryUserByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::UserCache& _return);
  void deleteUserByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId);
  void send_deleteUserByUserOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId);
  void recv_deleteUserByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void batchSaveUser( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::UserCache> & userCacheList);
  void send_batchSaveUser(const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::UserCache> & userCacheList);
  void recv_batchSaveUser( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void saveUserOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserOnlineCache& userOnlineCache);
  void send_saveUserOnline(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserOnlineCache& userOnlineCache);
  void recv_saveUserOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateUserOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserOnlineCache& userOnlineCache);
  void send_updateUserOnline(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserOnlineCache& userOnlineCache);
  void recv_updateUserOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateUserOnlineByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userDevId, const std::map<std::string, std::string> & fieldValueMap);
  void send_updateUserOnlineByField(const std::string& maxCode, const std::string& minCode, const std::string& userDevId, const std::map<std::string, std::string> & fieldValueMap);
  void recv_updateUserOnlineByField( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryUserOnlineByUserDevId( ::com::vrv::cems::service::base::bean::cache::UserOnlineCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& userDevId);
  void send_queryUserOnlineByUserDevId(const std::string& maxCode, const std::string& minCode, const std::string& userDevId);
  void recv_queryUserOnlineByUserDevId( ::com::vrv::cems::service::base::bean::cache::UserOnlineCache& _return);
  void deleteUserOnlineByUserDevId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userDevId);
  void send_deleteUserOnlineByUserDevId(const std::string& maxCode, const std::string& minCode, const std::string& userDevId);
  void recv_deleteUserOnlineByUserDevId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryAllUserOnlineDevice(std::map<std::string, std::set<std::string> > & _return, const std::string& maxCode, const std::string& minCode);
  void send_queryAllUserOnlineDevice(const std::string& maxCode, const std::string& minCode);
  void recv_queryAllUserOnlineDevice(std::map<std::string, std::set<std::string> > & _return);
  void saveUserPolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserPolicyCache& userPolicyCache);
  void send_saveUserPolicy(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserPolicyCache& userPolicyCache);
  void recv_saveUserPolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateUserPolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserPolicyCache& userPolicyCache);
  void send_updateUserPolicy(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserPolicyCache& userPolicyCache);
  void recv_updateUserPolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryUserPolicyByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::UserPolicyCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId);
  void send_queryUserPolicyByUserOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId);
  void recv_queryUserPolicyByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::UserPolicyCache& _return);
  void deleteUserPolicyByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId);
  void send_deleteUserPolicyByUserOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId);
  void recv_deleteUserPolicyByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void batchSaveUserPolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::map<std::string, std::string> > & userPolicyist);
  void send_batchSaveUserPolicy(const std::string& maxCode, const std::string& minCode, const std::vector<std::map<std::string, std::string> > & userPolicyist);
  void recv_batchSaveUserPolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void saveProductCInstallPack( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::CInstallPackCache& cInstallPackCache);
  void send_saveProductCInstallPack(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::CInstallPackCache& cInstallPackCache);
  void recv_saveProductCInstallPack( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateProductCInstallPack( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::CInstallPackCache& cInstallPackCache);
  void send_updateProductCInstallPack(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::CInstallPackCache& cInstallPackCache);
  void recv_updateProductCInstallPack( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateProductCInstallPackByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& cInstallPackId, const std::map<std::string, std::string> & fieldValueMap);
  void send_updateProductCInstallPackByField(const std::string& maxCode, const std::string& minCode, const std::string& cInstallPackId, const std::map<std::string, std::string> & fieldValueMap);
  void recv_updateProductCInstallPackByField( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryProductCInstallPackById( ::com::vrv::cems::service::base::bean::cache::CInstallPackCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& cInstallPackId);
  void send_queryProductCInstallPackById(const std::string& maxCode, const std::string& minCode, const std::string& cInstallPackId);
  void recv_queryProductCInstallPackById( ::com::vrv::cems::service::base::bean::cache::CInstallPackCache& _return);
  void deleteProductCInstallPackById( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& cInstallPackId);
  void send_deleteProductCInstallPackById(const std::string& maxCode, const std::string& minCode, const std::string& cInstallPackId);
  void recv_deleteProductCInstallPackById( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void savePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::PolicyCache& policyCache);
  void send_savePolicy(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::PolicyCache& policyCache);
  void recv_savePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updatePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::PolicyCache& policyCache);
  void send_updatePolicy(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::PolicyCache& policyCache);
  void recv_updatePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updatePolicyByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& policyId, const std::map<std::string, std::string> & fieldValueMap);
  void send_updatePolicyByField(const std::string& maxCode, const std::string& minCode, const std::string& policyId, const std::map<std::string, std::string> & fieldValueMap);
  void recv_updatePolicyByField( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryPolicyByPolicyId( ::com::vrv::cems::service::base::bean::cache::PolicyCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& policyId);
  void send_queryPolicyByPolicyId(const std::string& maxCode, const std::string& minCode, const std::string& policyId);
  void recv_queryPolicyByPolicyId( ::com::vrv::cems::service::base::bean::cache::PolicyCache& _return);
  void deletePolicyByPolicyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& policyId);
  void send_deletePolicyByPolicyId(const std::string& maxCode, const std::string& minCode, const std::string& policyId);
  void recv_deletePolicyByPolicyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void saveIPMAC2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& mac, const std::string& devOnlyId);
  void send_saveIPMAC2DevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& mac, const std::string& devOnlyId);
  void recv_saveIPMAC2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateIPMAC2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& mac, const std::string& devOnlyId);
  void send_updateIPMAC2DevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& mac, const std::string& devOnlyId);
  void recv_updateIPMAC2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryIPMAC2DevOnlyId(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& mac);
  void send_queryIPMAC2DevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& mac);
  void recv_queryIPMAC2DevOnlyId(std::string& _return);
  void deleteIPMAC2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& mac);
  void send_deleteIPMAC2DevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& mac);
  void recv_deleteIPMAC2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void saveIP2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& devOnlyId);
  void send_saveIP2DevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& devOnlyId);
  void recv_saveIP2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateIP2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& devOnlyId);
  void send_updateIP2DevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& devOnlyId);
  void recv_updateIP2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryIP2DevOnlyId(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip);
  void send_queryIP2DevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& ip);
  void recv_queryIP2DevOnlyId(std::string& _return);
  void deleteIP2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip);
  void send_deleteIP2DevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& ip);
  void recv_deleteIP2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void saveProductCUpgradePack( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache& cUpgradePackCache);
  void send_saveProductCUpgradePack(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache& cUpgradePackCache);
  void recv_saveProductCUpgradePack( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateProductCUpgradePack( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache& cUpgradePackCache);
  void send_updateProductCUpgradePack(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache& cUpgradePackCache);
  void recv_updateProductCUpgradePack( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateProductCUpgradePackByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& cUpgradePackId, const std::map<std::string, std::string> & fieldValueMap);
  void send_updateProductCUpgradePackByField(const std::string& maxCode, const std::string& minCode, const std::string& cUpgradePackId, const std::map<std::string, std::string> & fieldValueMap);
  void recv_updateProductCUpgradePackByField( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryProductCUpgradePackById( ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& cUpgradePackId);
  void send_queryProductCUpgradePackById(const std::string& maxCode, const std::string& minCode, const std::string& cUpgradePackId);
  void recv_queryProductCUpgradePackById( ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache& _return);
  void deleteProductCUpgradePackById( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& cUpgradePackId);
  void send_deleteProductCUpgradePackById(const std::string& maxCode, const std::string& minCode, const std::string& cUpgradePackId);
  void recv_deleteProductCUpgradePackById( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void saveAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& account, const std::string& userOnlyId);
  void send_saveAccount2UserOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& account, const std::string& userOnlyId);
  void recv_saveAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& account, const std::string& userOnlyId);
  void send_updateAccount2UserOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& account, const std::string& userOnlyId);
  void recv_updateAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryAccount2UserOnlyId(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& account);
  void send_queryAccount2UserOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& account);
  void recv_queryAccount2UserOnlyId(std::string& _return);
  void deleteAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& account);
  void send_deleteAccount2UserOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& account);
  void recv_deleteAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void batchSaveAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::UserCache> & userCacheList);
  void send_batchSaveAccount2UserOnlyId(const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::UserCache> & userCacheList);
  void recv_batchSaveAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void savePtp( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& uuid, const std::string& ptpResult);
  void send_savePtp(const std::string& maxCode, const std::string& minCode, const std::string& uuid, const std::string& ptpResult);
  void recv_savePtp( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updatePtp( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& uuid, const std::string& ptpResult);
  void send_updatePtp(const std::string& maxCode, const std::string& minCode, const std::string& uuid, const std::string& ptpResult);
  void recv_updatePtp( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryPtp(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& uuid);
  void send_queryPtp(const std::string& maxCode, const std::string& minCode, const std::string& uuid);
  void recv_queryPtp(std::string& _return);
  void deletePtp( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& uuid);
  void send_deletePtp(const std::string& maxCode, const std::string& minCode, const std::string& uuid);
  void recv_deletePtp( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void saveSensitive( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::SensitiveCache& sensitiveCache);
  void send_saveSensitive(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::SensitiveCache& sensitiveCache);
  void recv_saveSensitive( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateSensitive( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::SensitiveCache& sensitiveCache);
  void send_updateSensitive(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::SensitiveCache& sensitiveCache);
  void recv_updateSensitive( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void querySensitive( ::com::vrv::cems::service::base::bean::cache::SensitiveCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& name);
  void send_querySensitive(const std::string& maxCode, const std::string& minCode, const std::string& name);
  void recv_querySensitive( ::com::vrv::cems::service::base::bean::cache::SensitiveCache& _return);
  void querySensitiveByField(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& name, const std::string& fieldKey);
  void send_querySensitiveByField(const std::string& maxCode, const std::string& minCode, const std::string& name, const std::string& fieldKey);
  void recv_querySensitiveByField(std::string& _return);
  void deleteSensitive( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& name);
  void send_deleteSensitive(const std::string& maxCode, const std::string& minCode, const std::string& name);
  void recv_deleteSensitive( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void saveDeviceMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::map<std::string, std::vector<std::string> > & fieldValueMap);
  void send_saveDeviceMsgDigest(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::map<std::string, std::vector<std::string> > & fieldValueMap);
  void recv_saveDeviceMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void saveDeviceMsgDigestWithDevOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType, const std::vector<std::string> & msgIdList);
  void send_saveDeviceMsgDigestWithDevOnlyIdAndMsgType(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType, const std::vector<std::string> & msgIdList);
  void recv_saveDeviceMsgDigestWithDevOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType, const std::string& msgId);
  void send_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType, const std::string& msgId);
  void recv_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void deleteDeviceMsgDigestByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void send_deleteDeviceMsgDigestByDevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void recv_deleteDeviceMsgDigestByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void deleteDeviceMsgDigestByDevOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType);
  void send_deleteDeviceMsgDigestByDevOnlyIdAndMsgType(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType);
  void recv_deleteDeviceMsgDigestByDevOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType, const std::string& msgId);
  void send_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType, const std::string& msgId);
  void recv_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateDeviceMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType, const std::string& msgId);
  void send_updateDeviceMsgDigest(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType, const std::string& msgId);
  void recv_updateDeviceMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryDeviceMsgDigestByDevOnlyId(std::map<std::string, std::vector<std::string> > & _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void send_queryDeviceMsgDigestByDevOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId);
  void recv_queryDeviceMsgDigestByDevOnlyId(std::map<std::string, std::vector<std::string> > & _return);
  void queryDeviceMsgDigestByDevIdAndMsgType(std::vector<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType);
  void send_queryDeviceMsgDigestByDevIdAndMsgType(const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType);
  void recv_queryDeviceMsgDigestByDevIdAndMsgType(std::vector<std::string> & _return);
  void saveUserMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::map<std::string, std::vector<std::string> > & fieldValueMap);
  void send_saveUserMsgDigest(const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::map<std::string, std::vector<std::string> > & fieldValueMap);
  void recv_saveUserMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void saveUserMsgDigestWithUserOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType, const std::vector<std::string> & msgIdList);
  void send_saveUserMsgDigestWithUserOnlyIdAndMsgType(const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType, const std::vector<std::string> & msgIdList);
  void recv_saveUserMsgDigestWithUserOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType, const std::string& msgId);
  void send_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId(const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType, const std::string& msgId);
  void recv_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void deleteUserMsgDigestByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId);
  void send_deleteUserMsgDigestByUserOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId);
  void recv_deleteUserMsgDigestByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void deleteUserMsgDigestByUserOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType);
  void send_deleteUserMsgDigestByUserOnlyIdAndMsgType(const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType);
  void recv_deleteUserMsgDigestByUserOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType, const std::string& msgId);
  void send_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId(const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType, const std::string& msgId);
  void recv_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateUserMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType, const std::string& msgId);
  void send_updateUserMsgDigest(const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType, const std::string& msgId);
  void recv_updateUserMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryUserMsgDigestByUserOnlyId(std::map<std::string, std::vector<std::string> > & _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId);
  void send_queryUserMsgDigestByUserOnlyId(const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId);
  void recv_queryUserMsgDigestByUserOnlyId(std::map<std::string, std::vector<std::string> > & _return);
  void queryDeviceMsgDigestByUserOnlyIdAndMsgType(std::vector<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType);
  void send_queryDeviceMsgDigestByUserOnlyIdAndMsgType(const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType);
  void recv_queryDeviceMsgDigestByUserOnlyIdAndMsgType(std::vector<std::string> & _return);
  void saveMsg( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::MsgCache& msgCache);
  void send_saveMsg(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::MsgCache& msgCache);
  void recv_saveMsg( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void deleteMsg( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& msgId);
  void send_deleteMsg(const std::string& maxCode, const std::string& minCode, const std::string& msgId);
  void recv_deleteMsg( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryMsg( ::com::vrv::cems::service::base::bean::cache::MsgCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& msgId);
  void send_queryMsg(const std::string& maxCode, const std::string& minCode, const std::string& msgId);
  void recv_queryMsg( ::com::vrv::cems::service::base::bean::cache::MsgCache& _return);
  void saveToken( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::TokenCache& tokenCache);
  void send_saveToken(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::TokenCache& tokenCache);
  void recv_saveToken( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void deleteTokenByAppId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& appId);
  void send_deleteTokenByAppId(const std::string& maxCode, const std::string& minCode, const std::string& appId);
  void recv_deleteTokenByAppId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateTokenByAppId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::TokenCache& tokenCache);
  void send_updateTokenByAppId(const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::TokenCache& tokenCache);
  void recv_updateTokenByAppId( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void queryTokenByAppId( ::com::vrv::cems::service::base::bean::cache::TokenCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& appId);
  void send_queryTokenByAppId(const std::string& maxCode, const std::string& minCode, const std::string& appId);
  void recv_queryTokenByAppId( ::com::vrv::cems::service::base::bean::cache::TokenCache& _return);
  void saveSession( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::map<std::string, std::string> & hashMap);
  void send_saveSession(const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::map<std::string, std::string> & hashMap);
  void recv_saveSession( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void saveSessionByDetail( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::string& key, const std::string& value);
  void send_saveSessionByDetail(const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::string& key, const std::string& value);
  void recv_saveSessionByDetail( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void deleteSession( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId);
  void send_deleteSession(const std::string& maxCode, const std::string& minCode, const std::string& sId);
  void recv_deleteSession( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void deleteSessionByDetail( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::string& key);
  void send_deleteSessionByDetail(const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::string& key);
  void recv_deleteSessionByDetail( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updataSessionByDetail( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::string& key, const std::string& value);
  void send_updataSessionByDetail(const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::string& key, const std::string& value);
  void recv_updataSessionByDetail( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void updateSession( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::map<std::string, std::string> & hashMap);
  void send_updateSession(const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::map<std::string, std::string> & hashMap);
  void recv_updateSession( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void querySessionByDetail(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::string& key);
  void send_querySessionByDetail(const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::string& key);
  void recv_querySessionByDetail(std::string& _return);
  void querySession(std::map<std::string, std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& sId);
  void send_querySession(const std::string& maxCode, const std::string& minCode, const std::string& sId);
  void recv_querySession(std::map<std::string, std::string> & _return);
  void commonHset( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& field, const std::string& value);
  void send_commonHset(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& field, const std::string& value);
  void recv_commonHset( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void commonHmset( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::map<std::string, std::string> & hashMap);
  void send_commonHmset(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::map<std::string, std::string> & hashMap);
  void recv_commonHmset( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void commonHsetnx( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& field, const std::string& value);
  void send_commonHsetnx(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& field, const std::string& value);
  void recv_commonHsetnx( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void commonHdel( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::vector<std::string> & fields);
  void send_commonHdel(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::vector<std::string> & fields);
  void recv_commonHdel( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void commonBatchHget(std::map<std::string, std::map<std::string, std::string> > & _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & keys);
  void send_commonBatchHget(const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & keys);
  void recv_commonBatchHget(std::map<std::string, std::map<std::string, std::string> > & _return);
  void commonHgetAll(std::map<std::string, std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key);
  void send_commonHgetAll(const std::string& maxCode, const std::string& minCode, const std::string& key);
  void recv_commonHgetAll(std::map<std::string, std::string> & _return);
  void commonHget(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& field);
  void send_commonHget(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& field);
  void recv_commonHget(std::string& _return);
  void commonHmget(std::vector<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::vector<std::string> & fields);
  void send_commonHmget(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::vector<std::string> & fields);
  void recv_commonHmget(std::vector<std::string> & _return);
  void commonHscan(std::map<std::string, std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& cursor, const std::string& match, const std::string& count);
  void send_commonHscan(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& cursor, const std::string& match, const std::string& count);
  void recv_commonHscan(std::map<std::string, std::string> & _return);
  void commonHvals(std::vector<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key);
  void send_commonHvals(const std::string& maxCode, const std::string& minCode, const std::string& key);
  void recv_commonHvals(std::vector<std::string> & _return);
  bool commonHexists(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& field);
  void send_commonHexists(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& field);
  bool recv_commonHexists();
  int64_t commonHlen(const std::string& maxCode, const std::string& minCode, const std::string& key);
  void send_commonHlen(const std::string& maxCode, const std::string& minCode, const std::string& key);
  int64_t recv_commonHlen();
  void commonZadd( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::map<std::string, double> & hashMap, const std::string& options);
  void send_commonZadd(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::map<std::string, double> & hashMap, const std::string& options);
  void recv_commonZadd( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void commonZrem( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::vector<std::string> & members);
  void send_commonZrem(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::vector<std::string> & members);
  void recv_commonZrem( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void commonZremrangeByScore( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max);
  void send_commonZremrangeByScore(const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max);
  void recv_commonZremrangeByScore( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void commonZremrangeByRank( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const int64_t min, const int64_t max);
  void send_commonZremrangeByRank(const std::string& maxCode, const std::string& minCode, const std::string& key, const int64_t min, const int64_t max);
  void recv_commonZremrangeByRank( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  void commonZremrangeByLex( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& min, const std::string& max);
  void send_commonZremrangeByLex(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& min, const std::string& max);
  void recv_commonZremrangeByLex( ::com::vrv::cems::service::base::bean::cache::Result& _return);
  int64_t commonZcard(const std::string& maxCode, const std::string& minCode, const std::string& key);
  void send_commonZcard(const std::string& maxCode, const std::string& minCode, const std::string& key);
  int64_t recv_commonZcard();
  double commonZscore(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& member);
  void send_commonZscore(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& member);
  double recv_commonZscore();
  int64_t commonZrank(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& member, const std::string& sortType);
  void send_commonZrank(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& member, const std::string& sortType);
  int64_t recv_commonZrank();
  void commonPageZrangeByScore(std::set<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max, const std::string& sortType, const int32_t offset, const int32_t count);
  void send_commonPageZrangeByScore(const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max, const std::string& sortType, const int32_t offset, const int32_t count);
  void recv_commonPageZrangeByScore(std::set<std::string> & _return);
  void commonPageZrangeByScoreWithScores(std::map<std::string, std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max, const std::string& sortType, const int32_t offset, const int32_t count);
  void send_commonPageZrangeByScoreWithScores(const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max, const std::string& sortType, const int32_t offset, const int32_t count);
  void recv_commonPageZrangeByScoreWithScores(std::map<std::string, std::string> & _return);
  void commonZrangeByScore(std::map<std::string, std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max, const std::string& sortType);
  void send_commonZrangeByScore(const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max, const std::string& sortType);
  void recv_commonZrangeByScore(std::map<std::string, std::string> & _return);
  void commonZrangeByScoreWithScores(std::set<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max, const std::string& sortType);
  void send_commonZrangeByScoreWithScores(const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max, const std::string& sortType);
  void recv_commonZrangeByScoreWithScores(std::set<std::string> & _return);
  void commonZrange(std::set<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const int64_t min, const int64_t max, const std::string& sortType);
  void send_commonZrange(const std::string& maxCode, const std::string& minCode, const std::string& key, const int64_t min, const int64_t max, const std::string& sortType);
  void recv_commonZrange(std::set<std::string> & _return);
  double commonZincrby(const std::string& maxCode, const std::string& minCode, const std::string& key, const double sorce, const std::string& member);
  void send_commonZincrby(const std::string& maxCode, const std::string& minCode, const std::string& key, const double sorce, const std::string& member);
  double recv_commonZincrby();
  int64_t commonZcount(const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max);
  void send_commonZcount(const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max);
  int64_t recv_commonZcount();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CacheServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CacheServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CacheServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getDataTS(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isExist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setExpireTimeByString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setExpireTimeByBinary(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batchDel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateDeviceByField(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryDeviceByDevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryDeviceByIp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDeviceByDevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDeviceByIp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batchSaveDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batchUpdateDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batchQueryDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batchQueryDeviceByDevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batchDeleteDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batchDeleteDeviceByDevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveDeviceOnline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateDeviceOnline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateDeviceOnlineByField(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryDeviceOnline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryDeviceOnlineByDevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryDeviceOnlineByIp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDeviceOnline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDeviceOnlineByDevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDeviceOnlineByIp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryAllDeviceOnlineCache(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryOnlineDevOnlyIdsByUserOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batchQueryDeviceOnlinesByDevOnlyIdList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveDeviceKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateDeviceKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateDeviceKeyByField(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryDeviceKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryDeviceKeyBySessionId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryDeviceKeyByDevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDeviceKey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDeviceKeyBySessionId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDeviceKeyByDevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isExistSessionIdInDeviceKeyCache(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batchQueryDeviceKeysBySessionIdList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveDeviceInsProOld(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateDeviceInsProOld(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryDeviceInsProOldByDevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDeviceInsProOldByDevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveDeviceInsProNew(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateDeviceInsProNew(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryDeviceInsProNewByDevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDeviceInsProNewByDevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveDevicePolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateDevicePolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryDevicePolicyByDevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryDevicePolicyByIp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDevicePolicyByDevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDevicePolicyByIp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batchSaveDevicePolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateUserByField(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryUserByUserOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteUserByUserOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batchSaveUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveUserOnline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateUserOnline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateUserOnlineByField(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryUserOnlineByUserDevId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteUserOnlineByUserDevId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryAllUserOnlineDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveUserPolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateUserPolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryUserPolicyByUserOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteUserPolicyByUserOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batchSaveUserPolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveProductCInstallPack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateProductCInstallPack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateProductCInstallPackByField(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryProductCInstallPackById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteProductCInstallPackById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_savePolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updatePolicy(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updatePolicyByField(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryPolicyByPolicyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deletePolicyByPolicyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveIPMAC2DevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateIPMAC2DevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryIPMAC2DevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteIPMAC2DevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveIP2DevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateIP2DevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryIP2DevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteIP2DevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveProductCUpgradePack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateProductCUpgradePack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateProductCUpgradePackByField(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryProductCUpgradePackById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteProductCUpgradePackById(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveAccount2UserOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateAccount2UserOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryAccount2UserOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteAccount2UserOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_batchSaveAccount2UserOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_savePtp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updatePtp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryPtp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deletePtp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveSensitive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateSensitive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_querySensitive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_querySensitiveByField(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteSensitive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveDeviceMsgDigest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveDeviceMsgDigestWithDevOnlyIdAndMsgType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDeviceMsgDigestByDevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDeviceMsgDigestByDevOnlyIdAndMsgType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateDeviceMsgDigest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryDeviceMsgDigestByDevOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryDeviceMsgDigestByDevIdAndMsgType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveUserMsgDigest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveUserMsgDigestWithUserOnlyIdAndMsgType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteUserMsgDigestByUserOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteUserMsgDigestByUserOnlyIdAndMsgType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateUserMsgDigest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryUserMsgDigestByUserOnlyId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryDeviceMsgDigestByUserOnlyIdAndMsgType(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveMsg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteMsg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryMsg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveToken(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteTokenByAppId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateTokenByAppId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryTokenByAppId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveSessionByDetail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteSessionByDetail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updataSessionByDetail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_querySessionByDetail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_querySession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonHset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonHmset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonHsetnx(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonHdel(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonBatchHget(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonHgetAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonHget(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonHmget(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonHscan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonHvals(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonHexists(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonHlen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonZadd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonZrem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonZremrangeByScore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonZremrangeByRank(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonZremrangeByLex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonZcard(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonZscore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonZrank(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonPageZrangeByScore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonPageZrangeByScoreWithScores(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonZrangeByScore(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonZrangeByScoreWithScores(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonZrange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonZincrby(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commonZcount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CacheServiceProcessor(boost::shared_ptr<CacheServiceIf> iface) :
    iface_(iface) {
    processMap_["getDataTS"] = &CacheServiceProcessor::process_getDataTS;
    processMap_["isExist"] = &CacheServiceProcessor::process_isExist;
    processMap_["setExpireTimeByString"] = &CacheServiceProcessor::process_setExpireTimeByString;
    processMap_["setExpireTimeByBinary"] = &CacheServiceProcessor::process_setExpireTimeByBinary;
    processMap_["batchDel"] = &CacheServiceProcessor::process_batchDel;
    processMap_["saveDevice"] = &CacheServiceProcessor::process_saveDevice;
    processMap_["updateDevice"] = &CacheServiceProcessor::process_updateDevice;
    processMap_["updateDeviceByField"] = &CacheServiceProcessor::process_updateDeviceByField;
    processMap_["queryDevice"] = &CacheServiceProcessor::process_queryDevice;
    processMap_["queryDeviceByDevOnlyId"] = &CacheServiceProcessor::process_queryDeviceByDevOnlyId;
    processMap_["queryDeviceByIp"] = &CacheServiceProcessor::process_queryDeviceByIp;
    processMap_["deleteDevice"] = &CacheServiceProcessor::process_deleteDevice;
    processMap_["deleteDeviceByDevOnlyId"] = &CacheServiceProcessor::process_deleteDeviceByDevOnlyId;
    processMap_["deleteDeviceByIp"] = &CacheServiceProcessor::process_deleteDeviceByIp;
    processMap_["batchSaveDevice"] = &CacheServiceProcessor::process_batchSaveDevice;
    processMap_["batchUpdateDevice"] = &CacheServiceProcessor::process_batchUpdateDevice;
    processMap_["batchQueryDevice"] = &CacheServiceProcessor::process_batchQueryDevice;
    processMap_["batchQueryDeviceByDevOnlyId"] = &CacheServiceProcessor::process_batchQueryDeviceByDevOnlyId;
    processMap_["batchDeleteDevice"] = &CacheServiceProcessor::process_batchDeleteDevice;
    processMap_["batchDeleteDeviceByDevOnlyId"] = &CacheServiceProcessor::process_batchDeleteDeviceByDevOnlyId;
    processMap_["saveDeviceOnline"] = &CacheServiceProcessor::process_saveDeviceOnline;
    processMap_["updateDeviceOnline"] = &CacheServiceProcessor::process_updateDeviceOnline;
    processMap_["updateDeviceOnlineByField"] = &CacheServiceProcessor::process_updateDeviceOnlineByField;
    processMap_["queryDeviceOnline"] = &CacheServiceProcessor::process_queryDeviceOnline;
    processMap_["queryDeviceOnlineByDevOnlyId"] = &CacheServiceProcessor::process_queryDeviceOnlineByDevOnlyId;
    processMap_["queryDeviceOnlineByIp"] = &CacheServiceProcessor::process_queryDeviceOnlineByIp;
    processMap_["deleteDeviceOnline"] = &CacheServiceProcessor::process_deleteDeviceOnline;
    processMap_["deleteDeviceOnlineByDevOnlyId"] = &CacheServiceProcessor::process_deleteDeviceOnlineByDevOnlyId;
    processMap_["deleteDeviceOnlineByIp"] = &CacheServiceProcessor::process_deleteDeviceOnlineByIp;
    processMap_["queryAllDeviceOnlineCache"] = &CacheServiceProcessor::process_queryAllDeviceOnlineCache;
    processMap_["queryOnlineDevOnlyIdsByUserOnlyId"] = &CacheServiceProcessor::process_queryOnlineDevOnlyIdsByUserOnlyId;
    processMap_["batchQueryDeviceOnlinesByDevOnlyIdList"] = &CacheServiceProcessor::process_batchQueryDeviceOnlinesByDevOnlyIdList;
    processMap_["saveDeviceKey"] = &CacheServiceProcessor::process_saveDeviceKey;
    processMap_["updateDeviceKey"] = &CacheServiceProcessor::process_updateDeviceKey;
    processMap_["updateDeviceKeyByField"] = &CacheServiceProcessor::process_updateDeviceKeyByField;
    processMap_["queryDeviceKey"] = &CacheServiceProcessor::process_queryDeviceKey;
    processMap_["queryDeviceKeyBySessionId"] = &CacheServiceProcessor::process_queryDeviceKeyBySessionId;
    processMap_["queryDeviceKeyByDevOnlyId"] = &CacheServiceProcessor::process_queryDeviceKeyByDevOnlyId;
    processMap_["deleteDeviceKey"] = &CacheServiceProcessor::process_deleteDeviceKey;
    processMap_["deleteDeviceKeyBySessionId"] = &CacheServiceProcessor::process_deleteDeviceKeyBySessionId;
    processMap_["deleteDeviceKeyByDevOnlyId"] = &CacheServiceProcessor::process_deleteDeviceKeyByDevOnlyId;
    processMap_["isExistSessionIdInDeviceKeyCache"] = &CacheServiceProcessor::process_isExistSessionIdInDeviceKeyCache;
    processMap_["batchQueryDeviceKeysBySessionIdList"] = &CacheServiceProcessor::process_batchQueryDeviceKeysBySessionIdList;
    processMap_["saveDeviceInsProOld"] = &CacheServiceProcessor::process_saveDeviceInsProOld;
    processMap_["updateDeviceInsProOld"] = &CacheServiceProcessor::process_updateDeviceInsProOld;
    processMap_["queryDeviceInsProOldByDevOnlyId"] = &CacheServiceProcessor::process_queryDeviceInsProOldByDevOnlyId;
    processMap_["deleteDeviceInsProOldByDevOnlyId"] = &CacheServiceProcessor::process_deleteDeviceInsProOldByDevOnlyId;
    processMap_["saveDeviceInsProNew"] = &CacheServiceProcessor::process_saveDeviceInsProNew;
    processMap_["updateDeviceInsProNew"] = &CacheServiceProcessor::process_updateDeviceInsProNew;
    processMap_["queryDeviceInsProNewByDevOnlyId"] = &CacheServiceProcessor::process_queryDeviceInsProNewByDevOnlyId;
    processMap_["deleteDeviceInsProNewByDevOnlyId"] = &CacheServiceProcessor::process_deleteDeviceInsProNewByDevOnlyId;
    processMap_["saveDevicePolicy"] = &CacheServiceProcessor::process_saveDevicePolicy;
    processMap_["updateDevicePolicy"] = &CacheServiceProcessor::process_updateDevicePolicy;
    processMap_["queryDevicePolicyByDevOnlyId"] = &CacheServiceProcessor::process_queryDevicePolicyByDevOnlyId;
    processMap_["queryDevicePolicyByIp"] = &CacheServiceProcessor::process_queryDevicePolicyByIp;
    processMap_["deleteDevicePolicyByDevOnlyId"] = &CacheServiceProcessor::process_deleteDevicePolicyByDevOnlyId;
    processMap_["deleteDevicePolicyByIp"] = &CacheServiceProcessor::process_deleteDevicePolicyByIp;
    processMap_["batchSaveDevicePolicy"] = &CacheServiceProcessor::process_batchSaveDevicePolicy;
    processMap_["saveUser"] = &CacheServiceProcessor::process_saveUser;
    processMap_["updateUser"] = &CacheServiceProcessor::process_updateUser;
    processMap_["updateUserByField"] = &CacheServiceProcessor::process_updateUserByField;
    processMap_["queryUserByUserOnlyId"] = &CacheServiceProcessor::process_queryUserByUserOnlyId;
    processMap_["deleteUserByUserOnlyId"] = &CacheServiceProcessor::process_deleteUserByUserOnlyId;
    processMap_["batchSaveUser"] = &CacheServiceProcessor::process_batchSaveUser;
    processMap_["saveUserOnline"] = &CacheServiceProcessor::process_saveUserOnline;
    processMap_["updateUserOnline"] = &CacheServiceProcessor::process_updateUserOnline;
    processMap_["updateUserOnlineByField"] = &CacheServiceProcessor::process_updateUserOnlineByField;
    processMap_["queryUserOnlineByUserDevId"] = &CacheServiceProcessor::process_queryUserOnlineByUserDevId;
    processMap_["deleteUserOnlineByUserDevId"] = &CacheServiceProcessor::process_deleteUserOnlineByUserDevId;
    processMap_["queryAllUserOnlineDevice"] = &CacheServiceProcessor::process_queryAllUserOnlineDevice;
    processMap_["saveUserPolicy"] = &CacheServiceProcessor::process_saveUserPolicy;
    processMap_["updateUserPolicy"] = &CacheServiceProcessor::process_updateUserPolicy;
    processMap_["queryUserPolicyByUserOnlyId"] = &CacheServiceProcessor::process_queryUserPolicyByUserOnlyId;
    processMap_["deleteUserPolicyByUserOnlyId"] = &CacheServiceProcessor::process_deleteUserPolicyByUserOnlyId;
    processMap_["batchSaveUserPolicy"] = &CacheServiceProcessor::process_batchSaveUserPolicy;
    processMap_["saveProductCInstallPack"] = &CacheServiceProcessor::process_saveProductCInstallPack;
    processMap_["updateProductCInstallPack"] = &CacheServiceProcessor::process_updateProductCInstallPack;
    processMap_["updateProductCInstallPackByField"] = &CacheServiceProcessor::process_updateProductCInstallPackByField;
    processMap_["queryProductCInstallPackById"] = &CacheServiceProcessor::process_queryProductCInstallPackById;
    processMap_["deleteProductCInstallPackById"] = &CacheServiceProcessor::process_deleteProductCInstallPackById;
    processMap_["savePolicy"] = &CacheServiceProcessor::process_savePolicy;
    processMap_["updatePolicy"] = &CacheServiceProcessor::process_updatePolicy;
    processMap_["updatePolicyByField"] = &CacheServiceProcessor::process_updatePolicyByField;
    processMap_["queryPolicyByPolicyId"] = &CacheServiceProcessor::process_queryPolicyByPolicyId;
    processMap_["deletePolicyByPolicyId"] = &CacheServiceProcessor::process_deletePolicyByPolicyId;
    processMap_["saveIPMAC2DevOnlyId"] = &CacheServiceProcessor::process_saveIPMAC2DevOnlyId;
    processMap_["updateIPMAC2DevOnlyId"] = &CacheServiceProcessor::process_updateIPMAC2DevOnlyId;
    processMap_["queryIPMAC2DevOnlyId"] = &CacheServiceProcessor::process_queryIPMAC2DevOnlyId;
    processMap_["deleteIPMAC2DevOnlyId"] = &CacheServiceProcessor::process_deleteIPMAC2DevOnlyId;
    processMap_["saveIP2DevOnlyId"] = &CacheServiceProcessor::process_saveIP2DevOnlyId;
    processMap_["updateIP2DevOnlyId"] = &CacheServiceProcessor::process_updateIP2DevOnlyId;
    processMap_["queryIP2DevOnlyId"] = &CacheServiceProcessor::process_queryIP2DevOnlyId;
    processMap_["deleteIP2DevOnlyId"] = &CacheServiceProcessor::process_deleteIP2DevOnlyId;
    processMap_["saveProductCUpgradePack"] = &CacheServiceProcessor::process_saveProductCUpgradePack;
    processMap_["updateProductCUpgradePack"] = &CacheServiceProcessor::process_updateProductCUpgradePack;
    processMap_["updateProductCUpgradePackByField"] = &CacheServiceProcessor::process_updateProductCUpgradePackByField;
    processMap_["queryProductCUpgradePackById"] = &CacheServiceProcessor::process_queryProductCUpgradePackById;
    processMap_["deleteProductCUpgradePackById"] = &CacheServiceProcessor::process_deleteProductCUpgradePackById;
    processMap_["saveAccount2UserOnlyId"] = &CacheServiceProcessor::process_saveAccount2UserOnlyId;
    processMap_["updateAccount2UserOnlyId"] = &CacheServiceProcessor::process_updateAccount2UserOnlyId;
    processMap_["queryAccount2UserOnlyId"] = &CacheServiceProcessor::process_queryAccount2UserOnlyId;
    processMap_["deleteAccount2UserOnlyId"] = &CacheServiceProcessor::process_deleteAccount2UserOnlyId;
    processMap_["batchSaveAccount2UserOnlyId"] = &CacheServiceProcessor::process_batchSaveAccount2UserOnlyId;
    processMap_["savePtp"] = &CacheServiceProcessor::process_savePtp;
    processMap_["updatePtp"] = &CacheServiceProcessor::process_updatePtp;
    processMap_["queryPtp"] = &CacheServiceProcessor::process_queryPtp;
    processMap_["deletePtp"] = &CacheServiceProcessor::process_deletePtp;
    processMap_["saveSensitive"] = &CacheServiceProcessor::process_saveSensitive;
    processMap_["updateSensitive"] = &CacheServiceProcessor::process_updateSensitive;
    processMap_["querySensitive"] = &CacheServiceProcessor::process_querySensitive;
    processMap_["querySensitiveByField"] = &CacheServiceProcessor::process_querySensitiveByField;
    processMap_["deleteSensitive"] = &CacheServiceProcessor::process_deleteSensitive;
    processMap_["saveDeviceMsgDigest"] = &CacheServiceProcessor::process_saveDeviceMsgDigest;
    processMap_["saveDeviceMsgDigestWithDevOnlyIdAndMsgType"] = &CacheServiceProcessor::process_saveDeviceMsgDigestWithDevOnlyIdAndMsgType;
    processMap_["saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId"] = &CacheServiceProcessor::process_saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId;
    processMap_["deleteDeviceMsgDigestByDevOnlyId"] = &CacheServiceProcessor::process_deleteDeviceMsgDigestByDevOnlyId;
    processMap_["deleteDeviceMsgDigestByDevOnlyIdAndMsgType"] = &CacheServiceProcessor::process_deleteDeviceMsgDigestByDevOnlyIdAndMsgType;
    processMap_["deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId"] = &CacheServiceProcessor::process_deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId;
    processMap_["updateDeviceMsgDigest"] = &CacheServiceProcessor::process_updateDeviceMsgDigest;
    processMap_["queryDeviceMsgDigestByDevOnlyId"] = &CacheServiceProcessor::process_queryDeviceMsgDigestByDevOnlyId;
    processMap_["queryDeviceMsgDigestByDevIdAndMsgType"] = &CacheServiceProcessor::process_queryDeviceMsgDigestByDevIdAndMsgType;
    processMap_["saveUserMsgDigest"] = &CacheServiceProcessor::process_saveUserMsgDigest;
    processMap_["saveUserMsgDigestWithUserOnlyIdAndMsgType"] = &CacheServiceProcessor::process_saveUserMsgDigestWithUserOnlyIdAndMsgType;
    processMap_["saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId"] = &CacheServiceProcessor::process_saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId;
    processMap_["deleteUserMsgDigestByUserOnlyId"] = &CacheServiceProcessor::process_deleteUserMsgDigestByUserOnlyId;
    processMap_["deleteUserMsgDigestByUserOnlyIdAndMsgType"] = &CacheServiceProcessor::process_deleteUserMsgDigestByUserOnlyIdAndMsgType;
    processMap_["deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId"] = &CacheServiceProcessor::process_deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId;
    processMap_["updateUserMsgDigest"] = &CacheServiceProcessor::process_updateUserMsgDigest;
    processMap_["queryUserMsgDigestByUserOnlyId"] = &CacheServiceProcessor::process_queryUserMsgDigestByUserOnlyId;
    processMap_["queryDeviceMsgDigestByUserOnlyIdAndMsgType"] = &CacheServiceProcessor::process_queryDeviceMsgDigestByUserOnlyIdAndMsgType;
    processMap_["saveMsg"] = &CacheServiceProcessor::process_saveMsg;
    processMap_["deleteMsg"] = &CacheServiceProcessor::process_deleteMsg;
    processMap_["queryMsg"] = &CacheServiceProcessor::process_queryMsg;
    processMap_["saveToken"] = &CacheServiceProcessor::process_saveToken;
    processMap_["deleteTokenByAppId"] = &CacheServiceProcessor::process_deleteTokenByAppId;
    processMap_["updateTokenByAppId"] = &CacheServiceProcessor::process_updateTokenByAppId;
    processMap_["queryTokenByAppId"] = &CacheServiceProcessor::process_queryTokenByAppId;
    processMap_["saveSession"] = &CacheServiceProcessor::process_saveSession;
    processMap_["saveSessionByDetail"] = &CacheServiceProcessor::process_saveSessionByDetail;
    processMap_["deleteSession"] = &CacheServiceProcessor::process_deleteSession;
    processMap_["deleteSessionByDetail"] = &CacheServiceProcessor::process_deleteSessionByDetail;
    processMap_["updataSessionByDetail"] = &CacheServiceProcessor::process_updataSessionByDetail;
    processMap_["updateSession"] = &CacheServiceProcessor::process_updateSession;
    processMap_["querySessionByDetail"] = &CacheServiceProcessor::process_querySessionByDetail;
    processMap_["querySession"] = &CacheServiceProcessor::process_querySession;
    processMap_["commonHset"] = &CacheServiceProcessor::process_commonHset;
    processMap_["commonHmset"] = &CacheServiceProcessor::process_commonHmset;
    processMap_["commonHsetnx"] = &CacheServiceProcessor::process_commonHsetnx;
    processMap_["commonHdel"] = &CacheServiceProcessor::process_commonHdel;
    processMap_["commonBatchHget"] = &CacheServiceProcessor::process_commonBatchHget;
    processMap_["commonHgetAll"] = &CacheServiceProcessor::process_commonHgetAll;
    processMap_["commonHget"] = &CacheServiceProcessor::process_commonHget;
    processMap_["commonHmget"] = &CacheServiceProcessor::process_commonHmget;
    processMap_["commonHscan"] = &CacheServiceProcessor::process_commonHscan;
    processMap_["commonHvals"] = &CacheServiceProcessor::process_commonHvals;
    processMap_["commonHexists"] = &CacheServiceProcessor::process_commonHexists;
    processMap_["commonHlen"] = &CacheServiceProcessor::process_commonHlen;
    processMap_["commonZadd"] = &CacheServiceProcessor::process_commonZadd;
    processMap_["commonZrem"] = &CacheServiceProcessor::process_commonZrem;
    processMap_["commonZremrangeByScore"] = &CacheServiceProcessor::process_commonZremrangeByScore;
    processMap_["commonZremrangeByRank"] = &CacheServiceProcessor::process_commonZremrangeByRank;
    processMap_["commonZremrangeByLex"] = &CacheServiceProcessor::process_commonZremrangeByLex;
    processMap_["commonZcard"] = &CacheServiceProcessor::process_commonZcard;
    processMap_["commonZscore"] = &CacheServiceProcessor::process_commonZscore;
    processMap_["commonZrank"] = &CacheServiceProcessor::process_commonZrank;
    processMap_["commonPageZrangeByScore"] = &CacheServiceProcessor::process_commonPageZrangeByScore;
    processMap_["commonPageZrangeByScoreWithScores"] = &CacheServiceProcessor::process_commonPageZrangeByScoreWithScores;
    processMap_["commonZrangeByScore"] = &CacheServiceProcessor::process_commonZrangeByScore;
    processMap_["commonZrangeByScoreWithScores"] = &CacheServiceProcessor::process_commonZrangeByScoreWithScores;
    processMap_["commonZrange"] = &CacheServiceProcessor::process_commonZrange;
    processMap_["commonZincrby"] = &CacheServiceProcessor::process_commonZincrby;
    processMap_["commonZcount"] = &CacheServiceProcessor::process_commonZcount;
  }

  virtual ~CacheServiceProcessor() {}
};

class CacheServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CacheServiceProcessorFactory(const ::boost::shared_ptr< CacheServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CacheServiceIfFactory > handlerFactory_;
};

class CacheServiceMultiface : virtual public CacheServiceIf {
 public:
  CacheServiceMultiface(std::vector<boost::shared_ptr<CacheServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CacheServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CacheServiceIf> > ifaces_;
  CacheServiceMultiface() {}
  void add(boost::shared_ptr<CacheServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getDataTS(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& checkCode, const bool isZip, const std::string& data, const bool isEncrypt, const std::string& key, const int32_t flag) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getDataTS(_return, maxCode, minCode, checkCode, isZip, data, isEncrypt, key, flag);
    }
    ifaces_[i]->getDataTS(_return, maxCode, minCode, checkCode, isZip, data, isEncrypt, key, flag);
    return;
  }

  void isExist( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& prefix, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isExist(_return, maxCode, minCode, prefix, key);
    }
    ifaces_[i]->isExist(_return, maxCode, minCode, prefix, key);
    return;
  }

  void setExpireTimeByString( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const int32_t expireTime) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setExpireTimeByString(_return, maxCode, minCode, key, expireTime);
    }
    ifaces_[i]->setExpireTimeByString(_return, maxCode, minCode, key, expireTime);
    return;
  }

  void setExpireTimeByBinary( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const int32_t expireTime) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setExpireTimeByBinary(_return, maxCode, minCode, key, expireTime);
    }
    ifaces_[i]->setExpireTimeByBinary(_return, maxCode, minCode, key, expireTime);
    return;
  }

  void batchDel( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & keyList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batchDel(_return, maxCode, minCode, keyList);
    }
    ifaces_[i]->batchDel(_return, maxCode, minCode, keyList);
    return;
  }

  void saveDevice( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& deviceCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveDevice(_return, maxCode, minCode, deviceCache);
    }
    ifaces_[i]->saveDevice(_return, maxCode, minCode, deviceCache);
    return;
  }

  void updateDevice( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& deviceCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateDevice(_return, maxCode, minCode, deviceCache);
    }
    ifaces_[i]->updateDevice(_return, maxCode, minCode, deviceCache);
    return;
  }

  void updateDeviceByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::map<std::string, std::string> & fieldValueMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateDeviceByField(_return, maxCode, minCode, devOnlyId, fieldValueMap);
    }
    ifaces_[i]->updateDeviceByField(_return, maxCode, minCode, devOnlyId, fieldValueMap);
    return;
  }

  void queryDevice( ::com::vrv::cems::service::base::bean::cache::DeviceCache& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& deviceCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryDevice(_return, maxCode, minCode, deviceCache);
    }
    ifaces_[i]->queryDevice(_return, maxCode, minCode, deviceCache);
    return;
  }

  void queryDeviceByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DeviceCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryDeviceByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    }
    ifaces_[i]->queryDeviceByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    return;
  }

  void queryDeviceByIp( ::com::vrv::cems::service::base::bean::cache::DeviceCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryDeviceByIp(_return, maxCode, minCode, ip);
    }
    ifaces_[i]->queryDeviceByIp(_return, maxCode, minCode, ip);
    return;
  }

  void deleteDevice( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceCache& deviceCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDevice(_return, maxCode, minCode, deviceCache);
    }
    ifaces_[i]->deleteDevice(_return, maxCode, minCode, deviceCache);
    return;
  }

  void deleteDeviceByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDeviceByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    }
    ifaces_[i]->deleteDeviceByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    return;
  }

  void deleteDeviceByIp( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDeviceByIp(_return, maxCode, minCode, ip);
    }
    ifaces_[i]->deleteDeviceByIp(_return, maxCode, minCode, ip);
    return;
  }

  void batchSaveDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & _return, const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & deviceCacheList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batchSaveDevice(_return, maxCode, minCode, deviceCacheList);
    }
    ifaces_[i]->batchSaveDevice(_return, maxCode, minCode, deviceCacheList);
    return;
  }

  void batchUpdateDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & _return, const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & deviceCacheList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batchUpdateDevice(_return, maxCode, minCode, deviceCacheList);
    }
    ifaces_[i]->batchUpdateDevice(_return, maxCode, minCode, deviceCacheList);
    return;
  }

  void batchQueryDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & _return, const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & deviceCacheList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batchQueryDevice(_return, maxCode, minCode, deviceCacheList);
    }
    ifaces_[i]->batchQueryDevice(_return, maxCode, minCode, deviceCacheList);
    return;
  }

  void batchQueryDeviceByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & devOnlyIdList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batchQueryDeviceByDevOnlyId(_return, maxCode, minCode, devOnlyIdList);
    }
    ifaces_[i]->batchQueryDeviceByDevOnlyId(_return, maxCode, minCode, devOnlyIdList);
    return;
  }

  void batchDeleteDevice(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & _return, const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceCache> & deviceCacheList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batchDeleteDevice(_return, maxCode, minCode, deviceCacheList);
    }
    ifaces_[i]->batchDeleteDevice(_return, maxCode, minCode, deviceCacheList);
    return;
  }

  void batchDeleteDeviceByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::Result> & _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & devOnlyIdList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batchDeleteDeviceByDevOnlyId(_return, maxCode, minCode, devOnlyIdList);
    }
    ifaces_[i]->batchDeleteDeviceByDevOnlyId(_return, maxCode, minCode, devOnlyIdList);
    return;
  }

  void saveDeviceOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& deviceOnlineCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveDeviceOnline(_return, maxCode, minCode, deviceOnlineCache);
    }
    ifaces_[i]->saveDeviceOnline(_return, maxCode, minCode, deviceOnlineCache);
    return;
  }

  void updateDeviceOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& deviceOnlineCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateDeviceOnline(_return, maxCode, minCode, deviceOnlineCache);
    }
    ifaces_[i]->updateDeviceOnline(_return, maxCode, minCode, deviceOnlineCache);
    return;
  }

  void updateDeviceOnlineByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::map<std::string, std::string> & fieldValueMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateDeviceOnlineByField(_return, maxCode, minCode, devOnlyId, fieldValueMap);
    }
    ifaces_[i]->updateDeviceOnlineByField(_return, maxCode, minCode, devOnlyId, fieldValueMap);
    return;
  }

  void queryDeviceOnline( ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& deviceOnlineCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryDeviceOnline(_return, maxCode, minCode, deviceOnlineCache);
    }
    ifaces_[i]->queryDeviceOnline(_return, maxCode, minCode, deviceOnlineCache);
    return;
  }

  void queryDeviceOnlineByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryDeviceOnlineByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    }
    ifaces_[i]->queryDeviceOnlineByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    return;
  }

  void queryDeviceOnlineByIp( ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryDeviceOnlineByIp(_return, maxCode, minCode, ip);
    }
    ifaces_[i]->queryDeviceOnlineByIp(_return, maxCode, minCode, ip);
    return;
  }

  void deleteDeviceOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache& deviceOnlineCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDeviceOnline(_return, maxCode, minCode, deviceOnlineCache);
    }
    ifaces_[i]->deleteDeviceOnline(_return, maxCode, minCode, deviceOnlineCache);
    return;
  }

  void deleteDeviceOnlineByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDeviceOnlineByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    }
    ifaces_[i]->deleteDeviceOnlineByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    return;
  }

  void deleteDeviceOnlineByIp( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDeviceOnlineByIp(_return, maxCode, minCode, ip);
    }
    ifaces_[i]->deleteDeviceOnlineByIp(_return, maxCode, minCode, ip);
    return;
  }

  void queryAllDeviceOnlineCache(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache> & _return, const std::string& maxCode, const std::string& minCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryAllDeviceOnlineCache(_return, maxCode, minCode);
    }
    ifaces_[i]->queryAllDeviceOnlineCache(_return, maxCode, minCode);
    return;
  }

  void queryOnlineDevOnlyIdsByUserOnlyId(std::vector<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryOnlineDevOnlyIdsByUserOnlyId(_return, maxCode, minCode, userOnlyId);
    }
    ifaces_[i]->queryOnlineDevOnlyIdsByUserOnlyId(_return, maxCode, minCode, userOnlyId);
    return;
  }

  void batchQueryDeviceOnlinesByDevOnlyIdList(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceOnlineCache> & _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & devOnlyIdList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batchQueryDeviceOnlinesByDevOnlyIdList(_return, maxCode, minCode, devOnlyIdList);
    }
    ifaces_[i]->batchQueryDeviceOnlinesByDevOnlyIdList(_return, maxCode, minCode, devOnlyIdList);
    return;
  }

  void saveDeviceKey( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& deviceKeyCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveDeviceKey(_return, maxCode, minCode, deviceKeyCache);
    }
    ifaces_[i]->saveDeviceKey(_return, maxCode, minCode, deviceKeyCache);
    return;
  }

  void updateDeviceKey( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& deviceKeyCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateDeviceKey(_return, maxCode, minCode, deviceKeyCache);
    }
    ifaces_[i]->updateDeviceKey(_return, maxCode, minCode, deviceKeyCache);
    return;
  }

  void updateDeviceKeyByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sessionId, const std::map<std::string, std::string> & fieldValueMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateDeviceKeyByField(_return, maxCode, minCode, sessionId, fieldValueMap);
    }
    ifaces_[i]->updateDeviceKeyByField(_return, maxCode, minCode, sessionId, fieldValueMap);
    return;
  }

  void queryDeviceKey( ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& deviceKeyCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryDeviceKey(_return, maxCode, minCode, deviceKeyCache);
    }
    ifaces_[i]->queryDeviceKey(_return, maxCode, minCode, deviceKeyCache);
    return;
  }

  void queryDeviceKeyBySessionId( ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& sessionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryDeviceKeyBySessionId(_return, maxCode, minCode, sessionId);
    }
    ifaces_[i]->queryDeviceKeyBySessionId(_return, maxCode, minCode, sessionId);
    return;
  }

  void queryDeviceKeyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryDeviceKeyByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    }
    ifaces_[i]->queryDeviceKeyByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    return;
  }

  void deleteDeviceKey( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache& deviceKeyCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDeviceKey(_return, maxCode, minCode, deviceKeyCache);
    }
    ifaces_[i]->deleteDeviceKey(_return, maxCode, minCode, deviceKeyCache);
    return;
  }

  void deleteDeviceKeyBySessionId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sessionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDeviceKeyBySessionId(_return, maxCode, minCode, sessionId);
    }
    ifaces_[i]->deleteDeviceKeyBySessionId(_return, maxCode, minCode, sessionId);
    return;
  }

  void deleteDeviceKeyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDeviceKeyByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    }
    ifaces_[i]->deleteDeviceKeyByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    return;
  }

  void isExistSessionIdInDeviceKeyCache( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sessionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isExistSessionIdInDeviceKeyCache(_return, maxCode, minCode, sessionId);
    }
    ifaces_[i]->isExistSessionIdInDeviceKeyCache(_return, maxCode, minCode, sessionId);
    return;
  }

  void batchQueryDeviceKeysBySessionIdList(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceKeyCache> & _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & sessionIdList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batchQueryDeviceKeysBySessionIdList(_return, maxCode, minCode, sessionIdList);
    }
    ifaces_[i]->batchQueryDeviceKeysBySessionIdList(_return, maxCode, minCode, sessionIdList);
    return;
  }

  void saveDeviceInsProOld( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & deviceProductList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveDeviceInsProOld(_return, maxCode, minCode, devOnlyId, deviceProductList);
    }
    ifaces_[i]->saveDeviceInsProOld(_return, maxCode, minCode, devOnlyId, deviceProductList);
    return;
  }

  void updateDeviceInsProOld( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & deviceProductList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateDeviceInsProOld(_return, maxCode, minCode, devOnlyId, deviceProductList);
    }
    ifaces_[i]->updateDeviceInsProOld(_return, maxCode, minCode, devOnlyId, deviceProductList);
    return;
  }

  void queryDeviceInsProOldByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryDeviceInsProOldByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    }
    ifaces_[i]->queryDeviceInsProOldByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    return;
  }

  void deleteDeviceInsProOldByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDeviceInsProOldByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    }
    ifaces_[i]->deleteDeviceInsProOldByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    return;
  }

  void saveDeviceInsProNew( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & deviceProductList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveDeviceInsProNew(_return, maxCode, minCode, devOnlyId, deviceProductList);
    }
    ifaces_[i]->saveDeviceInsProNew(_return, maxCode, minCode, devOnlyId, deviceProductList);
    return;
  }

  void updateDeviceInsProNew( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & deviceProductList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateDeviceInsProNew(_return, maxCode, minCode, devOnlyId, deviceProductList);
    }
    ifaces_[i]->updateDeviceInsProNew(_return, maxCode, minCode, devOnlyId, deviceProductList);
    return;
  }

  void queryDeviceInsProNewByDevOnlyId(std::vector< ::com::vrv::cems::service::base::bean::cache::DeviceProduct> & _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryDeviceInsProNewByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    }
    ifaces_[i]->queryDeviceInsProNewByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    return;
  }

  void deleteDeviceInsProNewByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDeviceInsProNewByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    }
    ifaces_[i]->deleteDeviceInsProNewByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    return;
  }

  void saveDevicePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& devicePolicyCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveDevicePolicy(_return, maxCode, minCode, devicePolicyCache);
    }
    ifaces_[i]->saveDevicePolicy(_return, maxCode, minCode, devicePolicyCache);
    return;
  }

  void updateDevicePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& devicePolicyCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateDevicePolicy(_return, maxCode, minCode, devicePolicyCache);
    }
    ifaces_[i]->updateDevicePolicy(_return, maxCode, minCode, devicePolicyCache);
    return;
  }

  void queryDevicePolicyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryDevicePolicyByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    }
    ifaces_[i]->queryDevicePolicyByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    return;
  }

  void queryDevicePolicyByIp( ::com::vrv::cems::service::base::bean::cache::DevicePolicyCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryDevicePolicyByIp(_return, maxCode, minCode, ip);
    }
    ifaces_[i]->queryDevicePolicyByIp(_return, maxCode, minCode, ip);
    return;
  }

  void deleteDevicePolicyByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDevicePolicyByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    }
    ifaces_[i]->deleteDevicePolicyByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    return;
  }

  void deleteDevicePolicyByIp( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDevicePolicyByIp(_return, maxCode, minCode, ip);
    }
    ifaces_[i]->deleteDevicePolicyByIp(_return, maxCode, minCode, ip);
    return;
  }

  void batchSaveDevicePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::map<std::string, std::string> > & devicePolicyList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batchSaveDevicePolicy(_return, maxCode, minCode, devicePolicyList);
    }
    ifaces_[i]->batchSaveDevicePolicy(_return, maxCode, minCode, devicePolicyList);
    return;
  }

  void saveUser( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserCache& userCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveUser(_return, maxCode, minCode, userCache);
    }
    ifaces_[i]->saveUser(_return, maxCode, minCode, userCache);
    return;
  }

  void updateUser( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserCache& userCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateUser(_return, maxCode, minCode, userCache);
    }
    ifaces_[i]->updateUser(_return, maxCode, minCode, userCache);
    return;
  }

  void updateUserByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::map<std::string, std::string> & fieldValueMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateUserByField(_return, maxCode, minCode, userOnlyId, fieldValueMap);
    }
    ifaces_[i]->updateUserByField(_return, maxCode, minCode, userOnlyId, fieldValueMap);
    return;
  }

  void queryUserByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::UserCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryUserByUserOnlyId(_return, maxCode, minCode, userOnlyId);
    }
    ifaces_[i]->queryUserByUserOnlyId(_return, maxCode, minCode, userOnlyId);
    return;
  }

  void deleteUserByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteUserByUserOnlyId(_return, maxCode, minCode, userOnlyId);
    }
    ifaces_[i]->deleteUserByUserOnlyId(_return, maxCode, minCode, userOnlyId);
    return;
  }

  void batchSaveUser( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::UserCache> & userCacheList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batchSaveUser(_return, maxCode, minCode, userCacheList);
    }
    ifaces_[i]->batchSaveUser(_return, maxCode, minCode, userCacheList);
    return;
  }

  void saveUserOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserOnlineCache& userOnlineCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveUserOnline(_return, maxCode, minCode, userOnlineCache);
    }
    ifaces_[i]->saveUserOnline(_return, maxCode, minCode, userOnlineCache);
    return;
  }

  void updateUserOnline( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserOnlineCache& userOnlineCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateUserOnline(_return, maxCode, minCode, userOnlineCache);
    }
    ifaces_[i]->updateUserOnline(_return, maxCode, minCode, userOnlineCache);
    return;
  }

  void updateUserOnlineByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userDevId, const std::map<std::string, std::string> & fieldValueMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateUserOnlineByField(_return, maxCode, minCode, userDevId, fieldValueMap);
    }
    ifaces_[i]->updateUserOnlineByField(_return, maxCode, minCode, userDevId, fieldValueMap);
    return;
  }

  void queryUserOnlineByUserDevId( ::com::vrv::cems::service::base::bean::cache::UserOnlineCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& userDevId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryUserOnlineByUserDevId(_return, maxCode, minCode, userDevId);
    }
    ifaces_[i]->queryUserOnlineByUserDevId(_return, maxCode, minCode, userDevId);
    return;
  }

  void deleteUserOnlineByUserDevId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userDevId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteUserOnlineByUserDevId(_return, maxCode, minCode, userDevId);
    }
    ifaces_[i]->deleteUserOnlineByUserDevId(_return, maxCode, minCode, userDevId);
    return;
  }

  void queryAllUserOnlineDevice(std::map<std::string, std::set<std::string> > & _return, const std::string& maxCode, const std::string& minCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryAllUserOnlineDevice(_return, maxCode, minCode);
    }
    ifaces_[i]->queryAllUserOnlineDevice(_return, maxCode, minCode);
    return;
  }

  void saveUserPolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserPolicyCache& userPolicyCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveUserPolicy(_return, maxCode, minCode, userPolicyCache);
    }
    ifaces_[i]->saveUserPolicy(_return, maxCode, minCode, userPolicyCache);
    return;
  }

  void updateUserPolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::UserPolicyCache& userPolicyCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateUserPolicy(_return, maxCode, minCode, userPolicyCache);
    }
    ifaces_[i]->updateUserPolicy(_return, maxCode, minCode, userPolicyCache);
    return;
  }

  void queryUserPolicyByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::UserPolicyCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryUserPolicyByUserOnlyId(_return, maxCode, minCode, userOnlyId);
    }
    ifaces_[i]->queryUserPolicyByUserOnlyId(_return, maxCode, minCode, userOnlyId);
    return;
  }

  void deleteUserPolicyByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteUserPolicyByUserOnlyId(_return, maxCode, minCode, userOnlyId);
    }
    ifaces_[i]->deleteUserPolicyByUserOnlyId(_return, maxCode, minCode, userOnlyId);
    return;
  }

  void batchSaveUserPolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::map<std::string, std::string> > & userPolicyist) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batchSaveUserPolicy(_return, maxCode, minCode, userPolicyist);
    }
    ifaces_[i]->batchSaveUserPolicy(_return, maxCode, minCode, userPolicyist);
    return;
  }

  void saveProductCInstallPack( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::CInstallPackCache& cInstallPackCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveProductCInstallPack(_return, maxCode, minCode, cInstallPackCache);
    }
    ifaces_[i]->saveProductCInstallPack(_return, maxCode, minCode, cInstallPackCache);
    return;
  }

  void updateProductCInstallPack( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::CInstallPackCache& cInstallPackCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateProductCInstallPack(_return, maxCode, minCode, cInstallPackCache);
    }
    ifaces_[i]->updateProductCInstallPack(_return, maxCode, minCode, cInstallPackCache);
    return;
  }

  void updateProductCInstallPackByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& cInstallPackId, const std::map<std::string, std::string> & fieldValueMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateProductCInstallPackByField(_return, maxCode, minCode, cInstallPackId, fieldValueMap);
    }
    ifaces_[i]->updateProductCInstallPackByField(_return, maxCode, minCode, cInstallPackId, fieldValueMap);
    return;
  }

  void queryProductCInstallPackById( ::com::vrv::cems::service::base::bean::cache::CInstallPackCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& cInstallPackId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryProductCInstallPackById(_return, maxCode, minCode, cInstallPackId);
    }
    ifaces_[i]->queryProductCInstallPackById(_return, maxCode, minCode, cInstallPackId);
    return;
  }

  void deleteProductCInstallPackById( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& cInstallPackId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteProductCInstallPackById(_return, maxCode, minCode, cInstallPackId);
    }
    ifaces_[i]->deleteProductCInstallPackById(_return, maxCode, minCode, cInstallPackId);
    return;
  }

  void savePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::PolicyCache& policyCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->savePolicy(_return, maxCode, minCode, policyCache);
    }
    ifaces_[i]->savePolicy(_return, maxCode, minCode, policyCache);
    return;
  }

  void updatePolicy( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::PolicyCache& policyCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updatePolicy(_return, maxCode, minCode, policyCache);
    }
    ifaces_[i]->updatePolicy(_return, maxCode, minCode, policyCache);
    return;
  }

  void updatePolicyByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& policyId, const std::map<std::string, std::string> & fieldValueMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updatePolicyByField(_return, maxCode, minCode, policyId, fieldValueMap);
    }
    ifaces_[i]->updatePolicyByField(_return, maxCode, minCode, policyId, fieldValueMap);
    return;
  }

  void queryPolicyByPolicyId( ::com::vrv::cems::service::base::bean::cache::PolicyCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& policyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryPolicyByPolicyId(_return, maxCode, minCode, policyId);
    }
    ifaces_[i]->queryPolicyByPolicyId(_return, maxCode, minCode, policyId);
    return;
  }

  void deletePolicyByPolicyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& policyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deletePolicyByPolicyId(_return, maxCode, minCode, policyId);
    }
    ifaces_[i]->deletePolicyByPolicyId(_return, maxCode, minCode, policyId);
    return;
  }

  void saveIPMAC2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& mac, const std::string& devOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveIPMAC2DevOnlyId(_return, maxCode, minCode, ip, mac, devOnlyId);
    }
    ifaces_[i]->saveIPMAC2DevOnlyId(_return, maxCode, minCode, ip, mac, devOnlyId);
    return;
  }

  void updateIPMAC2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& mac, const std::string& devOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateIPMAC2DevOnlyId(_return, maxCode, minCode, ip, mac, devOnlyId);
    }
    ifaces_[i]->updateIPMAC2DevOnlyId(_return, maxCode, minCode, ip, mac, devOnlyId);
    return;
  }

  void queryIPMAC2DevOnlyId(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& mac) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryIPMAC2DevOnlyId(_return, maxCode, minCode, ip, mac);
    }
    ifaces_[i]->queryIPMAC2DevOnlyId(_return, maxCode, minCode, ip, mac);
    return;
  }

  void deleteIPMAC2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& mac) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteIPMAC2DevOnlyId(_return, maxCode, minCode, ip, mac);
    }
    ifaces_[i]->deleteIPMAC2DevOnlyId(_return, maxCode, minCode, ip, mac);
    return;
  }

  void saveIP2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& devOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveIP2DevOnlyId(_return, maxCode, minCode, ip, devOnlyId);
    }
    ifaces_[i]->saveIP2DevOnlyId(_return, maxCode, minCode, ip, devOnlyId);
    return;
  }

  void updateIP2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip, const std::string& devOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateIP2DevOnlyId(_return, maxCode, minCode, ip, devOnlyId);
    }
    ifaces_[i]->updateIP2DevOnlyId(_return, maxCode, minCode, ip, devOnlyId);
    return;
  }

  void queryIP2DevOnlyId(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryIP2DevOnlyId(_return, maxCode, minCode, ip);
    }
    ifaces_[i]->queryIP2DevOnlyId(_return, maxCode, minCode, ip);
    return;
  }

  void deleteIP2DevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& ip) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteIP2DevOnlyId(_return, maxCode, minCode, ip);
    }
    ifaces_[i]->deleteIP2DevOnlyId(_return, maxCode, minCode, ip);
    return;
  }

  void saveProductCUpgradePack( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache& cUpgradePackCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveProductCUpgradePack(_return, maxCode, minCode, cUpgradePackCache);
    }
    ifaces_[i]->saveProductCUpgradePack(_return, maxCode, minCode, cUpgradePackCache);
    return;
  }

  void updateProductCUpgradePack( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache& cUpgradePackCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateProductCUpgradePack(_return, maxCode, minCode, cUpgradePackCache);
    }
    ifaces_[i]->updateProductCUpgradePack(_return, maxCode, minCode, cUpgradePackCache);
    return;
  }

  void updateProductCUpgradePackByField( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& cUpgradePackId, const std::map<std::string, std::string> & fieldValueMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateProductCUpgradePackByField(_return, maxCode, minCode, cUpgradePackId, fieldValueMap);
    }
    ifaces_[i]->updateProductCUpgradePackByField(_return, maxCode, minCode, cUpgradePackId, fieldValueMap);
    return;
  }

  void queryProductCUpgradePackById( ::com::vrv::cems::service::base::bean::cache::CUpgradePackCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& cUpgradePackId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryProductCUpgradePackById(_return, maxCode, minCode, cUpgradePackId);
    }
    ifaces_[i]->queryProductCUpgradePackById(_return, maxCode, minCode, cUpgradePackId);
    return;
  }

  void deleteProductCUpgradePackById( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& cUpgradePackId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteProductCUpgradePackById(_return, maxCode, minCode, cUpgradePackId);
    }
    ifaces_[i]->deleteProductCUpgradePackById(_return, maxCode, minCode, cUpgradePackId);
    return;
  }

  void saveAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& account, const std::string& userOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveAccount2UserOnlyId(_return, maxCode, minCode, account, userOnlyId);
    }
    ifaces_[i]->saveAccount2UserOnlyId(_return, maxCode, minCode, account, userOnlyId);
    return;
  }

  void updateAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& account, const std::string& userOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateAccount2UserOnlyId(_return, maxCode, minCode, account, userOnlyId);
    }
    ifaces_[i]->updateAccount2UserOnlyId(_return, maxCode, minCode, account, userOnlyId);
    return;
  }

  void queryAccount2UserOnlyId(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& account) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryAccount2UserOnlyId(_return, maxCode, minCode, account);
    }
    ifaces_[i]->queryAccount2UserOnlyId(_return, maxCode, minCode, account);
    return;
  }

  void deleteAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& account) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteAccount2UserOnlyId(_return, maxCode, minCode, account);
    }
    ifaces_[i]->deleteAccount2UserOnlyId(_return, maxCode, minCode, account);
    return;
  }

  void batchSaveAccount2UserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::vector< ::com::vrv::cems::service::base::bean::cache::UserCache> & userCacheList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->batchSaveAccount2UserOnlyId(_return, maxCode, minCode, userCacheList);
    }
    ifaces_[i]->batchSaveAccount2UserOnlyId(_return, maxCode, minCode, userCacheList);
    return;
  }

  void savePtp( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& uuid, const std::string& ptpResult) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->savePtp(_return, maxCode, minCode, uuid, ptpResult);
    }
    ifaces_[i]->savePtp(_return, maxCode, minCode, uuid, ptpResult);
    return;
  }

  void updatePtp( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& uuid, const std::string& ptpResult) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updatePtp(_return, maxCode, minCode, uuid, ptpResult);
    }
    ifaces_[i]->updatePtp(_return, maxCode, minCode, uuid, ptpResult);
    return;
  }

  void queryPtp(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& uuid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryPtp(_return, maxCode, minCode, uuid);
    }
    ifaces_[i]->queryPtp(_return, maxCode, minCode, uuid);
    return;
  }

  void deletePtp( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& uuid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deletePtp(_return, maxCode, minCode, uuid);
    }
    ifaces_[i]->deletePtp(_return, maxCode, minCode, uuid);
    return;
  }

  void saveSensitive( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::SensitiveCache& sensitiveCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveSensitive(_return, maxCode, minCode, sensitiveCache);
    }
    ifaces_[i]->saveSensitive(_return, maxCode, minCode, sensitiveCache);
    return;
  }

  void updateSensitive( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::SensitiveCache& sensitiveCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateSensitive(_return, maxCode, minCode, sensitiveCache);
    }
    ifaces_[i]->updateSensitive(_return, maxCode, minCode, sensitiveCache);
    return;
  }

  void querySensitive( ::com::vrv::cems::service::base::bean::cache::SensitiveCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->querySensitive(_return, maxCode, minCode, name);
    }
    ifaces_[i]->querySensitive(_return, maxCode, minCode, name);
    return;
  }

  void querySensitiveByField(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& name, const std::string& fieldKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->querySensitiveByField(_return, maxCode, minCode, name, fieldKey);
    }
    ifaces_[i]->querySensitiveByField(_return, maxCode, minCode, name, fieldKey);
    return;
  }

  void deleteSensitive( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteSensitive(_return, maxCode, minCode, name);
    }
    ifaces_[i]->deleteSensitive(_return, maxCode, minCode, name);
    return;
  }

  void saveDeviceMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::map<std::string, std::vector<std::string> > & fieldValueMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveDeviceMsgDigest(_return, maxCode, minCode, devOnlyId, fieldValueMap);
    }
    ifaces_[i]->saveDeviceMsgDigest(_return, maxCode, minCode, devOnlyId, fieldValueMap);
    return;
  }

  void saveDeviceMsgDigestWithDevOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType, const std::vector<std::string> & msgIdList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveDeviceMsgDigestWithDevOnlyIdAndMsgType(_return, maxCode, minCode, devOnlyId, msgType, msgIdList);
    }
    ifaces_[i]->saveDeviceMsgDigestWithDevOnlyIdAndMsgType(_return, maxCode, minCode, devOnlyId, msgType, msgIdList);
    return;
  }

  void saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType, const std::string& msgId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId(_return, maxCode, minCode, devOnlyId, msgType, msgId);
    }
    ifaces_[i]->saveDeviceMsgDigestWithDevOnlyIdAndMsgTypeAndMsgId(_return, maxCode, minCode, devOnlyId, msgType, msgId);
    return;
  }

  void deleteDeviceMsgDigestByDevOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDeviceMsgDigestByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    }
    ifaces_[i]->deleteDeviceMsgDigestByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    return;
  }

  void deleteDeviceMsgDigestByDevOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDeviceMsgDigestByDevOnlyIdAndMsgType(_return, maxCode, minCode, devOnlyId, msgType);
    }
    ifaces_[i]->deleteDeviceMsgDigestByDevOnlyIdAndMsgType(_return, maxCode, minCode, devOnlyId, msgType);
    return;
  }

  void deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType, const std::string& msgId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId(_return, maxCode, minCode, devOnlyId, msgType, msgId);
    }
    ifaces_[i]->deleteDeviceMsgDigestByDevOnlyIdAndMsgTypeAndMsgId(_return, maxCode, minCode, devOnlyId, msgType, msgId);
    return;
  }

  void updateDeviceMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType, const std::string& msgId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateDeviceMsgDigest(_return, maxCode, minCode, devOnlyId, msgType, msgId);
    }
    ifaces_[i]->updateDeviceMsgDigest(_return, maxCode, minCode, devOnlyId, msgType, msgId);
    return;
  }

  void queryDeviceMsgDigestByDevOnlyId(std::map<std::string, std::vector<std::string> > & _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryDeviceMsgDigestByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    }
    ifaces_[i]->queryDeviceMsgDigestByDevOnlyId(_return, maxCode, minCode, devOnlyId);
    return;
  }

  void queryDeviceMsgDigestByDevIdAndMsgType(std::vector<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& devOnlyId, const std::string& msgType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryDeviceMsgDigestByDevIdAndMsgType(_return, maxCode, minCode, devOnlyId, msgType);
    }
    ifaces_[i]->queryDeviceMsgDigestByDevIdAndMsgType(_return, maxCode, minCode, devOnlyId, msgType);
    return;
  }

  void saveUserMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::map<std::string, std::vector<std::string> > & fieldValueMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveUserMsgDigest(_return, maxCode, minCode, userOnlyId, fieldValueMap);
    }
    ifaces_[i]->saveUserMsgDigest(_return, maxCode, minCode, userOnlyId, fieldValueMap);
    return;
  }

  void saveUserMsgDigestWithUserOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType, const std::vector<std::string> & msgIdList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveUserMsgDigestWithUserOnlyIdAndMsgType(_return, maxCode, minCode, userOnlyId, msgType, msgIdList);
    }
    ifaces_[i]->saveUserMsgDigestWithUserOnlyIdAndMsgType(_return, maxCode, minCode, userOnlyId, msgType, msgIdList);
    return;
  }

  void saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType, const std::string& msgId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId(_return, maxCode, minCode, userOnlyId, msgType, msgId);
    }
    ifaces_[i]->saveUserMsgDigestWithUserOnlyIdAndMsgTypeAndMsgId(_return, maxCode, minCode, userOnlyId, msgType, msgId);
    return;
  }

  void deleteUserMsgDigestByUserOnlyId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteUserMsgDigestByUserOnlyId(_return, maxCode, minCode, userOnlyId);
    }
    ifaces_[i]->deleteUserMsgDigestByUserOnlyId(_return, maxCode, minCode, userOnlyId);
    return;
  }

  void deleteUserMsgDigestByUserOnlyIdAndMsgType( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteUserMsgDigestByUserOnlyIdAndMsgType(_return, maxCode, minCode, userOnlyId, msgType);
    }
    ifaces_[i]->deleteUserMsgDigestByUserOnlyIdAndMsgType(_return, maxCode, minCode, userOnlyId, msgType);
    return;
  }

  void deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType, const std::string& msgId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId(_return, maxCode, minCode, userOnlyId, msgType, msgId);
    }
    ifaces_[i]->deleteUserMsgDigestByUserOnlyIdAndMsgTypeAndMsgId(_return, maxCode, minCode, userOnlyId, msgType, msgId);
    return;
  }

  void updateUserMsgDigest( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType, const std::string& msgId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateUserMsgDigest(_return, maxCode, minCode, userOnlyId, msgType, msgId);
    }
    ifaces_[i]->updateUserMsgDigest(_return, maxCode, minCode, userOnlyId, msgType, msgId);
    return;
  }

  void queryUserMsgDigestByUserOnlyId(std::map<std::string, std::vector<std::string> > & _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryUserMsgDigestByUserOnlyId(_return, maxCode, minCode, userOnlyId);
    }
    ifaces_[i]->queryUserMsgDigestByUserOnlyId(_return, maxCode, minCode, userOnlyId);
    return;
  }

  void queryDeviceMsgDigestByUserOnlyIdAndMsgType(std::vector<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& userOnlyId, const std::string& msgType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryDeviceMsgDigestByUserOnlyIdAndMsgType(_return, maxCode, minCode, userOnlyId, msgType);
    }
    ifaces_[i]->queryDeviceMsgDigestByUserOnlyIdAndMsgType(_return, maxCode, minCode, userOnlyId, msgType);
    return;
  }

  void saveMsg( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::MsgCache& msgCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveMsg(_return, maxCode, minCode, msgCache);
    }
    ifaces_[i]->saveMsg(_return, maxCode, minCode, msgCache);
    return;
  }

  void deleteMsg( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& msgId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteMsg(_return, maxCode, minCode, msgId);
    }
    ifaces_[i]->deleteMsg(_return, maxCode, minCode, msgId);
    return;
  }

  void queryMsg( ::com::vrv::cems::service::base::bean::cache::MsgCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& msgId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryMsg(_return, maxCode, minCode, msgId);
    }
    ifaces_[i]->queryMsg(_return, maxCode, minCode, msgId);
    return;
  }

  void saveToken( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::TokenCache& tokenCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveToken(_return, maxCode, minCode, tokenCache);
    }
    ifaces_[i]->saveToken(_return, maxCode, minCode, tokenCache);
    return;
  }

  void deleteTokenByAppId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& appId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteTokenByAppId(_return, maxCode, minCode, appId);
    }
    ifaces_[i]->deleteTokenByAppId(_return, maxCode, minCode, appId);
    return;
  }

  void updateTokenByAppId( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const  ::com::vrv::cems::service::base::bean::cache::TokenCache& tokenCache) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateTokenByAppId(_return, maxCode, minCode, tokenCache);
    }
    ifaces_[i]->updateTokenByAppId(_return, maxCode, minCode, tokenCache);
    return;
  }

  void queryTokenByAppId( ::com::vrv::cems::service::base::bean::cache::TokenCache& _return, const std::string& maxCode, const std::string& minCode, const std::string& appId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryTokenByAppId(_return, maxCode, minCode, appId);
    }
    ifaces_[i]->queryTokenByAppId(_return, maxCode, minCode, appId);
    return;
  }

  void saveSession( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::map<std::string, std::string> & hashMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveSession(_return, maxCode, minCode, sId, hashMap);
    }
    ifaces_[i]->saveSession(_return, maxCode, minCode, sId, hashMap);
    return;
  }

  void saveSessionByDetail( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveSessionByDetail(_return, maxCode, minCode, sId, key, value);
    }
    ifaces_[i]->saveSessionByDetail(_return, maxCode, minCode, sId, key, value);
    return;
  }

  void deleteSession( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteSession(_return, maxCode, minCode, sId);
    }
    ifaces_[i]->deleteSession(_return, maxCode, minCode, sId);
    return;
  }

  void deleteSessionByDetail( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteSessionByDetail(_return, maxCode, minCode, sId, key);
    }
    ifaces_[i]->deleteSessionByDetail(_return, maxCode, minCode, sId, key);
    return;
  }

  void updataSessionByDetail( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updataSessionByDetail(_return, maxCode, minCode, sId, key, value);
    }
    ifaces_[i]->updataSessionByDetail(_return, maxCode, minCode, sId, key, value);
    return;
  }

  void updateSession( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::map<std::string, std::string> & hashMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateSession(_return, maxCode, minCode, sId, hashMap);
    }
    ifaces_[i]->updateSession(_return, maxCode, minCode, sId, hashMap);
    return;
  }

  void querySessionByDetail(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& sId, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->querySessionByDetail(_return, maxCode, minCode, sId, key);
    }
    ifaces_[i]->querySessionByDetail(_return, maxCode, minCode, sId, key);
    return;
  }

  void querySession(std::map<std::string, std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& sId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->querySession(_return, maxCode, minCode, sId);
    }
    ifaces_[i]->querySession(_return, maxCode, minCode, sId);
    return;
  }

  void commonHset( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonHset(_return, maxCode, minCode, key, field, value);
    }
    ifaces_[i]->commonHset(_return, maxCode, minCode, key, field, value);
    return;
  }

  void commonHmset( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::map<std::string, std::string> & hashMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonHmset(_return, maxCode, minCode, key, hashMap);
    }
    ifaces_[i]->commonHmset(_return, maxCode, minCode, key, hashMap);
    return;
  }

  void commonHsetnx( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& field, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonHsetnx(_return, maxCode, minCode, key, field, value);
    }
    ifaces_[i]->commonHsetnx(_return, maxCode, minCode, key, field, value);
    return;
  }

  void commonHdel( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::vector<std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonHdel(_return, maxCode, minCode, key, fields);
    }
    ifaces_[i]->commonHdel(_return, maxCode, minCode, key, fields);
    return;
  }

  void commonBatchHget(std::map<std::string, std::map<std::string, std::string> > & _return, const std::string& maxCode, const std::string& minCode, const std::vector<std::string> & keys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonBatchHget(_return, maxCode, minCode, keys);
    }
    ifaces_[i]->commonBatchHget(_return, maxCode, minCode, keys);
    return;
  }

  void commonHgetAll(std::map<std::string, std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonHgetAll(_return, maxCode, minCode, key);
    }
    ifaces_[i]->commonHgetAll(_return, maxCode, minCode, key);
    return;
  }

  void commonHget(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& field) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonHget(_return, maxCode, minCode, key, field);
    }
    ifaces_[i]->commonHget(_return, maxCode, minCode, key, field);
    return;
  }

  void commonHmget(std::vector<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::vector<std::string> & fields) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonHmget(_return, maxCode, minCode, key, fields);
    }
    ifaces_[i]->commonHmget(_return, maxCode, minCode, key, fields);
    return;
  }

  void commonHscan(std::map<std::string, std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& cursor, const std::string& match, const std::string& count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonHscan(_return, maxCode, minCode, key, cursor, match, count);
    }
    ifaces_[i]->commonHscan(_return, maxCode, minCode, key, cursor, match, count);
    return;
  }

  void commonHvals(std::vector<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonHvals(_return, maxCode, minCode, key);
    }
    ifaces_[i]->commonHvals(_return, maxCode, minCode, key);
    return;
  }

  bool commonHexists(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& field) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonHexists(maxCode, minCode, key, field);
    }
    return ifaces_[i]->commonHexists(maxCode, minCode, key, field);
  }

  int64_t commonHlen(const std::string& maxCode, const std::string& minCode, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonHlen(maxCode, minCode, key);
    }
    return ifaces_[i]->commonHlen(maxCode, minCode, key);
  }

  void commonZadd( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::map<std::string, double> & hashMap, const std::string& options) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonZadd(_return, maxCode, minCode, key, hashMap, options);
    }
    ifaces_[i]->commonZadd(_return, maxCode, minCode, key, hashMap, options);
    return;
  }

  void commonZrem( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::vector<std::string> & members) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonZrem(_return, maxCode, minCode, key, members);
    }
    ifaces_[i]->commonZrem(_return, maxCode, minCode, key, members);
    return;
  }

  void commonZremrangeByScore( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonZremrangeByScore(_return, maxCode, minCode, key, min, max);
    }
    ifaces_[i]->commonZremrangeByScore(_return, maxCode, minCode, key, min, max);
    return;
  }

  void commonZremrangeByRank( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const int64_t min, const int64_t max) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonZremrangeByRank(_return, maxCode, minCode, key, min, max);
    }
    ifaces_[i]->commonZremrangeByRank(_return, maxCode, minCode, key, min, max);
    return;
  }

  void commonZremrangeByLex( ::com::vrv::cems::service::base::bean::cache::Result& _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& min, const std::string& max) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonZremrangeByLex(_return, maxCode, minCode, key, min, max);
    }
    ifaces_[i]->commonZremrangeByLex(_return, maxCode, minCode, key, min, max);
    return;
  }

  int64_t commonZcard(const std::string& maxCode, const std::string& minCode, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonZcard(maxCode, minCode, key);
    }
    return ifaces_[i]->commonZcard(maxCode, minCode, key);
  }

  double commonZscore(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& member) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonZscore(maxCode, minCode, key, member);
    }
    return ifaces_[i]->commonZscore(maxCode, minCode, key, member);
  }

  int64_t commonZrank(const std::string& maxCode, const std::string& minCode, const std::string& key, const std::string& member, const std::string& sortType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonZrank(maxCode, minCode, key, member, sortType);
    }
    return ifaces_[i]->commonZrank(maxCode, minCode, key, member, sortType);
  }

  void commonPageZrangeByScore(std::set<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max, const std::string& sortType, const int32_t offset, const int32_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonPageZrangeByScore(_return, maxCode, minCode, key, min, max, sortType, offset, count);
    }
    ifaces_[i]->commonPageZrangeByScore(_return, maxCode, minCode, key, min, max, sortType, offset, count);
    return;
  }

  void commonPageZrangeByScoreWithScores(std::map<std::string, std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max, const std::string& sortType, const int32_t offset, const int32_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonPageZrangeByScoreWithScores(_return, maxCode, minCode, key, min, max, sortType, offset, count);
    }
    ifaces_[i]->commonPageZrangeByScoreWithScores(_return, maxCode, minCode, key, min, max, sortType, offset, count);
    return;
  }

  void commonZrangeByScore(std::map<std::string, std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max, const std::string& sortType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonZrangeByScore(_return, maxCode, minCode, key, min, max, sortType);
    }
    ifaces_[i]->commonZrangeByScore(_return, maxCode, minCode, key, min, max, sortType);
    return;
  }

  void commonZrangeByScoreWithScores(std::set<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max, const std::string& sortType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonZrangeByScoreWithScores(_return, maxCode, minCode, key, min, max, sortType);
    }
    ifaces_[i]->commonZrangeByScoreWithScores(_return, maxCode, minCode, key, min, max, sortType);
    return;
  }

  void commonZrange(std::set<std::string> & _return, const std::string& maxCode, const std::string& minCode, const std::string& key, const int64_t min, const int64_t max, const std::string& sortType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonZrange(_return, maxCode, minCode, key, min, max, sortType);
    }
    ifaces_[i]->commonZrange(_return, maxCode, minCode, key, min, max, sortType);
    return;
  }

  double commonZincrby(const std::string& maxCode, const std::string& minCode, const std::string& key, const double sorce, const std::string& member) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonZincrby(maxCode, minCode, key, sorce, member);
    }
    return ifaces_[i]->commonZincrby(maxCode, minCode, key, sorce, member);
  }

  int64_t commonZcount(const std::string& maxCode, const std::string& minCode, const std::string& key, const double min, const double max) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->commonZcount(maxCode, minCode, key, min, max);
    }
    return ifaces_[i]->commonZcount(maxCode, minCode, key, min, max);
  }

};

}}}}}} // namespace

#endif
