/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "bean_types.h"

#include <algorithm>

namespace com { namespace vrv { namespace cems { namespace service { namespace base { namespace bean { namespace cache {

const char* Result::ascii_fingerprint = "A7801670116150C65ACA43E6F679BA79";
const uint8_t Result::binary_fingerprint[16] = {0xA7,0x80,0x16,0x70,0x11,0x61,0x50,0xC6,0x5A,0xCA,0x43,0xE6,0xF6,0x79,0xBA,0x79};

uint32_t Result::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info);
          this->__isset.info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Result::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Result");

  if (this->__isset.code) {
    xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->code);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.info) {
    xfer += oprot->writeFieldBegin("info", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->info);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Result &a, Result &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.info, b.info);
  swap(a.__isset, b.__isset);
}

const char* DeviceCache::ascii_fingerprint = "D1ECE0AF20CE205381B4D690EC1902F8";
const uint8_t DeviceCache::binary_fingerprint[16] = {0xD1,0xEC,0xE0,0xAF,0x20,0xCE,0x20,0x53,0x81,0xB4,0xD6,0x90,0xEC,0x19,0x02,0xF8};

uint32_t DeviceCache::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->devOnlyId);
          this->__isset.devOnlyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ipType);
          this->__isset.ipType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ipNumber);
          this->__isset.ipNumber = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->osId);
          this->__isset.osId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceTypeId);
          this->__isset.deviceTypeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->registerTime);
          this->__isset.registerTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clientId);
          this->__isset.clientId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clientName);
          this->__isset.clientName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clientSign);
          this->__isset.clientSign = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clientVersion);
          this->__isset.clientVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->softVersion);
          this->__isset.softVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->switchIP);
          this->__isset.switchIP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->switchPort);
          this->__isset.switchPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->isMutiOs);
          this->__isset.isMutiOs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->isVm);
          this->__isset.isVm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->communicateIP);
          this->__isset.communicateIP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->routeIp);
          this->__isset.routeIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->regState);
          this->__isset.regState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->protectState);
          this->__isset.protectState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->roamState);
          this->__isset.roamState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->deleteState);
          this->__isset.deleteState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userOnlyId);
          this->__isset.userOnlyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationId);
          this->__isset.organizationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mask);
          this->__isset.mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeviceCache::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DeviceCache");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("devOnlyId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->devOnlyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipType", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->ipType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipNumber", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->ipNumber);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("osId", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->osId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deviceTypeId", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->deviceTypeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("registerTime", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->registerTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clientId", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->clientId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clientName", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->clientName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clientSign", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->clientSign);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("clientVersion", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->clientVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("softVersion", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->softVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("switchIP", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->switchIP);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("switchPort", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->switchPort);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isMutiOs", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->isMutiOs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isVm", ::apache::thrift::protocol::T_I32, 18);
  xfer += oprot->writeI32(this->isVm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("communicateIP", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->communicateIP);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("routeIp", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->routeIp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("regState", ::apache::thrift::protocol::T_I32, 21);
  xfer += oprot->writeI32(this->regState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("protectState", ::apache::thrift::protocol::T_I32, 22);
  xfer += oprot->writeI32(this->protectState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("roamState", ::apache::thrift::protocol::T_I32, 23);
  xfer += oprot->writeI32(this->roamState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deleteState", ::apache::thrift::protocol::T_I32, 24);
  xfer += oprot->writeI32(this->deleteState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userOnlyId", ::apache::thrift::protocol::T_STRING, 25);
  xfer += oprot->writeString(this->userOnlyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("organizationId", ::apache::thrift::protocol::T_STRING, 26);
  xfer += oprot->writeString(this->organizationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mask", ::apache::thrift::protocol::T_STRING, 27);
  xfer += oprot->writeString(this->mask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeviceCache &a, DeviceCache &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.devOnlyId, b.devOnlyId);
  swap(a.ip, b.ip);
  swap(a.ipType, b.ipType);
  swap(a.ipNumber, b.ipNumber);
  swap(a.mac, b.mac);
  swap(a.osId, b.osId);
  swap(a.deviceTypeId, b.deviceTypeId);
  swap(a.registerTime, b.registerTime);
  swap(a.clientId, b.clientId);
  swap(a.clientName, b.clientName);
  swap(a.clientSign, b.clientSign);
  swap(a.clientVersion, b.clientVersion);
  swap(a.softVersion, b.softVersion);
  swap(a.switchIP, b.switchIP);
  swap(a.switchPort, b.switchPort);
  swap(a.isMutiOs, b.isMutiOs);
  swap(a.isVm, b.isVm);
  swap(a.communicateIP, b.communicateIP);
  swap(a.routeIp, b.routeIp);
  swap(a.regState, b.regState);
  swap(a.protectState, b.protectState);
  swap(a.roamState, b.roamState);
  swap(a.deleteState, b.deleteState);
  swap(a.userOnlyId, b.userOnlyId);
  swap(a.organizationId, b.organizationId);
  swap(a.mask, b.mask);
  swap(a.__isset, b.__isset);
}

const char* DeviceOnlineCache::ascii_fingerprint = "DFFD290DFC35F6F1BE0790E5EC0C6B55";
const uint8_t DeviceOnlineCache::binary_fingerprint[16] = {0xDF,0xFD,0x29,0x0D,0xFC,0x35,0xF6,0xF1,0xBE,0x07,0x90,0xE5,0xEC,0x0C,0x6B,0x55};

uint32_t DeviceOnlineCache::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->devOnlyId);
          this->__isset.devOnlyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->loginTime);
          this->__isset.loginTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->activeTime);
          this->__isset.activeTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sessionId);
          this->__isset.sessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->udpActiveTime);
          this->__isset.udpActiveTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->routeIp);
          this->__isset.routeIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->udpPort);
          this->__isset.udpPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->udpServiceIp);
          this->__isset.udpServiceIp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->udpServicePort);
          this->__isset.udpServicePort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeviceOnlineCache::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DeviceOnlineCache");

  xfer += oprot->writeFieldBegin("devOnlyId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->devOnlyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("loginTime", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->loginTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("activeTime", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->activeTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sessionId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->sessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("udpActiveTime", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->udpActiveTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("routeIp", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->routeIp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("udpPort", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->udpPort);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("udpServiceIp", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->udpServiceIp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("udpServicePort", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->udpServicePort);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeviceOnlineCache &a, DeviceOnlineCache &b) {
  using ::std::swap;
  swap(a.devOnlyId, b.devOnlyId);
  swap(a.loginTime, b.loginTime);
  swap(a.activeTime, b.activeTime);
  swap(a.sessionId, b.sessionId);
  swap(a.udpActiveTime, b.udpActiveTime);
  swap(a.routeIp, b.routeIp);
  swap(a.udpPort, b.udpPort);
  swap(a.udpServiceIp, b.udpServiceIp);
  swap(a.udpServicePort, b.udpServicePort);
  swap(a.__isset, b.__isset);
}

const char* DeviceKeyCache::ascii_fingerprint = "BFF0E21728CB005F9AA5774A41542B8D";
const uint8_t DeviceKeyCache::binary_fingerprint[16] = {0xBF,0xF0,0xE2,0x17,0x28,0xCB,0x00,0x5F,0x9A,0xA5,0x77,0x4A,0x41,0x54,0x2B,0x8D};

uint32_t DeviceKeyCache::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->keyType);
          this->__isset.keyType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->devOnlyId);
          this->__isset.devOnlyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sessionId);
          this->__isset.sessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->offsetVector);
          this->__isset.offsetVector = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeviceKeyCache::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DeviceKeyCache");

  xfer += oprot->writeFieldBegin("keyType", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->keyType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("devOnlyId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->devOnlyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sessionId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->sessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("offsetVector", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->offsetVector);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeviceKeyCache &a, DeviceKeyCache &b) {
  using ::std::swap;
  swap(a.keyType, b.keyType);
  swap(a.password, b.password);
  swap(a.devOnlyId, b.devOnlyId);
  swap(a.sessionId, b.sessionId);
  swap(a.offsetVector, b.offsetVector);
  swap(a.__isset, b.__isset);
}

const char* ProductInfoOld::ascii_fingerprint = "86F68448E93C4E5249433AA07CAE002F";
const uint8_t ProductInfoOld::binary_fingerprint[16] = {0x86,0xF6,0x84,0x48,0xE9,0x3C,0x4E,0x52,0x49,0x43,0x3A,0xA0,0x7C,0xAE,0x00,0x2F};

uint32_t ProductInfoOld::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->productName);
          this->__isset.productName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->productSign);
          this->__isset.productSign = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->installTime);
          this->__isset.installTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProductInfoOld::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProductInfoOld");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->productName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productSign", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->productSign);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("installTime", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->installTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProductInfoOld &a, ProductInfoOld &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.productName, b.productName);
  swap(a.version, b.version);
  swap(a.productSign, b.productSign);
  swap(a.installTime, b.installTime);
  swap(a.__isset, b.__isset);
}

const char* ProductInfoNew::ascii_fingerprint = "C4A8A7FE71C2DB9CB73D92862AA4C591";
const uint8_t ProductInfoNew::binary_fingerprint[16] = {0xC4,0xA8,0xA7,0xFE,0x71,0xC2,0xDB,0x9C,0xB7,0x3D,0x92,0x86,0x2A,0xA4,0xC5,0x91};

uint32_t ProductInfoNew::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->productName);
          this->__isset.productName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cUpgradePackId);
          this->__isset.cUpgradePackId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ProductInfoNew::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ProductInfoNew");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->productName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cUpgradePackId", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->cUpgradePackId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ProductInfoNew &a, ProductInfoNew &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.productName, b.productName);
  swap(a.version, b.version);
  swap(a.cUpgradePackId, b.cUpgradePackId);
  swap(a.__isset, b.__isset);
}

const char* DeviceProduct::ascii_fingerprint = "E80E67B3185CF26AFC5F526B742E1E77";
const uint8_t DeviceProduct::binary_fingerprint[16] = {0xE8,0x0E,0x67,0xB3,0x18,0x5C,0xF2,0x6A,0xFC,0x5F,0x52,0x6B,0x74,0x2E,0x1E,0x77};

uint32_t DeviceProduct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->osType);
          this->__isset.osType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->productType);
          this->__isset.productType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->productInfoOldList.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->productInfoOldList.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->productInfoOldList[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.productInfoOldList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->productInfoNewList.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->productInfoNewList.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += this->productInfoNewList[_i9].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.productInfoNewList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeviceProduct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DeviceProduct");

  xfer += oprot->writeFieldBegin("osType", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->osType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productType", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->productType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productInfoOldList", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->productInfoOldList.size()));
    std::vector<ProductInfoOld> ::const_iterator _iter10;
    for (_iter10 = this->productInfoOldList.begin(); _iter10 != this->productInfoOldList.end(); ++_iter10)
    {
      xfer += (*_iter10).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productInfoNewList", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->productInfoNewList.size()));
    std::vector<ProductInfoNew> ::const_iterator _iter11;
    for (_iter11 = this->productInfoNewList.begin(); _iter11 != this->productInfoNewList.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeviceProduct &a, DeviceProduct &b) {
  using ::std::swap;
  swap(a.osType, b.osType);
  swap(a.productType, b.productType);
  swap(a.productInfoOldList, b.productInfoOldList);
  swap(a.productInfoNewList, b.productInfoNewList);
  swap(a.__isset, b.__isset);
}

const char* DevicePolicyCache::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t DevicePolicyCache::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t DevicePolicyCache::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->devOnlyId);
          this->__isset.devOnlyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->policyVersion);
          this->__isset.policyVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->policyIds);
          this->__isset.policyIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DevicePolicyCache::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DevicePolicyCache");

  xfer += oprot->writeFieldBegin("devOnlyId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->devOnlyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("policyVersion", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->policyVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("policyIds", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->policyIds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DevicePolicyCache &a, DevicePolicyCache &b) {
  using ::std::swap;
  swap(a.devOnlyId, b.devOnlyId);
  swap(a.policyVersion, b.policyVersion);
  swap(a.policyIds, b.policyIds);
  swap(a.__isset, b.__isset);
}

const char* UserCache::ascii_fingerprint = "619E98DF6C68D89B878DB87A6616B9D7";
const uint8_t UserCache::binary_fingerprint[16] = {0x61,0x9E,0x98,0xDF,0x6C,0x68,0xD8,0x9B,0x87,0x8D,0xB8,0x7A,0x66,0x16,0xB9,0xD7};

uint32_t UserCache::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userOnlyId);
          this->__isset.userOnlyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->account);
          this->__isset.account = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->accountTypeId);
          this->__isset.accountTypeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationId);
          this->__isset.organizationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->registeTime);
          this->__isset.registeTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastLoginTime);
          this->__isset.lastLoginTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->approvalState);
          this->__isset.approvalState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserCache::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UserCache");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userOnlyId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->userOnlyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("account", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->account);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("accountTypeId", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->accountTypeId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("organizationId", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->organizationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("registeTime", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->registeTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastLoginTime", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->lastLoginTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("approvalState", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->approvalState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserCache &a, UserCache &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.userOnlyId, b.userOnlyId);
  swap(a.account, b.account);
  swap(a.password, b.password);
  swap(a.accountTypeId, b.accountTypeId);
  swap(a.organizationId, b.organizationId);
  swap(a.registeTime, b.registeTime);
  swap(a.lastLoginTime, b.lastLoginTime);
  swap(a.approvalState, b.approvalState);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

const char* UserOnlineCache::ascii_fingerprint = "873CB9E5A4C10A7ECE7476FD192F55EE";
const uint8_t UserOnlineCache::binary_fingerprint[16] = {0x87,0x3C,0xB9,0xE5,0xA4,0xC1,0x0A,0x7E,0xCE,0x74,0x76,0xFD,0x19,0x2F,0x55,0xEE};

uint32_t UserOnlineCache::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userOnlyId);
          this->__isset.userOnlyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->account);
          this->__isset.account = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->devOnlyId);
          this->__isset.devOnlyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->loginTime);
          this->__isset.loginTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->loginAccount);
          this->__isset.loginAccount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userDevId);
          this->__isset.userDevId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserOnlineCache::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UserOnlineCache");

  xfer += oprot->writeFieldBegin("userOnlyId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->userOnlyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("account", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->account);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("devOnlyId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->devOnlyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("loginTime", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->loginTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("loginAccount", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->loginAccount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userDevId", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->userDevId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserOnlineCache &a, UserOnlineCache &b) {
  using ::std::swap;
  swap(a.userOnlyId, b.userOnlyId);
  swap(a.account, b.account);
  swap(a.devOnlyId, b.devOnlyId);
  swap(a.loginTime, b.loginTime);
  swap(a.loginAccount, b.loginAccount);
  swap(a.userDevId, b.userDevId);
  swap(a.__isset, b.__isset);
}

const char* UserPolicyCache::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t UserPolicyCache::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t UserPolicyCache::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userOnlyId);
          this->__isset.userOnlyId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->policyVersion);
          this->__isset.policyVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->policyIds);
          this->__isset.policyIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserPolicyCache::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UserPolicyCache");

  xfer += oprot->writeFieldBegin("userOnlyId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->userOnlyId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("policyVersion", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->policyVersion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("policyIds", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->policyIds);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserPolicyCache &a, UserPolicyCache &b) {
  using ::std::swap;
  swap(a.userOnlyId, b.userOnlyId);
  swap(a.policyVersion, b.policyVersion);
  swap(a.policyIds, b.policyIds);
  swap(a.__isset, b.__isset);
}

const char* CInstallPackCache::ascii_fingerprint = "2949B60FFAC069A76CE9CFBFC602E1D5";
const uint8_t CInstallPackCache::binary_fingerprint[16] = {0x29,0x49,0xB6,0x0F,0xFA,0xC0,0x69,0xA7,0x6C,0xE9,0xCF,0xBF,0xC6,0x02,0xE1,0xD5};

uint32_t CInstallPackCache::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cInstallPackId);
          this->__isset.cInstallPackId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->osType);
          this->__isset.osType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->productType);
          this->__isset.productType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pubTime);
          this->__isset.pubTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->crc);
          this->__isset.crc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CInstallPackCache::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CInstallPackCache");

  xfer += oprot->writeFieldBegin("cInstallPackId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->cInstallPackId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("osType", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->osType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productType", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->productType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pubTime", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->pubTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("crc", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->crc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CInstallPackCache &a, CInstallPackCache &b) {
  using ::std::swap;
  swap(a.cInstallPackId, b.cInstallPackId);
  swap(a.name, b.name);
  swap(a.version, b.version);
  swap(a.size, b.size);
  swap(a.path, b.path);
  swap(a.osType, b.osType);
  swap(a.productType, b.productType);
  swap(a.pubTime, b.pubTime);
  swap(a.crc, b.crc);
  swap(a.__isset, b.__isset);
}

const char* PolicyCache::ascii_fingerprint = "7C659ED3D0F6071DB427E0D8A3A5A85F";
const uint8_t PolicyCache::binary_fingerprint[16] = {0x7C,0x65,0x9E,0xD3,0xD0,0xF6,0x07,0x1D,0xB4,0x27,0xE0,0xD8,0xA3,0xA5,0xA8,0x5F};

uint32_t PolicyCache::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->objType);
          this->__isset.objType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->crc);
          this->__isset.crc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contentCRC);
          this->__isset.contentCRC = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->organizationId);
          this->__isset.organizationId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->publishTime);
          this->__isset.publishTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->policyTemplateId);
          this->__isset.policyTemplateId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->obj);
          this->__isset.obj = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->objCRC);
          this->__isset.objCRC = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PolicyCache::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PolicyCache");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objType", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->objType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("crc", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->crc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contentCRC", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->contentCRC);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("organizationId", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->organizationId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("publishTime", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->publishTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("policyTemplateId", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->policyTemplateId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("obj", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->obj);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("objCRC", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->objCRC);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PolicyCache &a, PolicyCache &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.objType, b.objType);
  swap(a.name, b.name);
  swap(a.content, b.content);
  swap(a.crc, b.crc);
  swap(a.contentCRC, b.contentCRC);
  swap(a.organizationId, b.organizationId);
  swap(a.publishTime, b.publishTime);
  swap(a.policyTemplateId, b.policyTemplateId);
  swap(a.obj, b.obj);
  swap(a.objCRC, b.objCRC);
  swap(a.__isset, b.__isset);
}

const char* CUpgradePackCache::ascii_fingerprint = "CC3C1B46B4C8633346064A3ABEDBC993";
const uint8_t CUpgradePackCache::binary_fingerprint[16] = {0xCC,0x3C,0x1B,0x46,0xB4,0xC8,0x63,0x33,0x46,0x06,0x4A,0x3A,0xBE,0xDB,0xC9,0x93};

uint32_t CUpgradePackCache::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cUpgradePackId);
          this->__isset.cUpgradePackId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->osType);
          this->__isset.osType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->productType);
          this->__isset.productType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pubTime);
          this->__isset.pubTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->crc);
          this->__isset.crc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CUpgradePackCache::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CUpgradePackCache");

  xfer += oprot->writeFieldBegin("cUpgradePackId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->cUpgradePackId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("osType", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->osType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("productType", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->productType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pubTime", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->pubTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("crc", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->crc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CUpgradePackCache &a, CUpgradePackCache &b) {
  using ::std::swap;
  swap(a.cUpgradePackId, b.cUpgradePackId);
  swap(a.name, b.name);
  swap(a.version, b.version);
  swap(a.size, b.size);
  swap(a.path, b.path);
  swap(a.osType, b.osType);
  swap(a.productType, b.productType);
  swap(a.pubTime, b.pubTime);
  swap(a.crc, b.crc);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

const char* SensitiveCache::ascii_fingerprint = "873CB9E5A4C10A7ECE7476FD192F55EE";
const uint8_t SensitiveCache::binary_fingerprint[16] = {0x87,0x3C,0xB9,0xE5,0xA4,0xC1,0x0A,0x7E,0xCE,0x74,0x76,0xFD,0x19,0x2F,0x55,0xEE};

uint32_t SensitiveCache::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->crc);
          this->__isset.crc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->lastUpdateTime);
          this->__isset.lastUpdateTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SensitiveCache::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SensitiveCache");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("crc", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->crc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lastUpdateTime", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->lastUpdateTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SensitiveCache &a, SensitiveCache &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.path, b.path);
  swap(a.crc, b.crc);
  swap(a.createTime, b.createTime);
  swap(a.lastUpdateTime, b.lastUpdateTime);
  swap(a.__isset, b.__isset);
}

const char* MsgCache::ascii_fingerprint = "C93D890311F28844166CF6E571EB3AC2";
const uint8_t MsgCache::binary_fingerprint[16] = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

uint32_t MsgCache::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msgId);
          this->__isset.msgId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msgType);
          this->__isset.msgType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msgData);
          this->__isset.msgData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MsgCache::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MsgCache");

  xfer += oprot->writeFieldBegin("msgId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->msgId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msgType", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->msgType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msgData", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->msgData);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MsgCache &a, MsgCache &b) {
  using ::std::swap;
  swap(a.msgId, b.msgId);
  swap(a.msgType, b.msgType);
  swap(a.msgData, b.msgData);
  swap(a.createTime, b.createTime);
  swap(a.__isset, b.__isset);
}

const char* TokenCache::ascii_fingerprint = "BFF0E21728CB005F9AA5774A41542B8D";
const uint8_t TokenCache::binary_fingerprint[16] = {0xBF,0xF0,0xE2,0x17,0x28,0xCB,0x00,0x5F,0x9A,0xA5,0x77,0x4A,0x41,0x54,0x2B,0x8D};

uint32_t TokenCache::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appId);
          this->__isset.appId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->expiredTime);
          this->__isset.expiredTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->refreshTime);
          this->__isset.refreshTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TokenCache::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TokenCache");

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("appId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->appId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("expiredTime", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->expiredTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("refreshTime", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->refreshTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TokenCache &a, TokenCache &b) {
  using ::std::swap;
  swap(a.token, b.token);
  swap(a.appId, b.appId);
  swap(a.createTime, b.createTime);
  swap(a.expiredTime, b.expiredTime);
  swap(a.refreshTime, b.refreshTime);
  swap(a.__isset, b.__isset);
}

}}}}}}} // namespace
