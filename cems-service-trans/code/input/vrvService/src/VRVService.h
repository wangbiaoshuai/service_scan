/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef VRVService_H
#define VRVService_H

#include <thrift/TDispatchProcessor.h>
#include "vrv_types.h"



class VRVServiceIf {
 public:
  virtual ~VRVServiceIf() {}
  virtual void getName(std::string& _return) = 0;
  virtual void getVersion(std::string& _return) = 0;
  virtual void getServiceBizMethods(std::vector<BizMethodInfo> & _return) = 0;
  virtual void getBizMethodsInvokeInfo(std::map<std::string, BizMethodInvokeInfo> & _return) = 0;
  virtual void getBizMethodInvokeInfo(BizMethodInvokeInfo& _return, const std::string& methodName) = 0;
  virtual int64_t getServiceCount() = 0;
  virtual int64_t aliveSince() = 0;
  virtual void reinitialize() = 0;
  virtual void shutdown() = 0;
  virtual void setOption(const std::string& key, const std::string& value) = 0;
  virtual void getOptions(std::map<std::string, std::string> & _return) = 0;
};

class VRVServiceIfFactory {
 public:
  typedef VRVServiceIf Handler;

  virtual ~VRVServiceIfFactory() {}

  virtual VRVServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(VRVServiceIf* /* handler */) = 0;
};

class VRVServiceIfSingletonFactory : virtual public VRVServiceIfFactory {
 public:
  VRVServiceIfSingletonFactory(const boost::shared_ptr<VRVServiceIf>& iface) : iface_(iface) {}
  virtual ~VRVServiceIfSingletonFactory() {}

  virtual VRVServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(VRVServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<VRVServiceIf> iface_;
};

class VRVServiceNull : virtual public VRVServiceIf {
 public:
  virtual ~VRVServiceNull() {}
  void getName(std::string& /* _return */) {
    return;
  }
  void getVersion(std::string& /* _return */) {
    return;
  }
  void getServiceBizMethods(std::vector<BizMethodInfo> & /* _return */) {
    return;
  }
  void getBizMethodsInvokeInfo(std::map<std::string, BizMethodInvokeInfo> & /* _return */) {
    return;
  }
  void getBizMethodInvokeInfo(BizMethodInvokeInfo& /* _return */, const std::string& /* methodName */) {
    return;
  }
  int64_t getServiceCount() {
    int64_t _return = 0;
    return _return;
  }
  int64_t aliveSince() {
    int64_t _return = 0;
    return _return;
  }
  void reinitialize() {
    return;
  }
  void shutdown() {
    return;
  }
  void setOption(const std::string& /* key */, const std::string& /* value */) {
    return;
  }
  void getOptions(std::map<std::string, std::string> & /* _return */) {
    return;
  }
};


class VRVService_getName_args {
 public:

  VRVService_getName_args() {
  }

  virtual ~VRVService_getName_args() throw() {}


  bool operator == (const VRVService_getName_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VRVService_getName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_getName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VRVService_getName_pargs {
 public:


  virtual ~VRVService_getName_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VRVService_getName_result__isset {
  _VRVService_getName_result__isset() : success(false) {}
  bool success;
} _VRVService_getName_result__isset;

class VRVService_getName_result {
 public:

  VRVService_getName_result() : success() {
  }

  virtual ~VRVService_getName_result() throw() {}

  std::string success;

  _VRVService_getName_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const VRVService_getName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VRVService_getName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_getName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VRVService_getName_presult__isset {
  _VRVService_getName_presult__isset() : success(false) {}
  bool success;
} _VRVService_getName_presult__isset;

class VRVService_getName_presult {
 public:


  virtual ~VRVService_getName_presult() throw() {}

  std::string* success;

  _VRVService_getName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class VRVService_getVersion_args {
 public:

  VRVService_getVersion_args() {
  }

  virtual ~VRVService_getVersion_args() throw() {}


  bool operator == (const VRVService_getVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VRVService_getVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_getVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VRVService_getVersion_pargs {
 public:


  virtual ~VRVService_getVersion_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VRVService_getVersion_result__isset {
  _VRVService_getVersion_result__isset() : success(false) {}
  bool success;
} _VRVService_getVersion_result__isset;

class VRVService_getVersion_result {
 public:

  VRVService_getVersion_result() : success() {
  }

  virtual ~VRVService_getVersion_result() throw() {}

  std::string success;

  _VRVService_getVersion_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const VRVService_getVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VRVService_getVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_getVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VRVService_getVersion_presult__isset {
  _VRVService_getVersion_presult__isset() : success(false) {}
  bool success;
} _VRVService_getVersion_presult__isset;

class VRVService_getVersion_presult {
 public:


  virtual ~VRVService_getVersion_presult() throw() {}

  std::string* success;

  _VRVService_getVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class VRVService_getServiceBizMethods_args {
 public:

  VRVService_getServiceBizMethods_args() {
  }

  virtual ~VRVService_getServiceBizMethods_args() throw() {}


  bool operator == (const VRVService_getServiceBizMethods_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VRVService_getServiceBizMethods_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_getServiceBizMethods_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VRVService_getServiceBizMethods_pargs {
 public:


  virtual ~VRVService_getServiceBizMethods_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VRVService_getServiceBizMethods_result__isset {
  _VRVService_getServiceBizMethods_result__isset() : success(false) {}
  bool success;
} _VRVService_getServiceBizMethods_result__isset;

class VRVService_getServiceBizMethods_result {
 public:

  VRVService_getServiceBizMethods_result() {
  }

  virtual ~VRVService_getServiceBizMethods_result() throw() {}

  std::vector<BizMethodInfo>  success;

  _VRVService_getServiceBizMethods_result__isset __isset;

  void __set_success(const std::vector<BizMethodInfo> & val) {
    success = val;
  }

  bool operator == (const VRVService_getServiceBizMethods_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VRVService_getServiceBizMethods_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_getServiceBizMethods_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VRVService_getServiceBizMethods_presult__isset {
  _VRVService_getServiceBizMethods_presult__isset() : success(false) {}
  bool success;
} _VRVService_getServiceBizMethods_presult__isset;

class VRVService_getServiceBizMethods_presult {
 public:


  virtual ~VRVService_getServiceBizMethods_presult() throw() {}

  std::vector<BizMethodInfo> * success;

  _VRVService_getServiceBizMethods_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class VRVService_getBizMethodsInvokeInfo_args {
 public:

  VRVService_getBizMethodsInvokeInfo_args() {
  }

  virtual ~VRVService_getBizMethodsInvokeInfo_args() throw() {}


  bool operator == (const VRVService_getBizMethodsInvokeInfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VRVService_getBizMethodsInvokeInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_getBizMethodsInvokeInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VRVService_getBizMethodsInvokeInfo_pargs {
 public:


  virtual ~VRVService_getBizMethodsInvokeInfo_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VRVService_getBizMethodsInvokeInfo_result__isset {
  _VRVService_getBizMethodsInvokeInfo_result__isset() : success(false) {}
  bool success;
} _VRVService_getBizMethodsInvokeInfo_result__isset;

class VRVService_getBizMethodsInvokeInfo_result {
 public:

  VRVService_getBizMethodsInvokeInfo_result() {
  }

  virtual ~VRVService_getBizMethodsInvokeInfo_result() throw() {}

  std::map<std::string, BizMethodInvokeInfo>  success;

  _VRVService_getBizMethodsInvokeInfo_result__isset __isset;

  void __set_success(const std::map<std::string, BizMethodInvokeInfo> & val) {
    success = val;
  }

  bool operator == (const VRVService_getBizMethodsInvokeInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VRVService_getBizMethodsInvokeInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_getBizMethodsInvokeInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VRVService_getBizMethodsInvokeInfo_presult__isset {
  _VRVService_getBizMethodsInvokeInfo_presult__isset() : success(false) {}
  bool success;
} _VRVService_getBizMethodsInvokeInfo_presult__isset;

class VRVService_getBizMethodsInvokeInfo_presult {
 public:


  virtual ~VRVService_getBizMethodsInvokeInfo_presult() throw() {}

  std::map<std::string, BizMethodInvokeInfo> * success;

  _VRVService_getBizMethodsInvokeInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _VRVService_getBizMethodInvokeInfo_args__isset {
  _VRVService_getBizMethodInvokeInfo_args__isset() : methodName(false) {}
  bool methodName;
} _VRVService_getBizMethodInvokeInfo_args__isset;

class VRVService_getBizMethodInvokeInfo_args {
 public:

  VRVService_getBizMethodInvokeInfo_args() : methodName() {
  }

  virtual ~VRVService_getBizMethodInvokeInfo_args() throw() {}

  std::string methodName;

  _VRVService_getBizMethodInvokeInfo_args__isset __isset;

  void __set_methodName(const std::string& val) {
    methodName = val;
  }

  bool operator == (const VRVService_getBizMethodInvokeInfo_args & rhs) const
  {
    if (!(methodName == rhs.methodName))
      return false;
    return true;
  }
  bool operator != (const VRVService_getBizMethodInvokeInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_getBizMethodInvokeInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VRVService_getBizMethodInvokeInfo_pargs {
 public:


  virtual ~VRVService_getBizMethodInvokeInfo_pargs() throw() {}

  const std::string* methodName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VRVService_getBizMethodInvokeInfo_result__isset {
  _VRVService_getBizMethodInvokeInfo_result__isset() : success(false) {}
  bool success;
} _VRVService_getBizMethodInvokeInfo_result__isset;

class VRVService_getBizMethodInvokeInfo_result {
 public:

  VRVService_getBizMethodInvokeInfo_result() {
  }

  virtual ~VRVService_getBizMethodInvokeInfo_result() throw() {}

  BizMethodInvokeInfo success;

  _VRVService_getBizMethodInvokeInfo_result__isset __isset;

  void __set_success(const BizMethodInvokeInfo& val) {
    success = val;
  }

  bool operator == (const VRVService_getBizMethodInvokeInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VRVService_getBizMethodInvokeInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_getBizMethodInvokeInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VRVService_getBizMethodInvokeInfo_presult__isset {
  _VRVService_getBizMethodInvokeInfo_presult__isset() : success(false) {}
  bool success;
} _VRVService_getBizMethodInvokeInfo_presult__isset;

class VRVService_getBizMethodInvokeInfo_presult {
 public:


  virtual ~VRVService_getBizMethodInvokeInfo_presult() throw() {}

  BizMethodInvokeInfo* success;

  _VRVService_getBizMethodInvokeInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class VRVService_getServiceCount_args {
 public:

  VRVService_getServiceCount_args() {
  }

  virtual ~VRVService_getServiceCount_args() throw() {}


  bool operator == (const VRVService_getServiceCount_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VRVService_getServiceCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_getServiceCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VRVService_getServiceCount_pargs {
 public:


  virtual ~VRVService_getServiceCount_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VRVService_getServiceCount_result__isset {
  _VRVService_getServiceCount_result__isset() : success(false) {}
  bool success;
} _VRVService_getServiceCount_result__isset;

class VRVService_getServiceCount_result {
 public:

  VRVService_getServiceCount_result() : success(0) {
  }

  virtual ~VRVService_getServiceCount_result() throw() {}

  int64_t success;

  _VRVService_getServiceCount_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const VRVService_getServiceCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VRVService_getServiceCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_getServiceCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VRVService_getServiceCount_presult__isset {
  _VRVService_getServiceCount_presult__isset() : success(false) {}
  bool success;
} _VRVService_getServiceCount_presult__isset;

class VRVService_getServiceCount_presult {
 public:


  virtual ~VRVService_getServiceCount_presult() throw() {}

  int64_t* success;

  _VRVService_getServiceCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class VRVService_aliveSince_args {
 public:

  VRVService_aliveSince_args() {
  }

  virtual ~VRVService_aliveSince_args() throw() {}


  bool operator == (const VRVService_aliveSince_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VRVService_aliveSince_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_aliveSince_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VRVService_aliveSince_pargs {
 public:


  virtual ~VRVService_aliveSince_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VRVService_aliveSince_result__isset {
  _VRVService_aliveSince_result__isset() : success(false) {}
  bool success;
} _VRVService_aliveSince_result__isset;

class VRVService_aliveSince_result {
 public:

  VRVService_aliveSince_result() : success(0) {
  }

  virtual ~VRVService_aliveSince_result() throw() {}

  int64_t success;

  _VRVService_aliveSince_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const VRVService_aliveSince_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VRVService_aliveSince_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_aliveSince_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VRVService_aliveSince_presult__isset {
  _VRVService_aliveSince_presult__isset() : success(false) {}
  bool success;
} _VRVService_aliveSince_presult__isset;

class VRVService_aliveSince_presult {
 public:


  virtual ~VRVService_aliveSince_presult() throw() {}

  int64_t* success;

  _VRVService_aliveSince_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class VRVService_reinitialize_args {
 public:

  VRVService_reinitialize_args() {
  }

  virtual ~VRVService_reinitialize_args() throw() {}


  bool operator == (const VRVService_reinitialize_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VRVService_reinitialize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_reinitialize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VRVService_reinitialize_pargs {
 public:


  virtual ~VRVService_reinitialize_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VRVService_shutdown_args {
 public:

  VRVService_shutdown_args() {
  }

  virtual ~VRVService_shutdown_args() throw() {}


  bool operator == (const VRVService_shutdown_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VRVService_shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_shutdown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VRVService_shutdown_pargs {
 public:


  virtual ~VRVService_shutdown_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VRVService_setOption_args__isset {
  _VRVService_setOption_args__isset() : key(false), value(false) {}
  bool key;
  bool value;
} _VRVService_setOption_args__isset;

class VRVService_setOption_args {
 public:

  VRVService_setOption_args() : key(), value() {
  }

  virtual ~VRVService_setOption_args() throw() {}

  std::string key;
  std::string value;

  _VRVService_setOption_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const VRVService_setOption_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const VRVService_setOption_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_setOption_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VRVService_setOption_pargs {
 public:


  virtual ~VRVService_setOption_pargs() throw() {}

  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VRVService_setOption_result {
 public:

  VRVService_setOption_result() {
  }

  virtual ~VRVService_setOption_result() throw() {}


  bool operator == (const VRVService_setOption_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VRVService_setOption_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_setOption_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VRVService_setOption_presult {
 public:


  virtual ~VRVService_setOption_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class VRVService_getOptions_args {
 public:

  VRVService_getOptions_args() {
  }

  virtual ~VRVService_getOptions_args() throw() {}


  bool operator == (const VRVService_getOptions_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VRVService_getOptions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_getOptions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VRVService_getOptions_pargs {
 public:


  virtual ~VRVService_getOptions_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VRVService_getOptions_result__isset {
  _VRVService_getOptions_result__isset() : success(false) {}
  bool success;
} _VRVService_getOptions_result__isset;

class VRVService_getOptions_result {
 public:

  VRVService_getOptions_result() {
  }

  virtual ~VRVService_getOptions_result() throw() {}

  std::map<std::string, std::string>  success;

  _VRVService_getOptions_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const VRVService_getOptions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VRVService_getOptions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VRVService_getOptions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VRVService_getOptions_presult__isset {
  _VRVService_getOptions_presult__isset() : success(false) {}
  bool success;
} _VRVService_getOptions_presult__isset;

class VRVService_getOptions_presult {
 public:


  virtual ~VRVService_getOptions_presult() throw() {}

  std::map<std::string, std::string> * success;

  _VRVService_getOptions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class VRVServiceClient : virtual public VRVServiceIf {
 public:
  VRVServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  VRVServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getName(std::string& _return);
  void send_getName();
  void recv_getName(std::string& _return);
  void getVersion(std::string& _return);
  void send_getVersion();
  void recv_getVersion(std::string& _return);
  void getServiceBizMethods(std::vector<BizMethodInfo> & _return);
  void send_getServiceBizMethods();
  void recv_getServiceBizMethods(std::vector<BizMethodInfo> & _return);
  void getBizMethodsInvokeInfo(std::map<std::string, BizMethodInvokeInfo> & _return);
  void send_getBizMethodsInvokeInfo();
  void recv_getBizMethodsInvokeInfo(std::map<std::string, BizMethodInvokeInfo> & _return);
  void getBizMethodInvokeInfo(BizMethodInvokeInfo& _return, const std::string& methodName);
  void send_getBizMethodInvokeInfo(const std::string& methodName);
  void recv_getBizMethodInvokeInfo(BizMethodInvokeInfo& _return);
  int64_t getServiceCount();
  void send_getServiceCount();
  int64_t recv_getServiceCount();
  int64_t aliveSince();
  void send_aliveSince();
  int64_t recv_aliveSince();
  void reinitialize();
  void send_reinitialize();
  void shutdown();
  void send_shutdown();
  void setOption(const std::string& key, const std::string& value);
  void send_setOption(const std::string& key, const std::string& value);
  void recv_setOption();
  void getOptions(std::map<std::string, std::string> & _return);
  void send_getOptions();
  void recv_getOptions(std::map<std::string, std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class VRVServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<VRVServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (VRVServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getServiceBizMethods(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBizMethodsInvokeInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBizMethodInvokeInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getServiceCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_aliveSince(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reinitialize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdown(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setOption(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOptions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  VRVServiceProcessor(boost::shared_ptr<VRVServiceIf> iface) :
    iface_(iface) {
    processMap_["getName"] = &VRVServiceProcessor::process_getName;
    processMap_["getVersion"] = &VRVServiceProcessor::process_getVersion;
    processMap_["getServiceBizMethods"] = &VRVServiceProcessor::process_getServiceBizMethods;
    processMap_["getBizMethodsInvokeInfo"] = &VRVServiceProcessor::process_getBizMethodsInvokeInfo;
    processMap_["getBizMethodInvokeInfo"] = &VRVServiceProcessor::process_getBizMethodInvokeInfo;
    processMap_["getServiceCount"] = &VRVServiceProcessor::process_getServiceCount;
    processMap_["aliveSince"] = &VRVServiceProcessor::process_aliveSince;
    processMap_["reinitialize"] = &VRVServiceProcessor::process_reinitialize;
    processMap_["shutdown"] = &VRVServiceProcessor::process_shutdown;
    processMap_["setOption"] = &VRVServiceProcessor::process_setOption;
    processMap_["getOptions"] = &VRVServiceProcessor::process_getOptions;
  }

  virtual ~VRVServiceProcessor() {}
};

class VRVServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  VRVServiceProcessorFactory(const ::boost::shared_ptr< VRVServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< VRVServiceIfFactory > handlerFactory_;
};

class VRVServiceMultiface : virtual public VRVServiceIf {
 public:
  VRVServiceMultiface(std::vector<boost::shared_ptr<VRVServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~VRVServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<VRVServiceIf> > ifaces_;
  VRVServiceMultiface() {}
  void add(boost::shared_ptr<VRVServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getName(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getName(_return);
    }
    ifaces_[i]->getName(_return);
    return;
  }

  void getVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getVersion(_return);
    }
    ifaces_[i]->getVersion(_return);
    return;
  }

  void getServiceBizMethods(std::vector<BizMethodInfo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getServiceBizMethods(_return);
    }
    ifaces_[i]->getServiceBizMethods(_return);
    return;
  }

  void getBizMethodsInvokeInfo(std::map<std::string, BizMethodInvokeInfo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBizMethodsInvokeInfo(_return);
    }
    ifaces_[i]->getBizMethodsInvokeInfo(_return);
    return;
  }

  void getBizMethodInvokeInfo(BizMethodInvokeInfo& _return, const std::string& methodName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBizMethodInvokeInfo(_return, methodName);
    }
    ifaces_[i]->getBizMethodInvokeInfo(_return, methodName);
    return;
  }

  int64_t getServiceCount() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getServiceCount();
    }
    return ifaces_[i]->getServiceCount();
  }

  int64_t aliveSince() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->aliveSince();
    }
    return ifaces_[i]->aliveSince();
  }

  void reinitialize() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reinitialize();
    }
    ifaces_[i]->reinitialize();
  }

  void shutdown() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shutdown();
    }
    ifaces_[i]->shutdown();
  }

  void setOption(const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setOption(key, value);
    }
    ifaces_[i]->setOption(key, value);
  }

  void getOptions(std::map<std::string, std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getOptions(_return);
    }
    ifaces_[i]->getOptions(_return);
    return;
  }

};



#endif
