// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "CommonService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <log.h>

#define LOG_CONFIG_PATH "../config/log4cplus.properties"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::com::vrv::cems::common::thrift::service;

class CommonServiceHandler : virtual public CommonServiceIf 
{
public:
    CommonServiceHandler() 
    {
        // Your initialization goes here
    }

    void getDataTS(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& checkCode, const bool isZip, const std::string& data, const bool isEncrypt, const std::string& key, const int32_t flag)
    {
        // Your implementation goes here
        printf("getDataTS\n");
    }

    void getDataTC(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& checkCode, const bool isZip, const std::string& data, const std::string& sessionId, const int32_t msgCode) 
    {
        // Your implementation goes here
        printf("getDataTC\n");
    }

};

int main(int argc, char **argv) 
{
    INIT_LOG(LOG_CONFIG_PATH);
    LOG_INFO("begin main");
    int port = 9090;
    shared_ptr<CommonServiceHandler> handler(new CommonServiceHandler());
    shared_ptr<TProcessor> processor(new CommonServiceProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    LOG_INFO("service end");
    return 0;
}

