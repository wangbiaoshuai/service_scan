// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "CommonService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <log.h>
#include "service_reg.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::com::vrv::cems::common::thrift::service;
using namespace cems::service::scan;

class CommonServiceHandler : virtual public CommonServiceIf 
{
public:
    CommonServiceHandler() 
    {
        // Your initialization goes here
    }

    void getDataTS(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& checkCode, const bool isZip, const std::string& data, const bool isEncrypt, const std::string& key, const int32_t flag)
    {
        // Your implementation goes here
        printf("getDataTS\n");
    }

    void getDataTC(std::string& _return, const std::string& maxCode, const std::string& minCode, const std::string& checkCode, const bool isZip, const std::string& data, const std::string& sessionId, const int32_t msgCode) 
    {
        // Your implementation goes here
        printf("getDataTC\n");
    }

};

int main(int argc, char **argv) 
{
    INIT_LOG(LOG_CONFIG_PATH);
    LOG_INFO("begin main");

    ServiceReg service_reg;

    if(!service_reg.IsLegalAddr())
    {
        LOG_ERROR("service ip is illegal");
        return -1;
    }
    bool res = false;
    do
    {
        res = service_reg.RegistToConfSrv();
        if(res)
        {
            break;
        }
        else
        {
            sleep(60);
        }
    }while(true);

    service_reg.StartHeartThead();

    int port = service_reg.GetServicePort();
    shared_ptr<CommonServiceHandler> handler(new CommonServiceHandler());
    shared_ptr<TProcessor> processor(new CommonServiceProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();

    service_reg.StopHeartThead();
    LOG_INFO("service end");
    return 0;
}

