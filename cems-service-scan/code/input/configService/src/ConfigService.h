/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ConfigService_H
#define ConfigService_H

#include <thrift/TDispatchProcessor.h>
#include "config_types.h"
#include "VRVService.h"

namespace com { namespace vrv { namespace im { namespace service {

class ConfigServiceIf : virtual public  ::VRVServiceIf {
 public:
  virtual ~ConfigServiceIf() {}
  virtual void registerService(ServiceConfigResult& _return, const ServiceConfigBean& config) = 0;
  virtual int8_t serviceHeart(const std::string& ID) = 0;
  virtual void loadServices(std::vector<ServiceConfigBean> & _return) = 0;
  virtual void queryService(std::vector<ServiceConfigBean> & _return, const std::string& serviceID, const std::string& version) = 0;
};

class ConfigServiceIfFactory : virtual public  ::VRVServiceIfFactory {
 public:
  typedef ConfigServiceIf Handler;

  virtual ~ConfigServiceIfFactory() {}

  virtual ConfigServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::VRVServiceIf* /* handler */) = 0;
};

class ConfigServiceIfSingletonFactory : virtual public ConfigServiceIfFactory {
 public:
  ConfigServiceIfSingletonFactory(const boost::shared_ptr<ConfigServiceIf>& iface) : iface_(iface) {}
  virtual ~ConfigServiceIfSingletonFactory() {}

  virtual ConfigServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::VRVServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ConfigServiceIf> iface_;
};

class ConfigServiceNull : virtual public ConfigServiceIf , virtual public  ::VRVServiceNull {
 public:
  virtual ~ConfigServiceNull() {}
  void registerService(ServiceConfigResult& /* _return */, const ServiceConfigBean& /* config */) {
    return;
  }
  int8_t serviceHeart(const std::string& /* ID */) {
    int8_t _return = 0;
    return _return;
  }
  void loadServices(std::vector<ServiceConfigBean> & /* _return */) {
    return;
  }
  void queryService(std::vector<ServiceConfigBean> & /* _return */, const std::string& /* serviceID */, const std::string& /* version */) {
    return;
  }
};

typedef struct _ConfigService_registerService_args__isset {
  _ConfigService_registerService_args__isset() : config(false) {}
  bool config;
} _ConfigService_registerService_args__isset;

class ConfigService_registerService_args {
 public:

  ConfigService_registerService_args() {
  }

  virtual ~ConfigService_registerService_args() throw() {}

  ServiceConfigBean config;

  _ConfigService_registerService_args__isset __isset;

  void __set_config(const ServiceConfigBean& val) {
    config = val;
  }

  bool operator == (const ConfigService_registerService_args & rhs) const
  {
    if (!(config == rhs.config))
      return false;
    return true;
  }
  bool operator != (const ConfigService_registerService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigService_registerService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigService_registerService_pargs {
 public:


  virtual ~ConfigService_registerService_pargs() throw() {}

  const ServiceConfigBean* config;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigService_registerService_result__isset {
  _ConfigService_registerService_result__isset() : success(false) {}
  bool success;
} _ConfigService_registerService_result__isset;

class ConfigService_registerService_result {
 public:

  ConfigService_registerService_result() {
  }

  virtual ~ConfigService_registerService_result() throw() {}

  ServiceConfigResult success;

  _ConfigService_registerService_result__isset __isset;

  void __set_success(const ServiceConfigResult& val) {
    success = val;
  }

  bool operator == (const ConfigService_registerService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigService_registerService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigService_registerService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigService_registerService_presult__isset {
  _ConfigService_registerService_presult__isset() : success(false) {}
  bool success;
} _ConfigService_registerService_presult__isset;

class ConfigService_registerService_presult {
 public:


  virtual ~ConfigService_registerService_presult() throw() {}

  ServiceConfigResult* success;

  _ConfigService_registerService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigService_serviceHeart_args__isset {
  _ConfigService_serviceHeart_args__isset() : ID(false) {}
  bool ID;
} _ConfigService_serviceHeart_args__isset;

class ConfigService_serviceHeart_args {
 public:

  ConfigService_serviceHeart_args() : ID() {
  }

  virtual ~ConfigService_serviceHeart_args() throw() {}

  std::string ID;

  _ConfigService_serviceHeart_args__isset __isset;

  void __set_ID(const std::string& val) {
    ID = val;
  }

  bool operator == (const ConfigService_serviceHeart_args & rhs) const
  {
    if (!(ID == rhs.ID))
      return false;
    return true;
  }
  bool operator != (const ConfigService_serviceHeart_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigService_serviceHeart_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigService_serviceHeart_pargs {
 public:


  virtual ~ConfigService_serviceHeart_pargs() throw() {}

  const std::string* ID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigService_serviceHeart_result__isset {
  _ConfigService_serviceHeart_result__isset() : success(false) {}
  bool success;
} _ConfigService_serviceHeart_result__isset;

class ConfigService_serviceHeart_result {
 public:

  ConfigService_serviceHeart_result() : success(0) {
  }

  virtual ~ConfigService_serviceHeart_result() throw() {}

  int8_t success;

  _ConfigService_serviceHeart_result__isset __isset;

  void __set_success(const int8_t val) {
    success = val;
  }

  bool operator == (const ConfigService_serviceHeart_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigService_serviceHeart_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigService_serviceHeart_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigService_serviceHeart_presult__isset {
  _ConfigService_serviceHeart_presult__isset() : success(false) {}
  bool success;
} _ConfigService_serviceHeart_presult__isset;

class ConfigService_serviceHeart_presult {
 public:


  virtual ~ConfigService_serviceHeart_presult() throw() {}

  int8_t* success;

  _ConfigService_serviceHeart_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ConfigService_loadServices_args {
 public:

  ConfigService_loadServices_args() {
  }

  virtual ~ConfigService_loadServices_args() throw() {}


  bool operator == (const ConfigService_loadServices_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ConfigService_loadServices_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigService_loadServices_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigService_loadServices_pargs {
 public:


  virtual ~ConfigService_loadServices_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigService_loadServices_result__isset {
  _ConfigService_loadServices_result__isset() : success(false) {}
  bool success;
} _ConfigService_loadServices_result__isset;

class ConfigService_loadServices_result {
 public:

  ConfigService_loadServices_result() {
  }

  virtual ~ConfigService_loadServices_result() throw() {}

  std::vector<ServiceConfigBean>  success;

  _ConfigService_loadServices_result__isset __isset;

  void __set_success(const std::vector<ServiceConfigBean> & val) {
    success = val;
  }

  bool operator == (const ConfigService_loadServices_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigService_loadServices_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigService_loadServices_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigService_loadServices_presult__isset {
  _ConfigService_loadServices_presult__isset() : success(false) {}
  bool success;
} _ConfigService_loadServices_presult__isset;

class ConfigService_loadServices_presult {
 public:


  virtual ~ConfigService_loadServices_presult() throw() {}

  std::vector<ServiceConfigBean> * success;

  _ConfigService_loadServices_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ConfigService_queryService_args__isset {
  _ConfigService_queryService_args__isset() : serviceID(false), version(false) {}
  bool serviceID;
  bool version;
} _ConfigService_queryService_args__isset;

class ConfigService_queryService_args {
 public:

  ConfigService_queryService_args() : serviceID(), version() {
  }

  virtual ~ConfigService_queryService_args() throw() {}

  std::string serviceID;
  std::string version;

  _ConfigService_queryService_args__isset __isset;

  void __set_serviceID(const std::string& val) {
    serviceID = val;
  }

  void __set_version(const std::string& val) {
    version = val;
  }

  bool operator == (const ConfigService_queryService_args & rhs) const
  {
    if (!(serviceID == rhs.serviceID))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const ConfigService_queryService_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigService_queryService_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ConfigService_queryService_pargs {
 public:


  virtual ~ConfigService_queryService_pargs() throw() {}

  const std::string* serviceID;
  const std::string* version;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigService_queryService_result__isset {
  _ConfigService_queryService_result__isset() : success(false) {}
  bool success;
} _ConfigService_queryService_result__isset;

class ConfigService_queryService_result {
 public:

  ConfigService_queryService_result() {
  }

  virtual ~ConfigService_queryService_result() throw() {}

  std::vector<ServiceConfigBean>  success;

  _ConfigService_queryService_result__isset __isset;

  void __set_success(const std::vector<ServiceConfigBean> & val) {
    success = val;
  }

  bool operator == (const ConfigService_queryService_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ConfigService_queryService_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ConfigService_queryService_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ConfigService_queryService_presult__isset {
  _ConfigService_queryService_presult__isset() : success(false) {}
  bool success;
} _ConfigService_queryService_presult__isset;

class ConfigService_queryService_presult {
 public:


  virtual ~ConfigService_queryService_presult() throw() {}

  std::vector<ServiceConfigBean> * success;

  _ConfigService_queryService_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ConfigServiceClient : virtual public ConfigServiceIf, public  ::VRVServiceClient {
 public:
  ConfigServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::VRVServiceClient(prot, prot) {}
  ConfigServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
     ::VRVServiceClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void registerService(ServiceConfigResult& _return, const ServiceConfigBean& config);
  void send_registerService(const ServiceConfigBean& config);
  void recv_registerService(ServiceConfigResult& _return);
  int8_t serviceHeart(const std::string& ID);
  void send_serviceHeart(const std::string& ID);
  int8_t recv_serviceHeart();
  void loadServices(std::vector<ServiceConfigBean> & _return);
  void send_loadServices();
  void recv_loadServices(std::vector<ServiceConfigBean> & _return);
  void queryService(std::vector<ServiceConfigBean> & _return, const std::string& serviceID, const std::string& version);
  void send_queryService(const std::string& serviceID, const std::string& version);
  void recv_queryService(std::vector<ServiceConfigBean> & _return);
};

class ConfigServiceProcessor : public  ::VRVServiceProcessor {
 protected:
  boost::shared_ptr<ConfigServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ConfigServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_registerService(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_serviceHeart(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadServices(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_queryService(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ConfigServiceProcessor(boost::shared_ptr<ConfigServiceIf> iface) :
     ::VRVServiceProcessor(iface),
    iface_(iface) {
    processMap_["registerService"] = &ConfigServiceProcessor::process_registerService;
    processMap_["serviceHeart"] = &ConfigServiceProcessor::process_serviceHeart;
    processMap_["loadServices"] = &ConfigServiceProcessor::process_loadServices;
    processMap_["queryService"] = &ConfigServiceProcessor::process_queryService;
  }

  virtual ~ConfigServiceProcessor() {}
};

class ConfigServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ConfigServiceProcessorFactory(const ::boost::shared_ptr< ConfigServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ConfigServiceIfFactory > handlerFactory_;
};

class ConfigServiceMultiface : virtual public ConfigServiceIf, public  ::VRVServiceMultiface {
 public:
  ConfigServiceMultiface(std::vector<boost::shared_ptr<ConfigServiceIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<ConfigServiceIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::VRVServiceMultiface::add(*iter);
    }
  }
  virtual ~ConfigServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ConfigServiceIf> > ifaces_;
  ConfigServiceMultiface() {}
  void add(boost::shared_ptr<ConfigServiceIf> iface) {
     ::VRVServiceMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void registerService(ServiceConfigResult& _return, const ServiceConfigBean& config) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerService(_return, config);
    }
    ifaces_[i]->registerService(_return, config);
    return;
  }

  int8_t serviceHeart(const std::string& ID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->serviceHeart(ID);
    }
    return ifaces_[i]->serviceHeart(ID);
  }

  void loadServices(std::vector<ServiceConfigBean> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadServices(_return);
    }
    ifaces_[i]->loadServices(_return);
    return;
  }

  void queryService(std::vector<ServiceConfigBean> & _return, const std::string& serviceID, const std::string& version) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->queryService(_return, serviceID, version);
    }
    ifaces_[i]->queryService(_return, serviceID, version);
    return;
  }

};

}}}} // namespace

#endif
