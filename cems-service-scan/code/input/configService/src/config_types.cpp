/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "config_types.h"

#include <algorithm>

namespace com { namespace vrv { namespace im { namespace service {

const char* ServiceConfigBean::ascii_fingerprint = "0899FD72249173920D4C4CD23FBC5303";
const uint8_t ServiceConfigBean::binary_fingerprint[16] = {0x08,0x99,0xFD,0x72,0x24,0x91,0x73,0x92,0x0D,0x4C,0x4C,0xD2,0x3F,0xBC,0x53,0x03};

uint32_t ServiceConfigBean::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serviceID);
          this->__isset.serviceID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->property);
          this->__isset.property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tactics);
          this->__isset.tactics = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->location);
          this->__isset.location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->installTime);
          this->__isset.installTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->orgID);
          this->__isset.orgID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverID);
          this->__isset.serverID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->invalidTime);
          this->__isset.invalidTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->SSID);
          this->__isset.SSID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceConfigBean::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceConfigBean");

  xfer += oprot->writeFieldBegin("serviceID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->serviceID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.property) {
    xfer += oprot->writeFieldBegin("property", ::apache::thrift::protocol::T_BYTE, 3);
    xfer += oprot->writeByte(this->property);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->port);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.tactics) {
    xfer += oprot->writeFieldBegin("tactics", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->tactics);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.name) {
    xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.description) {
    xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->description);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.location) {
    xfer += oprot->writeFieldBegin("location", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->location);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.installTime) {
    xfer += oprot->writeFieldBegin("installTime", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->installTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("orgID", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->orgID);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.serverID) {
    xfer += oprot->writeFieldBegin("serverID", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->serverID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.invalidTime) {
    xfer += oprot->writeFieldBegin("invalidTime", ::apache::thrift::protocol::T_I64, 13);
    xfer += oprot->writeI64(this->invalidTime);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("SSID", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->SSID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceConfigBean &a, ServiceConfigBean &b) {
  using ::std::swap;
  swap(a.serviceID, b.serviceID);
  swap(a.version, b.version);
  swap(a.property, b.property);
  swap(a.ip, b.ip);
  swap(a.port, b.port);
  swap(a.tactics, b.tactics);
  swap(a.name, b.name);
  swap(a.description, b.description);
  swap(a.location, b.location);
  swap(a.installTime, b.installTime);
  swap(a.orgID, b.orgID);
  swap(a.serverID, b.serverID);
  swap(a.invalidTime, b.invalidTime);
  swap(a.SSID, b.SSID);
  swap(a.__isset, b.__isset);
}

const char* ServiceConfigResult::ascii_fingerprint = "EAF0A51FCCA478B8CA6B466F7A29473A";
const uint8_t ServiceConfigResult::binary_fingerprint[16] = {0xEA,0xF0,0xA5,0x1F,0xCC,0xA4,0x78,0xB8,0xCA,0x6B,0x46,0x6F,0x7A,0x29,0x47,0x3A};

uint32_t ServiceConfigResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ID);
          this->__isset.ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->property);
          this->__isset.property = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServiceConfigResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ServiceConfigResult");

  xfer += oprot->writeFieldBegin("ID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("property", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->property);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServiceConfigResult &a, ServiceConfigResult &b) {
  using ::std::swap;
  swap(a.ID, b.ID);
  swap(a.property, b.property);
  swap(a.__isset, b.__isset);
}

}}}} // namespace
