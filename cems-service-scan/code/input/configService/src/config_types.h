/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef config_TYPES_H
#define config_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "vrv_types.h"


namespace com { namespace vrv { namespace im { namespace service {

typedef struct _ServiceConfigBean__isset {
  _ServiceConfigBean__isset() : serviceID(false), version(false), property(false), ip(false), port(false), tactics(false), name(false), description(false), location(false), installTime(false), orgID(false), serverID(false), invalidTime(false), SSID(false) {}
  bool serviceID;
  bool version;
  bool property;
  bool ip;
  bool port;
  bool tactics;
  bool name;
  bool description;
  bool location;
  bool installTime;
  bool orgID;
  bool serverID;
  bool invalidTime;
  bool SSID;
} _ServiceConfigBean__isset;

class ServiceConfigBean {
 public:

  static const char* ascii_fingerprint; // = "0899FD72249173920D4C4CD23FBC5303";
  static const uint8_t binary_fingerprint[16]; // = {0x08,0x99,0xFD,0x72,0x24,0x91,0x73,0x92,0x0D,0x4C,0x4C,0xD2,0x3F,0xBC,0x53,0x03};

  ServiceConfigBean() : serviceID(), version(), property(0), ip(), port(0), tactics(), name(), description(), location(), installTime(0), orgID(), serverID(), invalidTime(0), SSID() {
  }

  virtual ~ServiceConfigBean() throw() {}

  std::string serviceID;
  std::string version;
  int8_t property;
  std::string ip;
  int32_t port;
  std::string tactics;
  std::string name;
  std::string description;
  std::string location;
  int64_t installTime;
  std::string orgID;
  std::string serverID;
  int64_t invalidTime;
  std::string SSID;

  _ServiceConfigBean__isset __isset;

  void __set_serviceID(const std::string& val) {
    serviceID = val;
  }

  void __set_version(const std::string& val) {
    version = val;
  }

  void __set_property(const int8_t val) {
    property = val;
    __isset.property = true;
  }

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_port(const int32_t val) {
    port = val;
  }

  void __set_tactics(const std::string& val) {
    tactics = val;
    __isset.tactics = true;
  }

  void __set_name(const std::string& val) {
    name = val;
    __isset.name = true;
  }

  void __set_description(const std::string& val) {
    description = val;
    __isset.description = true;
  }

  void __set_location(const std::string& val) {
    location = val;
    __isset.location = true;
  }

  void __set_installTime(const int64_t val) {
    installTime = val;
    __isset.installTime = true;
  }

  void __set_orgID(const std::string& val) {
    orgID = val;
  }

  void __set_serverID(const std::string& val) {
    serverID = val;
    __isset.serverID = true;
  }

  void __set_invalidTime(const int64_t val) {
    invalidTime = val;
    __isset.invalidTime = true;
  }

  void __set_SSID(const std::string& val) {
    SSID = val;
  }

  bool operator == (const ServiceConfigBean & rhs) const
  {
    if (!(serviceID == rhs.serviceID))
      return false;
    if (!(version == rhs.version))
      return false;
    if (__isset.property != rhs.__isset.property)
      return false;
    else if (__isset.property && !(property == rhs.property))
      return false;
    if (!(ip == rhs.ip))
      return false;
    if (!(port == rhs.port))
      return false;
    if (__isset.tactics != rhs.__isset.tactics)
      return false;
    else if (__isset.tactics && !(tactics == rhs.tactics))
      return false;
    if (__isset.name != rhs.__isset.name)
      return false;
    else if (__isset.name && !(name == rhs.name))
      return false;
    if (__isset.description != rhs.__isset.description)
      return false;
    else if (__isset.description && !(description == rhs.description))
      return false;
    if (__isset.location != rhs.__isset.location)
      return false;
    else if (__isset.location && !(location == rhs.location))
      return false;
    if (__isset.installTime != rhs.__isset.installTime)
      return false;
    else if (__isset.installTime && !(installTime == rhs.installTime))
      return false;
    if (!(orgID == rhs.orgID))
      return false;
    if (__isset.serverID != rhs.__isset.serverID)
      return false;
    else if (__isset.serverID && !(serverID == rhs.serverID))
      return false;
    if (__isset.invalidTime != rhs.__isset.invalidTime)
      return false;
    else if (__isset.invalidTime && !(invalidTime == rhs.invalidTime))
      return false;
    if (!(SSID == rhs.SSID))
      return false;
    return true;
  }
  bool operator != (const ServiceConfigBean &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceConfigBean & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServiceConfigBean &a, ServiceConfigBean &b);

typedef struct _ServiceConfigResult__isset {
  _ServiceConfigResult__isset() : ID(false), property(false) {}
  bool ID;
  bool property;
} _ServiceConfigResult__isset;

class ServiceConfigResult {
 public:

  static const char* ascii_fingerprint; // = "EAF0A51FCCA478B8CA6B466F7A29473A";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0xF0,0xA5,0x1F,0xCC,0xA4,0x78,0xB8,0xCA,0x6B,0x46,0x6F,0x7A,0x29,0x47,0x3A};

  ServiceConfigResult() : ID(), property(0) {
  }

  virtual ~ServiceConfigResult() throw() {}

  std::string ID;
  int8_t property;

  _ServiceConfigResult__isset __isset;

  void __set_ID(const std::string& val) {
    ID = val;
  }

  void __set_property(const int8_t val) {
    property = val;
  }

  bool operator == (const ServiceConfigResult & rhs) const
  {
    if (!(ID == rhs.ID))
      return false;
    if (!(property == rhs.property))
      return false;
    return true;
  }
  bool operator != (const ServiceConfigResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceConfigResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ServiceConfigResult &a, ServiceConfigResult &b);

}}}} // namespace

#endif
