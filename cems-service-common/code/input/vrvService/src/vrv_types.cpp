/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "vrv_types.h"

#include <algorithm>



const char* BizMethodInfo::ascii_fingerprint = "86E364DD5256DED80DC5D0204BE11EE4";
const uint8_t BizMethodInfo::binary_fingerprint[16] = {0x86,0xE3,0x64,0xDD,0x52,0x56,0xDE,0xD8,0x0D,0xC5,0xD0,0x20,0x4B,0xE1,0x1E,0xE4};

uint32_t BizMethodInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->argsNum);
          this->__isset.argsNum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->argsType.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->argsType.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->argsType[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.argsType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BizMethodInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BizMethodInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argsNum", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->argsNum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("argsType", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->argsType.size()));
    std::vector<std::string> ::const_iterator _iter5;
    for (_iter5 = this->argsType.begin(); _iter5 != this->argsType.end(); ++_iter5)
    {
      xfer += oprot->writeString((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BizMethodInfo &a, BizMethodInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.argsNum, b.argsNum);
  swap(a.argsType, b.argsType);
  swap(a.__isset, b.__isset);
}

const char* BizMethodInvokeInfo::ascii_fingerprint = "FD11249ACE8A1CE79C544B3DBECE03F7";
const uint8_t BizMethodInvokeInfo::binary_fingerprint[16] = {0xFD,0x11,0x24,0x9A,0xCE,0x8A,0x1C,0xE7,0x9C,0x54,0x4B,0x3D,0xBE,0xCE,0x03,0xF7};

uint32_t BizMethodInvokeInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->totalCount);
          this->__isset.totalCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->successCount);
          this->__isset.successCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->failureCount);
          this->__isset.failureCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->successAverageTime);
          this->__isset.successAverageTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->successMinTime);
          this->__isset.successMinTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->successMaxTime);
          this->__isset.successMaxTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BizMethodInvokeInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BizMethodInvokeInfo");

  xfer += oprot->writeFieldBegin("totalCount", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->totalCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("successCount", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->successCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("failureCount", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->failureCount);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("successAverageTime", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->successAverageTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("successMinTime", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->successMinTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("successMaxTime", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->successMaxTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BizMethodInvokeInfo &a, BizMethodInvokeInfo &b) {
  using ::std::swap;
  swap(a.totalCount, b.totalCount);
  swap(a.successCount, b.successCount);
  swap(a.failureCount, b.failureCount);
  swap(a.successAverageTime, b.successAverageTime);
  swap(a.successMinTime, b.successMinTime);
  swap(a.successMaxTime, b.successMaxTime);
  swap(a.__isset, b.__isset);
}


